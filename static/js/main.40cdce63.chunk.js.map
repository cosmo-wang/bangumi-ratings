{"version":3,"sources":["environments.js","components/Navigation.js","Context/AnimeDataContext.jsx","home/Home.js","register/Register.js","components/SortHeader.js","components/FilterBox.js","components/FilterHeader.js","components/DropdownHeader.js","components/Description.js","components/AnimeModal.js","utils.js","components/AnimeList.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APPLICATION_ID","JAVASCRIPT_KEY","SERVER_URL","Navigation","Navbar","sticky","expand","id","Brand","href","Nav","className","activeKey","window","location","pathname","Item","Link","AnimeDataContext","React","createContext","ratings","descriptions","Component","SortHeader","props","key","header","onClick","sort","FilterBox","useState","displayBox","setDisplayBox","placeholder","type","onKeyPress","e","filter","clearFilter","FilterHeader","DropdownHeader","name","onChange","event","filterStatus","value","selected","Description","description","undefined","target","douban","year","genre","episodes","episode_length","AnimeModal","oldValue","Form","onSubmit","onSubmitOrEdit","Group","controlId","Label","Control","defaultValue","Row","Col","status","tv_episodes","movies","as","rows","story","music","passion","start_date","end_date","times_watched","Button","translateHeader","sortList","rawList","sortedCol","slice","a","b","isValid","compare","Parse","initialize","Env","serverURL","AnimeList","useContext","watchedHeaders","wantToWatchHeaders","activeDescription","setActiveDescription","showDescription","setShowDescription","showAnimeModal","setShowAnimeModal","showDeleteConfirmation","setShowDeleteConfirmation","submitNewAnime","setSubmitNewAnime","animeToDelete","setAnimeToDelete","activeId","setActiveId","displayListStatus","setDisplayListStatus","displayList","setDisplayList","tableHeaders","setTableHeaders","filterList","setFilterList","setSortedCol","editAnimeOldValue","setEditAnimeOldValue","useEffect","rating","isLoading","length","item","includes","Object","entries","changeStatus","newStatus","innerHTML","loadError","Alert","variant","Modal","centered","size","show","onHide","Header","Title","Body","Footer","closeButton","preventDefault","onAnimeSubmit","deleteAnime","refresh","Table","striped","borderless","hover","map","newFilterList","row","idx","illustration","substring","formatDescription","format","Login","history","useHistory","username","setUsername","password","setPassword","User","logIn","then","user","console","log","get","push","catch","error","code","message","autoFocus","block","disabled","App","setIsLoading","setLoadError","setRatings","fetchRatings","ratingsObj","extend","query","Query","limit","find","results","document","result","Number","toFixed","moment","write","JSON","stringify","submitNewRating","newRating","RatingsObj","newRatingObj","set","save","alert","updateRating","object","response","destroy","basename","process","Provider","exact","path","isNew","formElements","elements","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40cdce63.chunk.js","sourcesContent":["module.exports = {\n    APPLICATION_ID: '54T0X4tWovUBdnRd6EKdW3BrN4WJrpGBEJdwDk9J',\n    JAVASCRIPT_KEY: 'WREbi60D2GfVknGhH9Je1GJ931oIhIVkHUXD9u5R',\n    SERVER_URL: 'https://parseapi.back4app.com/'\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport './Navigation.css';\n\nfunction Navigation() {\n    return (\n      <Navbar sticky=\"top\" expand=\"lg\" id=\"navbar\">\n        <Navbar.Brand href=\"/\">追番补番</Navbar.Brand>\n        <Nav className=\"mr-auto\" activeKey={window.location.pathname}>\n          <Nav.Item><Nav.Link href=\"/\">我的列表</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"/today\">今日更新</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"/calendar\">看番日历</Nav.Link></Nav.Item>\n      </Nav>\n      </Navbar>\n    );\n}\n\nexport default Navigation;\n","import React from 'react';\n\nconst animeData = {\n  ratings: [],\n  descriptions: {}\n}\n\nconst AnimeDataContext = React.createContext(animeData);\n\nexport default AnimeDataContext;","import React from 'react';\nimport './Home.css';\nimport Parse from \"parse\";\nimport { Form, Button, Container, Col, Row } from 'react-bootstrap';\n\nclass Home extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            buttonLoading: false,\n            usernameError: false,\n            passwordError: false,\n            username: '',\n            password: ''\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    changeHandler = event => {\n        const name = event.target.getAttribute('id');\n        const value = event.target.value;\n        if (!value || value === \"\") {            \n            this.setState({\n                [`${name}Error`]: true\n            })\n        } else { \n            this.setState({\n                [`${name}Error`]: false,\n                [name]: value\n            })\n        }\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        try{\n            await Parse.User.logIn(this.state.username, this.state.password);\n            alert(\"Logged in!\");\n        } catch (e){\n            alert(e.message); \n        }\n        \n    }\n\n    render() {\n\n        return (\n            <section id=\"home\">\n                <Container>\n                    <Row className={\"box-form\"}>\n                        <Col>\n                            <Form onSubmit={this.handleSubmit} className={\"formLogin\"}>\n                                <Form.Group>\n                                    <Form.Label htmlFor=\"username\">Username</Form.Label>\n                                    <Form.Control\n                                        required\n                                        id=\"username\"\n                                        type=\"text\"\n                                        onChange={this.changeHandler}\n                                    />\n                                    <Form.Control.Feedback className={this.state.usernameError ? \"displayErrors\" : 'noError'}>Username is required</Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label htmlFor=\"password\">Password</Form.Label>\n                                    <Form.Control\n                                        required\n                                        id=\"password\"\n                                        type=\"password\"\n                                        onChange={this.changeHandler}\n                                    />\n                                    <Form.Control.Feedback className={this.state.passwordError ? \"displayErrors\" : 'noError'}>Password is required</Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Row>\n                                    <Button type=\"submit\" className={\"btn btn-primary\"} disabled={( (!this.state.username || !this.state.password) ? true : false) ? true : false }>Login</Button>\n                                    <Button href=\"/register\" variant=\"link\">Register</Button>\n                                </Form.Row>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </section >\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport './Register.css';\nimport { Form, Button, Container, Col, Row } from 'react-bootstrap';\nimport Parse from \"parse\";\n\nclass Register extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      buttonLoading: false,\n      usernameError: false,\n      passwordError: false,\n      emailError: false,\n      username: '',\n      password: '',\n      email: ''\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  changeHandler = event => {\n    const name = event.target.getAttribute('id');\n    const value = event.target.value;\n    console.log(value)\n    if (!value || value === \"\") {\n      this.setState({\n        [`${name}Error`]: true\n      })\n    } else {\n      this.setState({\n        [`${name}Error`]: false,\n        [name]: value\n      })\n    }\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    let user = new Parse.User();\n    user.set(\"username\", this.state.username);\n    user.set(\"password\", this.state.password);\n    user.set(\"email\", this.state.email);\n\n    try {\n      await user.signUp();\n      alert(\"User created!\");\n      this.props.history.push(\"/\")\n    } catch (error) {\n      // Show the error message somewhere and let the user try again.\n      alert(\"Error: \" + error.code + \" \" + error.message);\n    }\n\n  }\n\n  render() {\n\n    return (\n      <section id=\"register\">\n        <Container>\n          <Row>\n            <h1>Sign Up</h1>\n          </Row>\n          <Row className={\"box-form\"}>\n            <Col>\n              <Form onSubmit={this.handleSubmit} className={\"formLogin\"}>\n                <Form.Group>\n                  <Form.Label htmlFor=\"username\">Username</Form.Label>\n                  <Form.Control\n                    required\n                    id=\"username\"\n                    type=\"text\"\n                    onChange={this.changeHandler}\n                  />\n                  <Form.Control.Feedback className={this.state.usernameError ? \"displayErrors\" : 'noError'}>Username is required</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                  <Form.Label htmlFor=\"email\">Email</Form.Label>\n                  <Form.Control\n                    required\n                    id=\"email\"\n                    type=\"email\"\n                    onChange={this.changeHandler}\n                  />\n                  <Form.Control.Feedback className={this.state.emailError ? \"displayErrors\" : 'noError'}>Email is required</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                  <Form.Label htmlFor=\"password\">Password</Form.Label>\n                  <Form.Control\n                    required\n                    id=\"password\"\n                    type=\"password\"\n                    onChange={this.changeHandler}\n                  />\n                  <Form.Control.Feedback className={this.state.passwordError ? \"displayErrors\" : 'noError'}>Password is required</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Row>\n                  <Button type=\"submit\" className={\"btn btn-primary\"} disabled={( (!this.state.username || !this.state.password || !this.state.email) ? true : false) ? true : false }>Register</Button>\n                  <Button href=\"/\" variant=\"link\">Login</Button>\n                </Form.Row>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </section >\n    );\n  }\n}\n\nexport default Register;\n","import React from 'react';\nimport { BiSort } from \"react-icons/bi\";\nimport '../App.css';\n\nexport default function SortHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <BiSort className='icon clickable' onClick={props.sort}/>\n      </div>\n    </th>\n  );\n}","import React, { useState } from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './FilterBox.css';\nimport '../App.css';\n\nexport default function FilterBox(props) {\n  const [displayBox, setDisplayBox] = useState(false);\n  return (displayBox ? \n    <div className=\"filter-box\">\n      <input className=\"filter-input-box\" placeholder=\"输入......\" type=\"text\" onKeyPress={(e) => {\n        if (e.key === \"Enter\") props.filter(e);\n      }}/>\n      <div className=\"close-button clickable\" onClick={() => {\n        props.clearFilter();\n        setDisplayBox(!displayBox)\n      }}>&times;</div>\n    </div> :\n    <AiOutlineSearch className=\"filter-box icon clickable\" onClick={() => setDisplayBox(!displayBox)}/>);\n}\n","import React from 'react';\nimport FilterBox from './FilterBox';\nimport './FilterHeader.css';\n\nexport default function FilterHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <FilterBox filter={props.filter} clearFilter={props.clearFilter}/>\n      </div>\n    </th>\n  );\n}","import React from 'react';\nimport './DropdownHeader.css';\n\nexport default function DropdownHeader(props) {\n  return <th key={props.header}>\n    <select id=\"status\" className=\"dropdown-header\" name=\"status\" onChange={(event) => props.filterStatus(event)}>\n      <option value=\"\" selected>状态</option>\n      <option value=\"想看\">想看</option>\n      <option value=\"在看\">在看</option>\n      <option value=\"已看\">已看</option>\n    </select>\n  </th>\n};","import React from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './Description.css';\n\nexport default function Description(props) {\n  const description = props.description;\n  return description === undefined || description === null ? \n    <p>暂无简介</p> :\n    <div className=\"description\">\n      <div>\n        <h1>{description.name}<a href=\"https://www.douban.com\" target=\"_blank\"><AiOutlineSearch className=\"icon clickable\" /></a></h1>\n        <p>豆瓣评分：{description.douban}</p>\n        <p>年份：{description.year}</p>\n        <p>分类：{description.genre}</p>\n        <p>集数：{description.episodes}</p>\n        <p>单集片长：{description.episode_length}</p>\n        <p>简介：{description.description}</p>\n      </div>\n    </div>;\n}","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './AnimeModal.css';\nimport '../App.css';\n\nexport default function AnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  return <Form onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>豆瓣评分<a href=\"https://www.douban.com\" target=\"_blank\"><AiOutlineSearch className=\"icon clickable\" /></a></Form.Label><Form.Control defaultValue={oldValue.douban} id=\"douban\" type=\"input\"/></Col>\n        <Col><Form.Label>年份</Form.Label><Form.Control defaultValue={oldValue.year} id=\"year\" type=\"input\"/></Col>\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>TV集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n        <Col><Form.Label>剧场版</Form.Label><Form.Control defaultValue={oldValue.movies} id=\"movies\" type=\"input\"/></Col>\n        <Col><Form.Label>单集片长</Form.Label><Form.Control defaultValue={oldValue.episode_length} id=\"episode_length\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Label>简介</Form.Label>\n      <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>剧情评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"story\" type=\"input\"/></Col>\n        <Col><Form.Label>作画评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"illustration\" type=\"input\"/></Col>\n        <Col><Form.Label>音乐评分</Form.Label><Form.Control defaultValue={oldValue.music} id=\"music\" type=\"input\"/></Col>\n        <Col><Form.Label>情怀评分</Form.Label><Form.Control defaultValue={oldValue.passion} id=\"passion\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>开始观看日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>结束观看日期</Form.Label><Form.Control defaultValue={oldValue.end_date} id=\"end_date\" type=\"input\"/></Col>\n        <Col><Form.Label>观看次数</Form.Label><Form.Control defaultValue={oldValue.times_watched} id=\"times_watched\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Button className=\"pink-button\" type=\"submit\">\n      提交\n    </Button>\n\n  </Form>\n}\n","export function formatEpisodes(tv_episodes, movies) {\n  if (tv_episodes === undefined || movies === undefined) {\n    return \"\";\n  } else if (tv_episodes === 0) {\n    return `剧场版×${movies}`;\n  } else if (movies === 0) {\n    return `${tv_episodes}集`;\n  } else {\n    return `${tv_episodes}集+剧场版×${movies}`;\n  }\n}\n\nexport function formatDate(start_date, end_date) {\n  if (!start_date.isValid()) {\n    return \"\"\n  } else if (!end_date.isValid()) {\n    return `${start_date.format('YYYY-MM-DD')}至今`;\n  } else {\n    return `${start_date.format('YYYY-MM-DD')} 至 ${end_date.format('YYYY-MM-DD')}`;\n  }\n}\n\nexport function translateHeader(header) {\n  switch(header) {\n    case '名称':\n      return 'name';\n    case '集数':\n      return 'tv_episodes';\n    case '状态':\n      return 'status';\n    case '分类':\n      return 'genre';\n    case '剧情':\n      return 'story';\n    case '作画':\n      return 'illustration';\n    case '音乐':\n      return 'music';\n    case '情怀':\n      return 'passion';\n    case '评分':\n      return 'rating';\n    case '首次观看日期':\n      return 'start_date';\n    case '观看次数':\n      return 'times_watched';\n    default:\n      return 'unknown';\n  }\n}\n\nexport function sortList(rawList, sortedCol) {\n  return rawList.slice().sort((a, b) => {\n    if (sortedCol === \"start_date\") {\n      if (!a[sortedCol].isValid()) {\n        return 1;\n      } else if (!b[sortedCol].isValid()) {\n        return -1;\n      } else {\n        return compare(a[sortedCol], b[sortedCol]);\n      }\n    } else {\n      return compare(a[sortedCol], b[sortedCol]);\n    }\n  });\n}\n\nfunction compare(a, b) {\n  if (a > b) {\n    return -1;\n  } else if (a < b) {\n    return 1;\n  } else {\n    return 0;\n  }\n}","import React, { useState, useEffect } from 'react';\nimport Parse from 'parse';\nimport * as Env from \"../environments\";\nimport AnimeDataContext from '../Context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport SortHeader from './SortHeader';\nimport FilterHeader from './FilterHeader';\nimport DropdownHeader from './DropdownHeader';\nimport Description from './Description';\nimport AnimeModal from './AnimeModal';\nimport { sortList, formatEpisodes, formatDate, translateHeader } from \"../utils\";\nimport '../App.css';\nimport './AnimeList.css';\n\n\n\nParse.initialize(Env.APPLICATION_ID, Env.JAVASCRIPT_KEY);\nParse.serverURL = Env.SERVER_URL;\n\nfunction AnimeList(props) {\n  \n  const {ratings, descriptions} = React.useContext(AnimeDataContext);\n  // console.log(JSON.parse(LOCAL_DATA));\n\n  const watchedHeaders = ['序号', '名称', '集数', '分类', '剧情', '作画', '音乐', '情怀', '评分', '首次观看日期', '观看次数', ''];\n  const wantToWatchHeaders = ['序号', '名称', '集数', '分类', '年份', '豆瓣评分', '简介', ''];\n  const [activeDescription, setActiveDescription] = useState(null);\n  const [showDescription, setShowDescription] = useState(false);\n  const [showAnimeModal, setShowAnimeModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayListStatus, setDisplayListStatus] = useState(\"已看\");\n  const [displayList, setDisplayList] = useState(sortList(ratings, \"end_date\"));\n  const [tableHeaders, setTableHeaders] = useState(watchedHeaders);\n  const [filterList, setFilterList] = useState({});\n  const [sortedCol, setSortedCol] = useState();\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n\n  useEffect(() => {setSortedCol(\"start_date\")}, []);\n\n  useEffect(() => {\n    setDisplayList(ratings.filter((rating) => rating.status === displayListStatus));\n  }, [props.isLoading, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      setDisplayList(sortList(ratings, sortedCol));\n      setSortedCol(null);\n    }\n  }, [sortedCol, ratings]);\n\n  useEffect(() => {\n    if (filterList.length !== 0) {\n      for (const [key, value] of Object.entries(filterList)) {\n        setDisplayList(ratings.filter((item) => {\n          return item[key].includes(value);\n        }));\n      }\n      setFilterList([]);\n    }\n  }, [filterList]);\n\n  const changeStatus = (e) => {\n    const newStatus = e.target.innerHTML;\n    if (newStatus === '想看') {\n      setTableHeaders(wantToWatchHeaders);\n    } else {\n      setTableHeaders(watchedHeaders);\n    }\n    setDisplayListStatus(newStatus);\n  }\n\n  const formatDescription = (description) => {\n    if (description !== null && description !== undefined) {\n      return description.substring(0, 20) + '......';\n    }\n  }\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      番剧评分加载失败！\n    </Alert>;\n  } else {\n    return (<div id=\"table-wrapper\">\n      <Modal centered size='lg' show={showDescription} onHide={() => setShowDescription(false)}>\n        <Modal.Header>\n          <Modal.Title>简介</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Description description={activeDescription}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button className=\"pink-button\" onClick={() => setShowDescription(false)}>\n            关闭\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModal} onHide={() => setShowAnimeModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新番剧\" : \"编辑番剧\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              if (submitNewAnime) {\n                event.preventDefault();\n                props.onAnimeSubmit(event, null, true);\n                setShowAnimeModal(false);\n              } else {\n                event.preventDefault();\n                props.onAnimeSubmit(event, id, false);\n                setShowAnimeModal(false);\n              }\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteAnime(animeToDelete.id);\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          <Button className=\"pink-button\" onClick={changeStatus}>已看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>在看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>想看</Button>\n        </div>\n        <div>\n          <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModal(true);\n            setSubmitNewAnime(true);\n          }}>添加</Button>\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '名称' || header === '分类') {\n                  return <FilterHeader header={header}\n                    filter={(e) => {\n                      let newFilterList = {};\n                      for (let item in filterList) {\n                        newFilterList[item] = filterList[item];\n                      }\n                      newFilterList[translateHeader(header)] = e.target.value;\n                      setFilterList(newFilterList);\n                    }}\n                    clearFilter={() => {\n                      setFilterList({});\n                      setDisplayList(ratings);\n                    }}\n                  />;\n                } else if (header === '状态') {\n                  return <DropdownHeader header={header} filterStatus={(event) => {\n                    setFilterList({\"status\": event.target.value});\n                  }}/>\n                } else if (header !== ''){\n                  return <SortHeader header={header} sort={() => setSortedCol(translateHeader(header))}/>;\n                } else {\n                  return <th></th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map((row, idx) =>\n                <tr key={row.name}>\n                  <td>{idx + 1}</td>\n                  <td className='anime-name clickable' onClick={(e) => {\n                    setActiveDescription(\n                      {\n                        name: row.name,\n                        douban: row.douban,\n                        year: row.year,\n                        genre: row.genre,\n                        episodes: row.tv_episodes,\n                        episode_length: row.episode_length,\n                        description: row.description,\n                      }\n                    );\n                    setShowDescription(true);\n                  }}>{row.name}</td>\n                  <td>{formatEpisodes(row.tv_episodes, row.movies)}</td>\n                  <td>{row.genre}</td>\n                  <td>{displayListStatus === '想看' ? row.year : row.story}</td>\n                  <td>{displayListStatus === '想看' ? row.douban : row.illustration}</td>\n                  <td>{displayListStatus === '想看' ? formatDescription(row.description) : row.music}</td>\n                  {displayListStatus === '想看' ? \"\" : <td>{row.passion}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{row.rating}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatDate(row.start_date, row.end_date)}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{row.times_watched}</td>}\n                  <td><BiEditAlt className=\"clickable\" onClick={() => {\n                    setActiveId(row.id);\n                    setEditAnimeOldValue({\n                      name: row.name,\n                      year: row.year,\n                      douban: row.douban,\n                      tv_episodes: row.tv_episodes,\n                      movies: row.movies,\n                      episode_length: row.episode_length,\n                      status: row.status,\n                      genre: row.genre,\n                      description: row.description,\n                      story: row.story,\n                      illustration: row.illustration,\n                      music: row.music,\n                      passion: row.passion,\n                      start_date: row.start_date.format('YYYY-MM-DD'),\n                      end_date: row.end_date.format('YYYY-MM-DD'),\n                      times_watched: row.times_watched,\n                    });\n                    setSubmitNewAnime(false);\n                    setShowAnimeModal(true);\n                  }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                    setAnimeToDelete({\n                      name: row.name,\n                      id: row.id,\n                    });\n                    setShowDeleteConfirmation(true);\n                  }}/></td>\n                </tr>)\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\n\nexport default AnimeList;","import React, { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport Form from \"react-bootstrap/Form\";\nimport Parse from 'parse';\nimport Button from \"react-bootstrap/Button\";\nimport * as Env from \"../environments\";\nimport \"./Login.css\";\n\nexport default function Login() {\n  const history = useHistory();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  function validateForm() {\n    return username.length > 0 && password.length > 0;\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    // Create a new instance of the user class\n    var user = Parse.User\n        .logIn(username, password).then(function(user) {\n            console.log('User created successful with name: ' + user.get(\"username\") + ' and email: ' + user.get(\"email\"));\n        history.push('/');\n    }).catch(function(error){\n        console.log(\"Error: \" + error.code + \" \" + error.message);\n    });\n  }\n\n  return (\n    <div className=\"Login\">\n      <Form onSubmit={handleSubmit}>\n        <Form.Group size=\"lg\" controlId=\"username\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <Button block size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n          Login\n        </Button>\n      </Form>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport Navivation from './components/Navigation';\nimport AnimeDataContext from './Context/AnimeDataContext';\nimport Home from './home/Home';\nimport Register from './register/Register';\nimport AnimeList from './components/AnimeList';\nimport Login from \"./components/Login\";\nimport * as Env from \"./environments\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { sortList } from \"./utils\";\nimport Parse from 'parse';\nimport moment from 'moment';\nimport './App.css';\n\nfunction App() {\n  const [authenticated, setAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [ratings, setRatings] = useState([]);\n  const [descriptions, setDescriptions] = useState({\n    \"Anime 1\": {\n      name: \"Anime 1\",\n      episodes: 42,\n      status: \"已看\",\n      genre: \"恋爱\",\n      description: \"This is a description the anime.\"\n    }\n  });\n\n\n  const fetchRatings = async () => {\n    setIsLoading(true);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server\");\n      if (typeof document !== 'undefined'){\n        const ratings = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            year: result.get(\"year\"),\n            douban: result.get(\"douban\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            movies: result.get(\"movies\"),\n            episode_length: result.get(\"episode_length\"),\n            status: result.get(\"status\"),\n            genre: result.get(\"genre\"),\n            description: result.get(\"description\"),\n            story: result.get(\"story\"),\n            illustration: result.get(\"illustration\"),\n            music: result.get(\"music\"),\n            passion: result.get(\"passion\"),\n            rating: Number((result.get(\"story\") + result.get(\"illustration\") + result.get(\"music\") + result.get(\"passion\")).toFixed(1)),\n            start_date: moment(result.get(\"start_date\"), 'YYYY-MM-DD'),\n            end_date: moment(result.get(\"end_date\"), 'YYYY-MM-DD'),\n            times_watched: result.get(\"times_watched\"),\n          }}\n        );\n        setRatings(sortList(ratings, \"start_date\"));\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      if (typeof document !== 'undefined') document.write(`Error while fetching ParseObjects: ${JSON.stringify(error)}`);\n      console.error('Error while fetching ParseObjects', error);\n    });\n  };\n\n  const submitNewRating = async (newRating) => {\n    const RatingsObj = Parse.Object.extend('Ratings');\n    const newRatingObj = new RatingsObj();\n    console.log(newRating);\n    for (const [key, value] of Object.entries(newRating)) {\n      newRatingObj.set(key, value)\n    }\n\n    newRatingObj.save().then(\n      (result) => {\n        console.log(result);\n        alert(\"已提交更新！\");\n        fetchRatings();\n      },\n      (error) => {\n        console.log(error);\n        alert(\"更新失败，请稍后重试。\");\n      }\n    );\n  };\n\n  const updateRating = async (id, newRating) => {\n    console.log(newRating);\n    console.log(id);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newRating)) {\n        console.log(\"here\");\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        console.log(response);\n        alert(\"已提交更新！\");\n        fetchRatings();\n      }, (error) => {\n        console.log(error);\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n  \n  const deleteAnime = async (id) => {\n    console.log(id);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        console.log(response);\n        alert(\"已删除番剧！\");\n        fetchRatings();\n      }, (error) => {\n        console.log(error);\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchRatings();\n  }, []);\n\n  const handleAnimeSubmit = (event, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newRating = {\n      \"name\": formElements.name.value,\n      \"year\": formElements.year.value,\n      \"douban\": Number(formElements.douban.value),\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"movies\": Number(formElements.movies.value),\n      \"episode_length\": Number(formElements.episode_length.value),\n      \"status\": formElements.status.value,\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"story\": Number(formElements.story.value),\n      \"illustration\": Number(formElements.illustration.value),\n      \"music\": Number(formElements.music.value),\n      \"passion\": Number(formElements.passion.value),\n      \"start_date\": formElements.start_date.value,\n      \"end_date\": formElements.end_date.value,\n      \"times_watched\": Number(formElements.times_watched.value),\n    };\n    if (isNew) {\n      submitNewRating(newRating);\n    } else {\n      updateRating(id, newRating);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"App\">\n        <Navivation />\n        <Router basename={process.env.PUBLIC_URL + \"/bangumi-ratings\"}>\n          <Switch>\n            <AnimeDataContext.Provider value={{ratings: ratings, descriptions: descriptions}}>\n              <Route exact path=\"/login\">\n                <Login />\n              </Route>\n              <Route path=\"/\">\n                <AnimeList isLoading={isLoading} loadError={loadError} refresh={fetchRatings} onAnimeSubmit={handleAnimeSubmit} deleteAnime={deleteAnime}/>\n              </Route>\n              <Route path=\"/today\">\n\n              </Route>\n              <Route path=\"/calendar\">\n\n              </Route>\n            </AnimeDataContext.Provider>\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}