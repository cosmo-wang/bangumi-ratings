{"version":3,"sources":["environments.js","context/AuthenticationContext.jsx","components/Navigation.js","context/AnimeDataContext.jsx","components/SortHeader.js","components/FilterBox.js","components/FilterHeader.js","components/Description.js","components/AnimeModal.js","utils/utils.js","components/AnimeList.js","components/Rankings.js","components/DailyNewAnimes.js","components/NewAnimeList.js","components/MonthlySummary.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APPLICATION_ID","JAVASCRIPT_KEY","SERVER_URL","AuthenticationContext","createContext","useAuthenticationContext","useContext","UserManagement","authenticated","setAuthenticating","handleSignOut","id","className","onClick","Navigation","props","Navbar","sticky","expand","Brand","href","Nav","activeKey","window","location","pathname","Item","Link","switchPage","animeData","ratings","newAnimes","monthlySummaries","AnimeDataContext","React","SortHeader","key","header","sort","FilterBox","useState","displayBox","setDisplayBox","placeholder","type","onKeyPress","e","filter","clearFilter","FilterHeader","Description","description","undefined","name","target","rel","douban","year","genre","episodes","episode_length","AnimeModal","oldValue","Form","onSubmit","event","onSubmitOrEdit","Group","controlId","Label","Control","defaultValue","Row","Col","status","tv_episodes","movies","as","rows","story","music","passion","start_date","end_date","times_watched","Button","formatEpisodes","formatTime","time","isNaN","Math","round","calculateDailyTime","row","days","diff","translate","word","sortList","rawList","sortedCol","slice","a","b","aQuantity","bQuantity","isValid","compare","AnimeList","watchedHeaders","wantToWatchHeaders","activeDescription","setActiveDescription","showDescription","setShowDescription","showAnimeModal","setShowAnimeModal","showAnimeModalAuto","setShowAnimeModalAuto","showDeleteConfirmation","setShowDeleteConfirmation","submitNewAnime","setSubmitNewAnime","submitNewAnimeAuto","setSubmitNewAnimeAuto","animeToDelete","setAnimeToDelete","activeId","setActiveId","displayListStatus","setDisplayListStatus","displayList","setDisplayList","tableHeaders","setTableHeaders","filterList","setFilterList","setSortedCol","editAnimeOldValue","setEditAnimeOldValue","useEffect","rating","isLoading","length","value","item","includes","Object","entries","changeStatus","newStatus","innerHTML","loadError","Alert","variant","Modal","centered","size","show","onHide","Header","Title","Body","Footer","closeButton","preventDefault","onAnimeSubmit","info","pageSrc","split","parseInt","error","console","trim","parseDoubanPage","elements","html","illustration","deleteAnime","refresh","Table","striped","borderless","hover","map","newFilterList","idx","substring","formatDescription","format","Rankings","rankings","res","anime","ranking","push","rankingsDictToArray","changeRanking","DailyNewAnimes","moment","subtract","add","locale","day","ListGroup","isSame","newAnime","startDate","isAfter","todayAnime","NewAnimeModal","season","next_episode_day","formElements","document","getElementById","handleRateNewAnime","Number","NewAnimeList","seasons","setSeasons","showAddModal","setShowAddModal","showRateModal","setShowRateModal","showRankings","setShowRankings","showToday","setShowToday","setRankings","localRankings","setLocalRankings","displayListSeason","setDisplayListSeason","rateAnimePartialInfo","setRateAnimePartialInfo","changeSeason","sortAnimesByRankings","animes","filteredNewAnimes","d","Date","getFullYear","month","floor","getMonth","preSeason","nextSeason","getSeason","currentSeason","forEach","currentSeasonRankings","seasons_ranking","dates","keys","latestRank","getLatestRankings","onNewAnimeSubmit","partialInfo","deleteNewAnime","offset","newAnimeName","currentTarget","parentElement","getElementsByClassName","innerText","originRanking","newRankings","possibleToChange","max","getMaxRanking","updatedIds","dateString","newRanking","assign","updateNewAnimesRankings","QuoteModificationContext","useQuoteModificationContext","Quote","setQuoteToEdit","setShowQuoteModal","setIsNewQuote","setActiveQuoteId","quote","content","translation","person","bangumi","Summary","addNewQuote","summary","bangumi_num","tv_episode_num","total_time","daysInMonth","quotes","bangumis","bangumi_name","MonthlySummary","isNewQuote","showQuoteModal","activeQuoteId","quoteToEdit","activeMonth","setActiveMonth","onQuoteSubmit","deleteQuote","localeCompare","sortMonthlySummaries","entry","Provider","Login","username","password","setUsername","setPassword","handleLogin","autoFocus","onChange","disabled","Parse","initialize","Env","serverURL","App","setAuthenticated","authenticating","userStr","sessionStorage","getItem","JSON","parse","getUser","user","setUser","token","setToken","setIsLoading","setLoadError","activePage","setActivePage","setRatings","setNewAnimes","summaries","setSummaries","setQuotes","fetchRatings","ratingsObj","extend","query","Query","limit","find","then","results","log","result","get","toFixed","fetchQuotes","quotesObj","fetchNewAnimes","submitNewEntry","newEntry","databaseName","DataObject","equalTo","alert","newObj","set","save","submitNewQuote","newQuote","QuotesObj","newQuotesObj","updateEntry","obj","object","response","updateQuote","ids","containedIn","saveAll","err","deleteEntry","destroy","tempSummaries","endMonth","movie_num","daily_time","handleAnimeSubmit","isNew","newRating","handleNewAnimeSubmit","handleQuoteSubmit","User","logIn","setItem","stringify","setUserSession","getSessionToken","getUsername","catch","message","removeItem","mainElement","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,CACbC,eAAgB,2CAChBC,eAAgB,2CAChBC,WAAY,mC,8pBCDHC,EAAwBC,wBAAc,MAE5C,SAASC,IACd,OAAOC,qBAAWH,G,aCEpB,SAASI,IAAkB,IAAD,EACoCF,IAApDG,EADgB,EAChBA,cAAeC,EADC,EACDA,kBAAmBC,EADlB,EACkBA,cAC1C,OAAIF,EACK,yBAAKG,GAAG,mBACX,yBAAKC,UAAU,wBAAwBC,QAASH,GAAhD,iBAGG,yBAAKE,UAAU,wBAAwBC,QAAS,kBAAMJ,GAAkB,KAAxE,gBAmBIK,MAff,SAAoBC,GAClB,OACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,MAAMC,OAAO,KAAKP,GAAG,UAClC,kBAACK,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,4BACA,kBAACC,EAAA,EAAD,CAAKT,UAAU,UAAUU,UAAWC,OAAOC,SAASC,UAClD,kBAACJ,EAAA,EAAIK,KAAL,KAAU,kBAACL,EAAA,EAAIM,KAAL,CAAUd,QAAS,kBAAME,EAAMa,WAAW,eAA1C,6BACV,kBAACP,EAAA,EAAIK,KAAL,KAAU,kBAACL,EAAA,EAAIM,KAAL,CAAUd,QAAS,kBAAME,EAAMa,WAAW,kBAA1C,6BACV,kBAACP,EAAA,EAAIK,KAAL,KAAU,kBAACL,EAAA,EAAIM,KAAL,CAAUd,QAAS,kBAAME,EAAMa,WAAW,oBAA1C,6BACV,kBAACP,EAAA,EAAIK,KAAL,KAAU,kBAACL,EAAA,EAAIM,KAAL,CAAUd,QAAS,kBAAME,EAAMa,WAAW,qBAA1C,8BAEZ,kBAACrB,EAAD,QC1BAsB,EAAY,CAChBC,QAAS,GACTC,UAAW,GACXC,iBAAkB,IAKLC,EAFUC,IAAM9B,cAAcyB,G,gDCJ9B,SAASM,EAAWpB,GACjC,OACE,wBAAIqB,IAAKrB,EAAMsB,QACb,yBAAKzB,UAAU,gBACb,6BAAMG,EAAMsB,QACZ,kBAAC,IAAD,CAAQzB,UAAU,iBAAiBC,QAASE,EAAMuB,S,oBCJ3C,SAASC,EAAUxB,GAAQ,IAAD,EACHyB,oBAAS,GADN,mBAChCC,EADgC,KACpBC,EADoB,KAEvC,OAAQD,EACN,yBAAK7B,UAAU,cACb,2BAAOA,UAAU,mBAAmB+B,YAAY,qBAAWC,KAAK,OAAOC,WAAY,SAACC,GACpE,UAAVA,EAAEV,KAAiBrB,EAAMgC,OAAOD,MAEtC,yBAAKlC,UAAU,yBAAyBC,QAAS,WAC/CE,EAAMiC,cACNN,GAAeD,KAFjB,SAKF,kBAAC,IAAD,CAAiB7B,UAAU,4BAA4BC,QAAS,kBAAM6B,GAAeD,M,OCb1E,SAASQ,EAAalC,GACnC,OACE,wBAAIqB,IAAKrB,EAAMsB,QACb,yBAAKzB,UAAU,gBACb,6BAAMG,EAAMsB,QACZ,kBAAC,EAAD,CAAWU,OAAQhC,EAAMgC,OAAQC,YAAajC,EAAMiC,gB,OCL7C,SAASE,EAAYnC,GAClC,IAAMoC,EAAcpC,EAAMoC,YAC1B,YAAuBC,IAAhBD,GAA6C,OAAhBA,EAClC,uDACA,yBAAKvC,UAAU,eACb,6BACE,4BACGuC,EAAYE,KACb,uBAAGjC,KAAM,mCAAqC+B,EAAYE,KAAMC,OAAO,SAASC,IAAI,uBAClF,kBAAC,IAAD,CAAiB3C,UAAU,qBAG/B,4DAASuC,EAAYK,QACrB,gDAAOL,EAAYM,MACnB,gDAAON,EAAYO,OACnB,gDAAOP,EAAYQ,UACnB,4DAASR,EAAYS,gBACrB,gDAAOT,EAAYA,e,mBCbZ,SAASU,EAAW9C,GACjC,IAAM+C,OAA8BV,IAAnBrC,EAAM+C,UAA6C,OAAnB/C,EAAM+C,SAAoB,GAAK/C,EAAM+C,SACtF,OAAO,kBAACC,EAAA,EAAD,CAAMC,SAAU,SAACC,GAAWlD,EAAMmD,eAAeD,EAAOlD,EAAMJ,MACnE,kBAACoD,EAAA,EAAKI,MAAN,CAAYC,UAAU,QACpB,kBAACL,EAAA,EAAKM,MAAN,qBACA,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAAST,KAAMT,KAAK,WAElD,kBAACmB,EAAA,EAAKI,MAAN,KACE,kBAACJ,EAAA,EAAKS,IAAN,CAAU5D,UAAU,aAClB,kBAAC6D,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,gCAAgB,uBAAGjD,KAAM,yBAA0BkC,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAiB3C,UAAU,qBAAoC,kBAACmD,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASN,OAAQ7C,GAAG,SAASiC,KAAK,WAC/N,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,qBAA2B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASL,KAAM9C,GAAG,OAAOiC,KAAK,WAC1F,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,qBAA2B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASY,OAAQ/D,GAAG,SAASiC,KAAK,YAEhG,kBAACmB,EAAA,EAAKS,IAAN,CAAU5D,UAAU,aAClB,kBAAC6D,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,qBAA2B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASJ,MAAO/C,GAAG,QAAQiC,KAAK,WAC5F,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,uBAA6B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASa,YAAahE,GAAG,cAAciC,KAAK,WAC1G,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,2BAA4B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASc,OAAQjE,GAAG,SAASiC,KAAK,WAC/F,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,iCAA6B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASF,eAAgBjD,GAAG,iBAAiBiC,KAAK,aAGpH,kBAACmB,EAAA,EAAKI,MAAN,KACE,kBAACJ,EAAA,EAAKM,MAAN,qBACA,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASX,YAAaxC,GAAG,cAAckE,GAAG,WAAWC,KAAK,OAExF,kBAACf,EAAA,EAAKI,MAAN,KACE,kBAACJ,EAAA,EAAKS,IAAN,CAAU5D,UAAU,aAClB,kBAAC6D,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,iCAA6B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASiB,MAAOpE,GAAG,QAAQiC,KAAK,WAC9F,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,iCAA6B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASiB,MAAOpE,GAAG,eAAeiC,KAAK,WACrG,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,iCAA6B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASkB,MAAOrE,GAAG,QAAQiC,KAAK,WAC9F,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,iCAA6B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASmB,QAAStE,GAAG,UAAUiC,KAAK,aAGtG,kBAACmB,EAAA,EAAKI,MAAN,KACE,kBAACJ,EAAA,EAAKS,IAAN,CAAU5D,UAAU,aAClB,kBAAC6D,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,6CAA+B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASoB,WAAYvE,GAAG,aAAaiC,KAAK,WAC1G,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,6CAA+B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASqB,SAAUxE,GAAG,WAAWiC,KAAK,WACtG,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,iCAA6B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASsB,cAAezE,GAAG,gBAAgBiC,KAAK,aAGlH,kBAACyC,EAAA,EAAD,CAAQzE,UAAU,cAAcgC,KAAK,UAArC,iBCvBG,SAAS0C,EAAeX,EAAaC,GAC1C,YAAoBxB,IAAhBuB,QAAwCvB,IAAXwB,EACxB,GACkB,IAAhBD,EACH,yBAAN,OAAcC,GACM,IAAXA,EACH,GAAN,OAAUD,EAAV,UAEM,GAAN,OAAUA,EAAV,wCAA8BC,GAc3B,SAASW,EAAWC,GACzB,OAAIC,MAAMD,GACD,IAELA,GAAQ,GACHE,KAAKC,MAAMH,EAAO,GAAK,IAAM,GAAK,gBAElCE,KAAKC,MAAa,GAAPH,GAAa,GAAK,gBAIjC,SAASI,EAAmBC,GACjC,IAAMC,EAAOD,EAAIV,SAASY,KAAKF,EAAIX,WAAY,QAAU,EACnDtB,OAAwCR,IAAvByC,EAAIjC,gBAAuD,IAAvBiC,EAAIjC,eAAuB,GAAKiC,EAAIjC,eAE/F,OADkBiC,EAAIlB,YAAcf,EAA8B,GAAbiC,EAAIjB,QACtCkB,EAGd,SAASE,EAAUC,GACxB,OAAOA,GACL,IAAK,eACH,MAAO,OACT,IAAK,eACL,IAAK,2BACH,MAAO,cACT,IAAK,eACH,MAAO,SACT,IAAK,eACH,MAAO,QACT,IAAK,eACH,MAAO,QACT,IAAK,eACH,MAAO,eACT,IAAK,eACH,MAAO,QACT,IAAK,eACH,MAAO,UACT,IAAK,eACH,MAAO,SACT,IAAK,uCACH,MAAO,WACT,IAAK,2BACH,MAAO,gBACT,IAAK,eACH,MAAO,OACT,IAAK,2BACH,MAAO,SACT,IAAK,2BACH,MAAO,aACT,IAAK,eACH,MAAO,UACT,IAAK,eACH,MAAO,SACT,IAAK,uCACH,MAAO,aACT,IAAK,qBACH,MAAO,mBACT,QACE,MAAO,WAIN,SAASC,EAASC,EAASC,GAChC,OAAOD,EAAQE,QAAQ/D,MAAK,SAACgE,EAAGC,GAC9B,IAAMC,EAA0B,eAAdJ,EAA6BR,EAAmBU,GAAKA,EAAEF,GACnEK,EAA0B,eAAdL,EAA6BR,EAAmBW,GAAKA,EAAEH,GACzE,MAAkB,eAAdA,GAAmD,kBAAdA,EAClCI,EAAUE,UAEHD,EAAUC,UAGbC,EAAQH,EAAWC,IAFlB,EAFD,EAOFE,EAAQH,EAAWC,MAKhC,SAASE,EAAQL,EAAGC,GAClB,OAAID,EAAIC,GACE,EACCD,EAAIC,EACN,EAEA,E,OC0LIK,MA7Sf,SAAmB7F,GAAQ,IAEjBP,EAAkBH,IAAlBG,cAEAsB,EAAYI,IAAM5B,WAAW2B,GAA7BH,QAEF+E,EAAiB,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,uCAAU,2BAAQ,IAC1FC,EAAqB,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,2BAAQ,eAAM,IAPhD,EAQ0BtE,mBAAS,MARnC,mBAQjBuE,EARiB,KAQEC,EARF,OASsBxE,oBAAS,GAT/B,mBASjByE,EATiB,KASAC,EATA,OAUoB1E,oBAAS,GAV7B,mBAUjB2E,EAViB,KAUDC,EAVC,OAW4B5E,oBAAS,GAXrC,mBAWjB6E,EAXiB,KAWGC,EAXH,OAYoC9E,oBAAS,GAZ7C,mBAYjB+E,EAZiB,KAYOC,EAZP,OAaoBhF,oBAAS,GAb7B,mBAajBiF,EAbiB,KAaDC,EAbC,OAc4BlF,oBAAS,GAdrC,mBAcjBmF,EAdiB,KAcGC,EAdH,OAekBpF,mBAAS,IAf3B,oBAejBqF,GAfiB,MAeFC,GAfE,SAgBQtF,qBAhBR,qBAgBjBuF,GAhBiB,MAgBPC,GAhBO,SAiB0BxF,mBAAS,gBAjBnC,qBAiBjByF,GAjBiB,MAiBEC,GAjBF,SAkBc1F,mBAASV,GAlBvB,qBAkBjBqG,GAlBiB,MAkBJC,GAlBI,SAmBgB5F,mBAASqE,GAnBzB,qBAmBjBwB,GAnBiB,MAmBHC,GAnBG,SAoBY9F,mBAAS,IApBrB,qBAoBjB+F,GApBiB,MAoBLC,GApBK,SAqBUhG,qBArBV,qBAqBjB4D,GArBiB,MAqBNqC,GArBM,SAsB0BjG,mBAAS,MAtBnC,qBAsBjBkG,GAtBiB,MAsBEC,GAtBF,MAwBxBC,qBAAU,WAAOH,GAAa,cAAc,IAE5CG,qBAAU,WACRJ,GAAc,IACdJ,GAAelC,EAASpE,EAAQiB,QAAO,SAAC8F,GAAD,OAAYA,EAAOnE,SAAWuD,MAAoB,eACxF,CAAClH,EAAM+H,UAAWhH,EAASmG,KAE9BW,qBAAU,WACU,OAAdxC,IAEAgC,GAAelC,EAASpE,EAAQiB,QAAO,SAAC8F,GAAD,OAAYA,EAAOnE,SAAWuD,MAD7C,iBAAtBA,IAA4C,aAAd7B,GACyD,aAEAA,KAE3FqC,GAAa,OAEa,iBAAtBR,IACFG,GAAelC,EAASpE,EAAQiB,QAAO,SAAC8F,GAAD,OAAYA,EAAOnE,SAAWuD,MAAoB,iBAG5F,CAAC7B,GAAWtE,EAASmG,KAExBW,qBAAU,WACR,GAA0B,IAAtBL,GAAWQ,OAAc,CAC3B,IAD4B,IAAD,uCACf3G,EADe,KACV4G,EADU,KAEzBZ,GAAetG,EAAQiB,QAAO,SAACkG,GAC7B,OAAOA,EAAK7G,GAAK8G,SAASF,IAAUC,EAAKvE,SAAWuD,QAFxD,MAA2BkB,OAAOC,QAAQb,IAA1C,eAAwD,IAKxDC,GAAc,OAEf,CAAC1G,EAASyG,GAAYN,KAEzB,IAAMoB,GAAe,SAACvG,GACpB,IAAMwG,EAAYxG,EAAEQ,OAAOiG,UAEzBjB,GADgB,iBAAdgB,EACcxC,EAEAD,GAElBqB,GAAqBoB,IASvB,OAAIvI,EAAM+H,UACD,yBAAKlI,UAAU,WACpB,gEAEOG,EAAMyI,UACR,kBAACC,EAAA,EAAD,CAAOC,QAAQ,UAAf,0DAIC,yBAAK9I,UAAU,gBACrB,kBAAC+I,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAM7C,EAAiB8C,OAAQ,kBAAM7C,GAAmB,KAChF,kBAACyC,EAAA,EAAMK,OAAP,KACE,kBAACL,EAAA,EAAMM,MAAP,sBAEF,kBAACN,EAAA,EAAMO,KAAP,KACE,kBAAC,EAAD,CAAa/G,YAAa4D,KAE5B,kBAAC4C,EAAA,EAAMQ,OAAP,KACE,kBAAC9E,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAAS,kBAAMqG,GAAmB,KAAlE,kBAKJ,kBAACyC,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAM3C,EAAgB4C,OAAQ,kBAAM3C,GAAkB,KAC9E,kBAACuC,EAAA,EAAMK,OAAP,CAAcI,aAAW,GACzB,kBAACT,EAAA,EAAMM,MAAP,KAAcxC,EAAiB,iCAAU,6BAEzC,kBAACkC,EAAA,EAAMO,KAAP,KACE,kBAAC,EAAD,CACEhG,eAAgB,SAACD,EAAOtD,GACtBsD,EAAMoG,iBACF5C,GAEOE,EADT5G,EAAMuJ,cAAcrG,EAAO,MAAM,GAIjClD,EAAMuJ,cAAcrG,EAAOtD,GAAI,GAEjCyG,GAAkB,IAEpBtD,SAAU4E,GACV/H,GAAIoH,OAIV,kBAAC4B,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAMzC,EAAoB0C,OAAQ,kBAAMzC,GAAsB,KACtF,kBAACqC,EAAA,EAAMK,OAAP,CAAcI,aAAW,GACzB,kBAACT,EAAA,EAAMM,MAAP,wCAEA,kBAACN,EAAA,EAAMO,KAAP,KACE,kBAACnG,EAAA,EAAD,CAAMC,SAAU,SAACC,GACfA,EAAMoG,iBACN,IAAME,EDNX,SAAyBC,GAC9B,IAAMnH,EAAOmH,EAAQC,MAAM,MAAM,GAAGA,MAAM,KAAK,GACzChH,EAAO+G,EAAQC,MAAM,kBAAQ,GAAGA,MAAM,KAAK,GAC3CjH,EAASgH,EAAQC,MAAM,4BAAQ,GAAGA,MAAM,MAAM,GAChD9F,EAAc,GAClB,IACEA,EAAc+F,SAASF,EAAQC,MAAM,kBAAQ,GAAGA,MAAM,KAAK,IAC3D,MAAOE,GACPC,QAAQD,MAAMA,GAEhB,IAAI/G,EAAiB,GACrB,IACEA,EAAiB8G,SAASF,EAAQC,MAAM,8BAAU,GAAGA,MAAM,KAAK,IAChE,MAAOE,GACPC,QAAQD,MAAMA,GAEhB,IAAMxH,EAAcqH,EAAQC,MAAM,gEAAqB,GAAGA,MAAM,QAAQ,GAAGI,OAC3E,MAAO,CACLxH,KAAMA,EACNI,KAAMA,EACND,OAAQA,EACRmB,YAAac,MAAMd,GAAe,EAAIA,EACtCf,eAAgB6B,MAAM7B,GAAkB,GAAIA,EAC5CT,YAAaA,GCjBQ2H,CAAgB7G,EAAMX,OAAOyH,SAASC,KAAKhC,OACxDL,GAAqB,CACnBtF,KAAMkH,EAAKlH,KACXI,KAAM8G,EAAK9G,KACXD,OAAQ+G,EAAK/G,OACbmB,YAAa4F,EAAK5F,YAClBC,OAAQ,EACRhB,eAAgB2G,EAAK3G,eACrBc,OAAQ,eACRhB,MAAO,GACPP,YAAaoH,EAAKpH,YAClB4B,MAAO,EACPkG,aAAc,EACdjG,MAAO,EACPC,QAAS,EACTC,WAAY,KACZC,SAAU,KACVC,cAAe,IAEjBwC,GAAsB,GACtBN,GAAsB,GACtBU,GAAY,MACZZ,GAAkB,KAElB,kBAACrD,EAAA,EAAKI,MAAN,KACE,kBAACJ,EAAA,EAAKM,MAAN,uCACA,kBAACN,EAAA,EAAKO,QAAN,CAAc3D,GAAG,OAAOkE,GAAG,WAAWC,KAAK,QAE7C,kBAACO,EAAA,EAAD,CAAQzE,UAAU,cAAcgC,KAAK,UAArC,mBAMN,kBAAC+G,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAMvC,EAAwBwC,OAAQ,kBAAMvC,GAA0B,KAC9F,kBAACmC,EAAA,EAAMK,OAAP,CAAcI,aAAW,GACvB,kBAACT,EAAA,EAAMM,MAAP,kCAEF,kBAACN,EAAA,EAAMO,KAAP,KACE,qFAAerC,GAAcxE,KAA7B,kBAEF,kBAACsG,EAAA,EAAMQ,OAAP,KACE,kBAAC9E,EAAA,EAAD,CAAQqE,QAAQ,UAAU7I,QAAS,WACjCiH,GAAiB,IACjBN,GAA0B,KAF5B,gBAIA,kBAACnC,EAAA,EAAD,CAAQqE,QAAQ,SAAS7I,QAAS,WAChCE,EAAMmK,YAAYrD,GAAclH,GAAI,WACpCmH,GAAiB,IACjBN,GAA0B,KAH5B,kBAOJ,yBAAK5G,UAAU,gBACb,6BACE,kBAACyE,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAASwI,IAAzC,gBACA,kBAAChE,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAASwI,IAAzC,gBACA,kBAAChE,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAASwI,IAAzC,iBAEF,6BACG7I,EAAgB,kBAAC6E,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAAS,WACxD8H,GAAqB,MACrBX,GAAY,MACZZ,GAAkB,GAClBM,GAAkB,KAJH,4BAKE,qCAClBlH,EAAgB,kBAAC6E,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAAS,WACxD8H,GAAqB,MACrBX,GAAY,MACZV,GAAsB,GACtBI,GAAkB,KAJH,4BAKE,qCACnB,kBAACrC,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAASE,EAAMoK,SAA/C,kBAGJ,6BACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,YAAU,EAACC,OAAK,EAAC1B,KAAK,KAAKH,QAAQ,QAAQ/I,GAAG,SAC3D,+BACE,wBAAIC,UAAU,iBACXyH,GAAamD,KAAI,SAAAnJ,GAChB,MAAe,iBAAXA,GAA8B,iBAAXA,EACd,kBAAC,EAAD,CAAcD,IAAKC,EAAQA,OAAQA,EACxCU,OAAQ,SAACD,GACP,IAAI2I,EAAgB,GACpB,IAAK,IAAIxC,KAAQV,GACfkD,EAAcxC,GAAQV,GAAWU,GAEnCwC,EAAczF,EAAU3D,IAAWS,EAAEQ,OAAO0F,MAC5CR,GAAciD,IAEhBzI,YAAa,WACXwF,GAAc,IACdJ,GAAelC,EAASpE,EAAQiB,QAAO,SAAC8F,GAAD,OAAYA,EAAOnE,SAAWuD,MAAoB,gBAGzE,iBAAX5F,EACF,wBAAID,IAAKC,GAAT,gBACa,KAAXA,EACF,kBAACF,EAAD,CAAYC,IAAKC,EAAQA,OAAQA,EAAQC,KAAM,kBAAMmG,GAAazC,EAAU3D,OAE5E,wBAAID,IAAKC,SAKxB,+BAEI8F,GAAYqD,KAAI,SAAC3F,EAAK6F,GAAN,OACd,wBAAItJ,IAAKyD,EAAIxC,MACX,4BAAKqI,EAAM,GACX,wBAAI9K,UAAU,uBAAuBC,QAAS,SAACiC,GAC7CkE,EACE,CACE3D,KAAMwC,EAAIxC,KACVG,OAAQqC,EAAIrC,OACZC,KAAMoC,EAAIpC,KACVC,MAAOmC,EAAInC,MACXC,SAAUkC,EAAIlB,YACdf,eAAgBiC,EAAIjC,eACpBT,YAAa0C,EAAI1C,cAGrB+D,GAAmB,KACjBrB,EAAIxC,MACR,4BAAKiC,EAAeO,EAAIlB,YAAakB,EAAIjB,SACzC,4BAAKiB,EAAInC,OACT,4BAA2B,iBAAtBuE,GAA6BpC,EAAIpC,KAAOoC,EAAId,OACjD,4BAA2B,iBAAtBkD,GAA6BpC,EAAIrC,OAASqC,EAAIoF,cACnD,4BAA2B,iBAAtBhD,GA1LK,SAAC9E,GACzB,GAAoB,OAAhBA,QAAwCC,IAAhBD,EAC1B,OAAOA,EAAYwI,UAAU,EAAG,IAAM,SAwLQC,CAAkB/F,EAAI1C,aAAe0C,EAAIb,OACpD,iBAAtBiD,GAA6B,GAAK,4BAAKpC,EAAIZ,SACrB,iBAAtBgD,GAA6B,GAAK,4BAAKpC,EAAIgD,QACrB,iBAAtBZ,GAA6B,GAAK,6BD7O1B/C,EC6O0CW,EAAIX,WD7OlCC,EC6O8CU,EAAIV,SD5OlFD,EAAWwB,UAEJvB,EAASuB,UAGb,GAAN,OAAUxB,EAAW2G,OAAO,YAA5B,mBAA6C1G,EAAS0G,OAAO,aAFvD,GAAN,OAAU3G,EAAW2G,OAAO,YAA5B,gBAFO,KC4O8B,iBAAtB5D,GAA6B,GAAK,4BAAK1C,EAAWK,EAAmBC,KACtE,gCAAMrF,EACF,oCACE,kBAAC,IAAD,CAAWI,UAAU,YAAYC,QAAS,WACxCmH,GAAYnC,EAAIlF,IAChBgI,GAAqB,CACnBtF,KAAMwC,EAAIxC,KACVI,KAAMoC,EAAIpC,KACVD,OAAQqC,EAAIrC,OACZmB,YAAakB,EAAIlB,YACjBC,OAAQiB,EAAIjB,OACZhB,eAAgBiC,EAAIjC,eACpBc,OAAQmB,EAAInB,OACZhB,MAAOmC,EAAInC,MACXP,YAAa0C,EAAI1C,YACjB4B,MAAOc,EAAId,MACXkG,aAAcpF,EAAIoF,aAClBjG,MAAOa,EAAIb,MACXC,QAASY,EAAIZ,QACbC,WAAYW,EAAIX,WAAW2G,OAAO,cAClC1G,SAAUU,EAAIV,SAAS0G,OAAO,cAC9BzG,cAAeS,EAAIT,gBAErBsC,GAAkB,GAClBN,GAAkB,MAChB,kBAAC,IAAD,CAASxG,UAAU,iBAAiBC,QAAS,WAC/CiH,GAAiB,CACfzE,KAAMwC,EAAIxC,KACV1C,GAAIkF,EAAIlF,KAEV6G,GAA0B,OAExB,uCD9QrB,IAAoBtC,EAAYC,U,iCE7BxB,SAAS2G,EAAS/K,GAY/B,OAAO,6BACL,kBAACqK,EAAA,EAAD,CAAOC,SAAO,EAACC,YAAU,EAACC,OAAK,EAAC1B,KAAK,KAAKH,QAAQ,QAAQ/I,GAAG,SAC3D,+BACE,wBAAIC,UAAU,iBACZ,4CACA,4CACA,0DAGJ,+BApBwB,SAACmL,GAE3B,IADA,IAAIC,EAAM,GACV,MAA+B7C,OAAOC,QAAQ2C,GAA9C,eAAyD,CAAC,IAAD,sBAA7CE,EAA6C,KAAtCC,EAAsC,KACvDF,EAAIG,KAAK,CAACF,EAAOC,IAKnB,OAHAF,EAAI1J,MAAK,SAASgE,EAAGC,GACjB,OAAOD,EAAE,GAAKC,EAAE,MAEbyF,EAcHI,CAAoBrL,EAAMgL,UAAUP,KAAI,SAAA3F,GAAG,OACzC,wBAAIzD,IAAKyD,EAAI,IACX,4BAAKA,EAAI,IACT,wBAAIjF,UAAU,kBAAkBiF,EAAI,IACpC,wBAAIjF,UAAU,0BACZ,oCACE,kBAACyE,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAAS,SAACiC,GAAD,OAAO/B,EAAMsL,cAAcvJ,GAAI,KAAI,kBAAC,IAAD,OAC5E,kBAACuC,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAAS,SAACiC,GAAD,OAAO/B,EAAMsL,cAAcvJ,EAAG,KAAI,kBAAC,IAAD,gB,2BC/B5E,SAASwJ,EAAevL,GAErC,IAAM+E,EAAO,CAACyG,MAASC,SAAS,EAAE,QAASD,MAAUA,MAASE,IAAI,EAAG,SAIrE,OAFAF,IAAOG,OAAO,SAEP,yBAAK/L,GAAG,oBACJmF,EAAK0F,KAAI,SAAAmB,GAAG,OACX,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAUlL,KAAX,CAAgBgI,QAASiD,EAAIE,OAAON,MAAU,OAAS,UAAY,QAASI,EAAId,OAAO,mCACtF9K,EAAMoH,YAAYpF,QAAO,SAAA+J,GACxB,IAAMC,EAAYR,IAAOO,EAAS5H,YAClC,OAAOyH,EAAIK,QAAQD,IAAcJ,EAAI5G,KAAKgH,EAAW,QAAU,IAAM,KACpEvB,KAAI,SAAAyB,GAAU,OAAI,kBAACL,EAAA,EAAUlL,KAAX,CAAgBU,IAAK6K,EAAW5J,MAAO4J,EAAW5J,c,OCAvF,SAAS6J,EAAcnM,GACrB,IAAM+C,OAA8BV,IAAnBrC,EAAM+C,UAA6C,OAAnB/C,EAAM+C,SAAoB,GAAK/C,EAAM+C,SACtF,OAAO,kBAACC,EAAA,EAAD,CAAMpD,GAAG,kBAAkBqD,SAAU,SAACC,GAAWlD,EAAMmD,eAAeD,EAAOlD,EAAMJ,MACxF,kBAACoD,EAAA,EAAKI,MAAN,CAAYC,UAAU,QACpB,kBAACL,EAAA,EAAKM,MAAN,qBACA,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAAST,KAAMT,KAAK,WAElD,kBAACmB,EAAA,EAAKS,IAAN,CAAU5D,UAAU,aAChB,kBAAC6D,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,qBAA2B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASqJ,OAAQxM,GAAG,SAASiC,KAAK,WAC9F,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,6CAA+B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASoB,WAAYvE,GAAG,aAAaiC,KAAK,WAC1G,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,2BAA4B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASsJ,iBAAkBzM,GAAG,mBAAmBiC,KAAK,YAEvH,kBAACmB,EAAA,EAAKI,MAAN,KACE,kBAACJ,EAAA,EAAKS,IAAN,CAAU5D,UAAU,aAClB,kBAAC6D,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,qBAA2B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASY,OAAQ/D,GAAG,SAASiC,KAAK,WAC9F,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,qBAA2B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASJ,MAAO/C,GAAG,QAAQiC,KAAK,WAC5F,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,iCAA6B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASa,YAAahE,GAAG,cAAciC,KAAK,YAE5G,kBAACmB,EAAA,EAAKI,MAAN,KACA,kBAACJ,EAAA,EAAKM,MAAN,qBACE,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcT,EAASX,YAAaxC,GAAG,cAAckE,GAAG,WAAWC,KAAK,QAG1F,6BACE,kBAACO,EAAA,EAAD,CAAQzE,UAAU,cAAcgC,KAAK,UAArC,gBAGC7B,EAAM0G,eAAiB,qCAAQ,kBAACpC,EAAA,EAAD,CAAQxE,QAAS,WAC/C,IAAMwM,EAAeC,SAASC,eAAe,mBAAmBxC,SAChEhK,EAAMyM,mBAAmB,CACvB,KAAQH,EAAahK,KAAK2F,MAC1B,YAAeyE,OAAOJ,EAAa1I,YAAYqE,OAC/C,MAASqE,EAAa3J,MAAMsF,MAC5B,YAAeqE,EAAalK,YAAY6F,MACxC,WAAcqE,EAAanI,WAAW8D,MACtC,OAAUqE,EAAa3I,OAAOsE,UARF,wBA2SvB0E,MA3Rf,SAAsB3M,GAAQ,IAEpBP,EAAkBH,IAAlBG,cACAuB,EAAcG,IAAM5B,WAAW2B,GAA/BF,UAHmB,EAOGS,mBAAS,IAPZ,mBAOpBmL,EAPoB,KAOXC,EAPW,OAQapL,oBAAS,GARtB,mBAQpBqL,EARoB,KAQNC,EARM,OASetL,oBAAS,GATxB,mBASpBuL,EAToB,KASLC,EATK,OAUiCxL,oBAAS,GAV1C,mBAUpB+E,EAVoB,KAUIC,EAVJ,OAWahF,oBAAS,GAXtB,mBAWpByL,EAXoB,KAWNC,EAXM,OAYO1L,oBAAS,GAZhB,mBAYpB2L,EAZoB,KAYTC,EAZS,OAaK5L,mBAAS,IAbd,mBAapBuJ,EAboB,KAaVsC,EAbU,OAce7L,mBAAS,IAdxB,mBAcpB8L,EAdoB,KAcLC,EAdK,QAeiB/L,oBAAS,GAf1B,qBAepBiF,GAfoB,MAeJC,GAfI,SAgBelF,mBAAS,IAhBxB,qBAgBpBqF,GAhBoB,MAgBLC,GAhBK,SAiBKtF,qBAjBL,qBAiBpBuF,GAjBoB,MAiBVC,GAjBU,SAkBWxF,mBAAST,GAlBpB,qBAkBpBoG,GAlBoB,MAkBPC,GAlBO,SAmBuB5F,mBAAS,MAnBhC,qBAmBpBgM,GAnBoB,MAmBDC,GAnBC,SAoBuBjM,mBAAS,MApBhC,qBAoBpBkG,GApBoB,MAoBDC,GApBC,SAqBOnG,mBAAS,MArBhB,qBAqBpB4D,GArBoB,MAqBTqC,GArBS,SAsB6BjG,mBAAS,MAtBtC,qBAsBpBkM,GAtBoB,MAsBEC,GAtBF,MAwB3B/F,qBAAU,WAAOH,GAAa,aAAa,IAE3C,IAOMmG,GAAe,SAAC9L,GACpB2L,GAAqB3L,EAAEQ,OAAOiG,YAG1BsF,GAAuB,SAACC,EAAQ/C,GACpC+C,EAAOxM,MAAK,SAACgE,EAAGC,GACd,OAAIwF,EAASzF,EAAEjD,MAAQ0I,EAASxF,EAAElD,MAAc,EAC5C0I,EAASzF,EAAEjD,MAAQ0I,EAASxF,EAAElD,OAAe,EAC1C,MAkEX,OA5BAuF,qBAAU,WACR,GAAkB,OAAdxC,GAAoB,CACtB,IAAM2I,EAAoBhN,EAAUgB,QAAO,SAAC+J,GAAD,OAAcA,EAASK,OAAOjE,SAASsF,OAChE,YAAdpI,IACFyI,GAAqBE,EAAmBhD,GACxC3D,GAAe2G,IAEf3G,GAAelC,EAAS6I,EAAmB3I,KAE7CqC,GAAa,SAEd,CAACrC,GAAWrE,EAAWyM,GAAmBzC,IAE7CnD,qBAAU,WACR,IAAM+E,EJQH,WACL,IAAMqB,EAAI,IAAIC,KACRxL,EAAOuL,EAAEE,cACTC,EAAqC,EAA7BzJ,KAAK0J,MAAMJ,EAAEK,WAAW,GAAS,EAE3CC,EAAY7L,EAAO,UAAO0L,EAAQ,GAAK,SACvCI,EAAa9L,EAAO,UAAO0L,EAAQ,GAAK,SAO5C,OANc,IAAVA,IACFG,EAAa7L,EAAO,EAAK,kBAEb,KAAV0L,IACFI,EAAc9L,EAAO,EAAK,iBAErB,CAAC6L,EATU7L,EAAO,SAAM0L,EAAQ,SASTI,GIrBZC,GAChB5B,EAAWD,GACXc,GAAqBd,EAAQ,MAC5B,IAEH/E,qBAAU,WACR,IAAMmG,EAAoBhN,EAAUgB,QAAO,SAAC+J,GAAD,OAAcA,EAASK,OAAOjE,SAASsF,OAC5EzC,EJiBH,SAA2BhK,EAAW0N,GAC3C,IAAI1D,EAAW,GAOf,OANAhK,EAAU2N,SAAQ,SAAA5C,GAChB,IAAM6C,EAAwB7C,EAAS8C,gBAAgBH,GACjDI,EAAQ1G,OAAO2G,KAAKH,GACpBI,EAAaJ,EAAsBE,EAAMvN,OAAOuN,EAAM9G,OAAS,IACrEgD,EAASe,EAASzJ,MAAQ0M,KAErBhE,EIzBYiE,CAAkBjB,EAAmBP,IACtDK,GAAqBE,EAAmBhD,GACxC3D,GAAe2G,GACfV,EAAYtC,GACZwC,EAAiBxC,KAChB,CAAChL,EAAM+H,UAAW/G,EAAWyM,KAE5BzN,EAAM+H,UACD,yBAAKlI,UAAU,WACpB,gEAEOG,EAAMyI,UACR,kBAACC,EAAA,EAAD,CAAOC,QAAQ,UAAf,0DAIC,yBAAK9I,UAAU,gBACrB,kBAAC+I,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAM+D,EAAc9D,OAAQ,kBAAM+D,GAAgB,KAC1E,kBAACnE,EAAA,EAAMK,OAAP,CAAcI,aAAW,GACzB,kBAACT,EAAA,EAAMM,MAAP,KAAcxC,GAAiB,iCAAU,6BAEzC,kBAACkC,EAAA,EAAMO,KAAP,KACE,kBAACgD,EAAD,CACEzF,eAAgBA,GAChBvD,eAAgB,SAACD,EAAOtD,GACtBsD,EAAMoG,iBACF5C,GACF1G,EAAMkP,iBAAiBhM,EAAO,MAAM,GAEpClD,EAAMkP,iBAAiBhM,EAAOtD,GAAI,GAEpCmN,GAAgB,IAElBhK,SAAU4E,GACV/H,GAAIoH,GACJyF,mBA7GiB,SAAC0C,GAC1BA,EAAYxL,OAAS,eACrBiK,GAAwBuB,GACxBpC,GAAgB,GAChBE,GAAiB,QA6Gf,kBAACrE,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAMiE,EAAehE,OAAQ,kBAAMiE,GAAiB,KAC5E,kBAACrE,EAAA,EAAMK,OAAP,CAAcI,aAAW,GACzB,kBAACT,EAAA,EAAMM,MAAP,kCAEA,kBAACN,EAAA,EAAMO,KAAP,KACE,kBAAC,EAAD,CACEhG,eAAgB,SAACD,EAAOtD,GACtBsD,EAAMoG,iBACNtJ,EAAMuJ,cAAcrG,EAAOtD,GAAI,GAC/BqN,GAAiB,IAEnBlK,SAAU4K,GACV/N,GAAIoH,OAIV,kBAAC4B,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAMvC,EAAwBwC,OAAQ,kBAAMvC,GAA0B,KAC9F,kBAACmC,EAAA,EAAMK,OAAP,CAAcI,aAAW,GACvB,kBAACT,EAAA,EAAMM,MAAP,kCAEF,kBAACN,EAAA,EAAMO,KAAP,KACE,qFAAerC,GAAcxE,KAA7B,kBAEF,kBAACsG,EAAA,EAAMQ,OAAP,KACE,kBAAC9E,EAAA,EAAD,CAAQqE,QAAQ,UAAU7I,QAAS,WACjCiH,GAAiB,IACjBN,GAA0B,KAF5B,gBAIA,kBAACnC,EAAA,EAAD,CAAQqE,QAAQ,SAAS7I,QAAS,WAChCE,EAAMoP,eAAetI,GAAclH,GAAI,aACvCmH,GAAiB,IACjBN,GAA0B,KAH5B,kBAOJ,kBAACmC,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAMmE,EAAclE,OAAQ,kBAAMmE,GAAgB,KAC1E,kBAACvE,EAAA,EAAMK,OAAP,CAAcI,aAAW,GACzB,kBAACT,EAAA,EAAMM,MAAP,kCAEA,kBAACN,EAAA,EAAMO,KAAP,KACE,kBAAC,EAAD,CAAU6B,SAAUuC,EAAejC,cA5HrB,SAACvJ,EAAGsN,GACxB,IAAMC,EAAevN,EAAEwN,cAAcC,cAAcA,cAAcC,uBAAuB,kBAAkB,GAAGC,UACvGC,EAAgBpC,EAAc+B,GAC9BM,EAAc,GAChBC,GAAmB,EAMvB,GALe,IAAXR,EACFQ,EAAmBF,IAhBD,SAAC3E,GAErB,IADA,IAAI8E,GAAO,EACX,MAAoB1H,OAAO2G,KAAK/D,GAAhC,eAA2C,CAAtC,IAAME,EAAK,KACVF,EAASE,GAAS4E,IACpBA,EAAM9E,EAASE,IAGnB,OAAO4E,EASgCC,CAAcxC,IAC9B,IAAZ8B,IACTQ,EAAqC,IAAlBF,GAEjBE,EAAkB,CACpB,cAA+BzH,OAAOC,QAAQkF,GAA9C,eAA8D,CAAC,IAAD,sBAAlDrC,EAAkD,KAA3CC,EAA2C,KAE1DyE,EAAY1E,GADVA,IAAUoE,EACSK,EAAgBN,EAC5BlE,IAAYwE,EAAgBN,EAChBM,EAEAxE,EAGzBqC,EAAiBoC,QA0Gf,kBAAChH,EAAA,EAAMQ,OAAP,KACE,kBAAC9E,EAAA,EAAD,CAAQqE,QAAQ,UAAU7I,QAAS,WACjC,IAAMkQ,EAAa,GACbJ,EAAc,GACdK,EAAazE,MAASV,OAAO,cACnC1D,GAAYuH,SAAQ,SAAA7J,GAClBkL,EAAW5E,KAAKtG,EAAIlF,IACpB,IAAMsQ,EAAa9H,OAAO+H,OAAO,GAAIrL,EAAI+J,iBACzCqB,EAAWzC,IAAmBwC,GAAc1C,EAAczI,EAAIxC,MAC9DsN,EAAY9K,EAAIlF,IAAMsQ,KAExBlQ,EAAMoQ,wBAAwBJ,EAAYJ,EAAanC,IACvDN,GAAgB,KAXlB,kBAeJ,kBAACvE,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAMqE,EAAWpE,OAAQ,kBAAMqE,GAAa,KACpE,kBAACzE,EAAA,EAAMK,OAAP,CAAcI,aAAW,GACzB,kBAACT,EAAA,EAAMM,MAAP,kCAEA,kBAACN,EAAA,EAAMO,KAAP,KACE,kBAAC,EAAD,CAAgB/B,YAAaA,OAGjC,yBAAKvH,UAAU,gBACb,6BACG+M,EAAQnC,KAAI,SAAA2B,GAAM,OAAI,kBAAC9H,EAAA,EAAD,CAAQjD,IAAK+K,EAAQvM,UAAU,cAAcC,QAAS+N,IAC1EzB,OAGL,6BACG3M,EAAgB,kBAAC6E,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAAS,WACxD6G,IAAkB,GAClBiB,GAAqB,MACrBX,GAAY,MACZ8F,GAAgB,KAJD,4BAKE,qCAClBtN,EAAgB,kBAAC6E,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAAS,kBAAMqN,GAAgB,KAA/D,gBAAoF,qCACrG,kBAAC7I,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAAS,kBAAMuN,GAAa,KAA5D,4BACA,kBAAC/I,EAAA,EAAD,CAAQzE,UAAU,cAAcC,QAASE,EAAMoK,SAA/C,kBAGJ,6BACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,YAAU,EAACC,OAAK,EAAC1B,KAAK,KAAKH,QAAQ,QAAQ/I,GAAG,SAC3D,+BACE,wBAAIC,UAAU,iBA7NH,CAAC,eAAM,eAAM,eAAM,eAAM,uCAAU,qBAAO,2BAAQ,eAAM,IA8NnD4K,KAAI,SAAAnJ,GAChB,MAAe,uBAAXA,GAA+B,iBAAXA,GAA8B,yCAAXA,EAClC,kBAACF,EAAD,CAAYC,IAAKC,EAAQA,OAAQA,EAAQC,KAAM,kBAAMmG,GAAazC,EAAU3D,OAE5E,wBAAID,IAAKC,GAAUA,QAKlC,+BAEI8F,GAAYqD,KAAI,SAAA3F,GAAG,OACjB,wBAAIzD,IAAKyD,EAAIxC,MACX,4BAAK0I,EAASlG,EAAIxC,OAClB,wBAAIzC,UAAU,cAAciF,EAAIxC,MAChC,4BAAKwC,EAAInC,OACT,4BAAKmC,EAAIsH,QACT,4BAAKtH,EAAIX,YACT,4BAAKW,EAAIuH,kBACT,4BAAK9H,EAAeO,EAAIlB,YAAa,IACrC,4BAAKkB,EAAInB,QACT,gCAAMlE,EACJ,oCACE,kBAAC,IAAD,CAAWI,UAAU,YAAYC,QAAS,WACxCmH,GAAYnC,EAAIlF,IAChBgI,GAAqB,CACnBtF,KAAMwC,EAAIxC,KACVsB,YAAakB,EAAIlB,YACjBjB,MAAOmC,EAAInC,MACXP,YAAa0C,EAAI1C,YACjB+B,WAAYW,EAAIX,WAChBkI,iBAAkBvH,EAAIuH,iBACtBD,OAAQtH,EAAIsH,OACZzI,OAAQmB,EAAInB,SAEdgD,IAAkB,GAClBoG,GAAgB,MACd,kBAAC,IAAD,CAASlN,UAAU,iBAAiBC,QAAS,WAC/CiH,GAAiB,CACfzE,KAAMwC,EAAIxC,KACV1C,GAAIkF,EAAIlF,KAEV6G,GAA0B,OAExB,+C,SC/TpB4J,G,OAA2BhR,wBAAc,OAE/C,SAASiR,IACP,OAAO/Q,qBAAW8Q,GAGpB,SAASE,EAAMvQ,GAAQ,IACbP,EAAkBH,IAAlBG,cADY,EAEsF6Q,IAAlGE,EAFY,EAEZA,eAAgBC,EAFJ,EAEIA,kBAAmBC,EAFvB,EAEuBA,cAAeC,EAFtC,EAEsCA,iBAAkBlK,EAFxD,EAEwDA,0BAC5E,OAAO,oCACL,yBAAK5G,UAAU,iBAAiBG,EAAM4Q,MAAMC,SAC5C,yBAAKhR,UAAU,qBAAqBG,EAAM4Q,MAAME,aAChD,8BACG9Q,EAAM4Q,MAAMG,OAAS,SAAM/Q,EAAM4Q,MAAMI,QAAU,SACjDvR,EAAgB,kBAAC,IAAD,CAAWI,UAAU,iBACpCC,QAAS,WACP4Q,GAAc,GACdF,EAAexQ,EAAM4Q,OACrBH,GAAkB,MACb,qCACRhR,EAAgB,kBAAC,IAAD,CAASI,UAAU,iBAClCC,QAAS,WACP6Q,EAAiB3Q,EAAM4Q,MAAMhR,IAC7B6G,GAA0B,MACrB,uCAKf,SAASwK,EAAQjR,GAAQ,IACfP,EAAkBH,IAAlBG,cADc,EAEiC6Q,IAA/CI,EAFc,EAEdA,cAAeF,EAFD,EAECA,eAAgBU,EAFjB,EAEiBA,YACvC,OAAO,yBAAKrR,UAAU,WACpB,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,SAAS2L,IAAOxL,EAAMoO,OAAOtD,OAAO,OACnD,yBAAKjL,UAAU,QAAQ2L,IAAOxL,EAAMoO,OAAOtD,OAAO,SAClD,yBAAKjL,UAAU,OAAf,WAEF,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,sBAAsB,iCAAUG,EAAMmR,QAAQC,aAC7D,yBAAKvR,UAAU,sBAAsB,2BAASG,EAAMmR,QAAQE,gBAC5D,yBAAKxR,UAAU,sBAAsB,2BAAS2E,EAAWxE,EAAMmR,QAAQG,aACvE,yBAAKzR,UAAU,sBAAsB,iCAAU2E,EAAWxE,EAAMmR,QAAQG,WAAa9F,IAAOxL,EAAMoO,OAAOmD,kBAG7G,yBAAK1R,UAAU,kBAEqB,IAAhCG,EAAMmR,QAAQK,OAAOxJ,OACrB,oCACGhI,EAAMmR,QAAQK,OAAO/G,KAAI,SAACmG,GAAD,OAAW,kBAACL,EAAD,CAAOK,MAAOA,EAAOD,iBAAkB3Q,EAAM2Q,sBACjFlR,EAAgB,kBAAC,IAAD,CACfI,UAAU,kCACVC,QAAS,WACPoR,EAAYlR,EAAMoO,OAClBsC,GAAc,GACdF,EAAe,OAEd,sCAEN/Q,EAAgB,kBAAC6E,EAAA,EAAD,CACfzE,UAAU,+BACVC,QAAS,WACPoR,EAAYlR,EAAMoO,OAClBoC,EAAe,MAJF,4BAQL,yBAAK3Q,UAAU,oBAAf,8BAIlB,yBAAKA,UAAU,iBACZG,EAAMmR,QAAQM,SAAShH,KAAI,SAACiH,GAAD,OAC1B,yBAAK7R,UAAU,gBAAgB,UAAO6R,QA2F/BC,MAtFf,SAAwB3R,GAAQ,IACtBiB,EAAqB1B,qBAAW2B,GAAhCD,iBADqB,EAGOQ,oBAAS,GAHhB,mBAGtBmQ,EAHsB,KAGVlB,EAHU,OAIejP,oBAAS,GAJxB,mBAItBoQ,EAJsB,KAINpB,EAJM,OAK+BhP,oBAAS,GALxC,mBAKtB+E,EALsB,KAKEC,EALF,OAMahF,qBANb,mBAMtBqQ,EANsB,KAMPnB,EANO,OAOSlP,mBAAS,IAPlB,mBAOtBsQ,EAPsB,KAOTvB,EAPS,OAQS/O,mBAAS,IARlB,mBAQtBuQ,EARsB,KAQTC,EARS,KAUvBf,EAAc,SAAC9C,GACnBqC,GAAkB,GAClBwB,EAAe7D,IAYjB,OAAO,yBAAKvO,UAAU,mBAClB,kBAAC+I,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAM8I,EAAgB7I,OAAQ,kBAAMyH,GAAkB,KAC9E,kBAAC7H,EAAA,EAAMK,OAAP,CAAcI,aAAW,GACzB,kBAACT,EAAA,EAAMM,MAAP,KAAc0I,EAAa,iCAAU,6BAErC,kBAAChJ,EAAA,EAAMO,KAAP,KACA,kBAACnG,EAAA,EAAD,CAAMC,SAAU,SAACC,GACT0O,GACF1O,EAAMoG,iBACNtJ,EAAMkS,cAAchP,EAAO8O,EAAaD,EAAYnS,IAAI,KAExDsD,EAAMoG,iBACNtJ,EAAMkS,cAAchP,EAAO6O,EAAY3D,MAAO2D,EAAYnS,IAAI,IAEhE6Q,GAAkB,KAEpB,kBAACzN,EAAA,EAAKI,MAAN,CAAYC,UAAU,WACpB,kBAACL,EAAA,EAAKM,MAAN,iCACA,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcuO,EAAYlB,QAAShP,KAAK,QAAQiC,GAAG,WAAWC,KAAK,OAEnF,kBAACf,EAAA,EAAKI,MAAN,CAAYC,UAAU,eACpB,kBAACL,EAAA,EAAKM,MAAN,iCACA,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcuO,EAAYjB,YAAajP,KAAK,QAAQiC,GAAG,WAAWC,KAAK,OAEvF,kBAACf,EAAA,EAAKS,IAAN,CAAU5D,UAAU,aAClB,kBAAC6D,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,qBAA2B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcuO,EAAYhB,OAAQnR,GAAG,SAASiC,KAAK,WACjG,kBAAC6B,EAAA,EAAD,KAAK,kBAACV,EAAA,EAAKM,MAAN,qBAA2B,kBAACN,EAAA,EAAKO,QAAN,CAAcC,aAAcuO,EAAYf,QAASpR,GAAG,UAAUiC,KAAK,YAErG,kBAACyC,EAAA,EAAD,CAAQzE,UAAU,cAAcgC,KAAK,UAArC,mBAMJ,kBAAC+G,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,KAAKC,KAAMvC,EAAwBwC,OAAQ,kBAAMvC,GAA0B,KAC9F,kBAACmC,EAAA,EAAMK,OAAP,CAAcI,aAAW,GACvB,kBAACT,EAAA,EAAMM,MAAP,kCAEF,kBAACN,EAAA,EAAMO,KAAP,KACE,sFAEF,kBAACP,EAAA,EAAMQ,OAAP,KACE,kBAAC9E,EAAA,EAAD,CAAQqE,QAAQ,UAAU7I,QAAS,WACjC6Q,EAAiB,MACjBlK,GAA0B,KAF5B,gBAIA,kBAACnC,EAAA,EAAD,CAAQqE,QAAQ,SAAS7I,QAAS,WAChCE,EAAMmS,YAAYL,GAClBnB,EAAiB,MACjBlK,GAA0B,KAH5B,kBAvDqB,SAACxF,GAE5B,IADA,IAAMgK,EAAM,GACZ,MAA+B7C,OAAOC,QAAQpH,GAA9C,eAAiE,CAAC,IAAD,sBAArDmN,EAAqD,KAA9C+C,EAA8C,KAC/DlG,EAAIG,KAAK,CAACgD,EAAO+C,IAGnB,OADAlG,EAAI1J,MAAK,SAACgE,EAAGC,GAAJ,OAAsC,EAA5BD,EAAE,GAAG6M,cAAc5M,EAAE,OACjCyF,EAyDLoH,CAAqBpR,GAAkBwJ,KAAI,SAAC6H,GAAD,OAC3C,kBAACjC,EAAyBkC,SAA1B,CAAmCtK,MAAO,CAAEyI,gBAAeD,oBAAmBS,cAAaV,iBAAgBG,mBAAkBlK,8BAC3H,kBAACwK,EAAD,CAAS7C,MAAOkE,EAAM,GAAInB,QAASmB,EAAM,W,OCvKlC,SAASE,KAAS,IAAD,EAC2DlT,IAAjFmT,EADsB,EACtBA,SAAUC,EADY,EACZA,SAAUhT,EADE,EACFA,kBAAmBiT,EADjB,EACiBA,YAAaC,EAD9B,EAC8BA,YAAaC,EAD3C,EAC2CA,YAMzE,OACE,yBAAKhT,UAAU,SACb,kBAACmD,EAAA,EAAD,CAAMC,SAAU4P,GACd,kBAAC7P,EAAA,EAAKI,MAAN,CAAY0F,KAAK,KAAKzF,UAAU,YAC9B,kBAACL,EAAA,EAAKM,MAAN,2BACA,kBAACN,EAAA,EAAKO,QAAN,CACEuP,WAAS,EACTjR,KAAK,WACLoG,MAAOwK,EACPM,SAAU,SAAChR,GAAD,OAAO4Q,EAAY5Q,EAAEQ,OAAO0F,WAG1C,kBAACjF,EAAA,EAAKI,MAAN,CAAY0F,KAAK,KAAKzF,UAAU,YAC9B,kBAACL,EAAA,EAAKM,MAAN,qBACA,kBAACN,EAAA,EAAKO,QAAN,CACE1B,KAAK,WACLoG,MAAOyK,EACPK,SAAU,SAAChR,GAAD,OAAO6Q,EAAY7Q,EAAEQ,OAAO0F,WAG1C,yBAAKpI,UAAU,gBACb,kBAACyE,EAAA,EAAD,CAAQzE,UAAU,cAAciJ,KAAK,KAAKjH,KAAK,SAASmR,WAxBvDP,EAASzK,OAAS,GAAK0K,EAAS1K,OAAS,IAwB1C,gBAGA,kBAAC1D,EAAA,EAAD,CAAQzE,UAAU,cAAciJ,KAAK,KAAKjH,KAAK,SAAS/B,QAAS,kBAAMJ,GAAkB,KAAzF,mB,+BCvBVuT,KAAMC,WAAWC,iBAAoBA,kBACrCF,KAAMG,UAAYD,aA6aHE,OA3af,WAAe,MAE6B5R,oBAAS,GAFtC,mBAENhC,EAFM,KAES6T,EAFT,OAG+B7R,oBAAS,GAHxC,mBAGN8R,EAHM,KAGU7T,EAHV,OAImB+B,mBAAS,IAJ5B,mBAINgR,EAJM,KAIIE,EAJJ,OAKmBlR,mBAAS,IAL5B,mBAKNiR,EALM,KAKIE,EALJ,OAMWnR,mBPvBH,WACrB,IAAM+R,EAAUC,eAAeC,QAAQ,QACvC,OAAIF,EAAgBG,KAAKC,MAAMJ,GACnB,KOoBqBK,IANpB,mBAMNC,EANM,KAMAC,EANA,OAOatS,mBPhBnBgS,eAAeC,QAAQ,UAAY,MOS7B,mBAONM,EAPM,KAOCC,EAPD,OASqBxS,oBAAS,GAT9B,mBASNsG,EATM,KASKmM,EATL,OAUqBzS,oBAAS,GAV9B,mBAUNgH,EAVM,KAUK0L,EAVL,OAWuB1S,mBAAS,aAXhC,mBAWN2S,EAXM,KAWMC,EAXN,OAciB5S,mBAAS,IAd1B,mBAcNV,EAdM,KAcGuT,EAdH,OAeqB7S,mBAAS,IAf9B,oBAeNT,GAfM,MAeKuT,GAfL,SAgBqB9S,mBAAS,IAhB9B,qBAgBN+S,GAhBM,MAgBKC,GAhBL,SAiBehT,mBAAS,IAjBxB,qBAiBN+P,GAjBM,MAiBEkD,GAjBF,MAmBPC,GAAY,uCAAG,8BAAApP,EAAA,sDACnB2O,GAAa,GACPU,EAAa3B,KAAM7K,OAAOyM,OAAO,YACjCC,EAAQ,IAAI7B,KAAM8B,MAAMH,IACxBI,MAAM,KACZF,EAAMG,OAAOC,MAAK,SAACC,GAEjB,GADAtL,QAAQuL,IAAI,8BACY,qBAAb7I,SAAyB,CAClC,IAAMxL,EAAUoU,EAAQ1K,KAAI,SAAC4K,GAC3B,MAAO,CACLzV,GAAIyV,EAAOzV,GACX0C,KAAM+S,EAAOC,IAAI,QACjB5S,KAAM2S,EAAOC,IAAI,QACjB7S,OAAQ4S,EAAOC,IAAI,UACnB1R,YAAayR,EAAOC,IAAI,eACxBzR,OAAQwR,EAAOC,IAAI,UACnBzS,eAAgBwS,EAAOC,IAAI,kBAC3B3R,OAAQ0R,EAAOC,IAAI,UACnB3S,MAAO0S,EAAOC,IAAI,SAClBlT,YAAaiT,EAAOC,IAAI,eACxBtR,MAAOqR,EAAOC,IAAI,SAClBpL,aAAcmL,EAAOC,IAAI,gBACzBrR,MAAOoR,EAAOC,IAAI,SAClBpR,QAASmR,EAAOC,IAAI,WACpBxN,OAAQ4E,QAAQ2I,EAAOC,IAAI,SAAWD,EAAOC,IAAI,gBAAkBD,EAAOC,IAAI,SAAWD,EAAOC,IAAI,YAAYC,QAAQ,IACxHpR,WAAYqH,IAAO6J,EAAOC,IAAI,cAAe,cAC7ClR,SAAUoH,IAAO6J,EAAOC,IAAI,YAAa,cACzCjR,cAAegR,EAAOC,IAAI,qBAG9BhB,EAAWnP,EAASpE,EAAS,eAC7BmT,GAAa,OAEd,SAACtK,GACFsK,GAAa,GACbC,GAAa,GACbtK,QAAQD,MAAM,+BAAgCA,MApC7B,2CAAH,qDAwCZ4L,GAAW,uCAAG,8BAAAjQ,EAAA,sDACZkQ,EAAYxC,KAAM7K,OAAOyM,OAAO,WAChCC,EAAQ,IAAI7B,KAAM8B,MAAMU,IACxBT,MAAM,KACZF,EAAMG,OAAOC,MAAK,SAACC,GAEjB,GADAtL,QAAQuL,IAAI,6BACY,qBAAb7I,SAAyB,CAClC,IAAMiF,EAAS2D,EAAQ1K,KAAI,SAAC4K,GAC1B,MAAO,CACLzV,GAAIyV,EAAOzV,GACXwO,MAAOiH,EAAOC,IAAI,SAClBzE,QAASwE,EAAOC,IAAI,WACpBxE,YAAauE,EAAOC,IAAI,eACxBvE,OAAQsE,EAAOC,IAAI,UACnBtE,QAASqE,EAAOC,IAAI,eAGxBZ,GAAUlD,OAEX,SAAC5H,GACFuK,GAAa,GACbtK,QAAQD,MAAM,8BAA+BA,MArB7B,2CAAH,qDAyBX8L,GAAc,uCAAG,8BAAAnQ,EAAA,sDACrB2O,GAAa,GACPuB,EAAYxC,KAAM7K,OAAOyM,OAAO,cAChCC,EAAQ,IAAI7B,KAAM8B,MAAMU,IACxBT,MAAM,KACZF,EAAMG,OAAOC,MAAK,SAACC,GAEjB,GADAtL,QAAQuL,IAAI,iCACY,qBAAb7I,SAAyB,CAClC,IAAMvL,EAAYmU,EAAQ1K,KAAI,SAAC4K,GAC7B,MAAO,CACLzV,GAAIyV,EAAOzV,GACX0C,KAAM+S,EAAOC,IAAI,QACjB3S,MAAO0S,EAAOC,IAAI,SAClBzG,gBAAiBwG,EAAOC,IAAI,mBAC5BnR,WAAYkR,EAAOC,IAAI,cACvBjJ,iBAAkBgJ,EAAOC,IAAI,oBAC7B1R,YAAayR,EAAOC,IAAI,eACxBlT,YAAaiT,EAAOC,IAAI,eACxBlJ,OAAQiJ,EAAOC,IAAI,UACnB3R,OAAQ0R,EAAOC,IAAI,cAGvBf,GAAavT,GACbkT,GAAa,OAEd,SAACtK,GACFsK,GAAa,GACbC,GAAa,GACbtK,QAAQD,MAAM,kCAAmCA,MA5B9B,2CAAH,qDAgCd+L,GAAc,uCAAG,WAAOC,EAAUC,GAAjB,6BAAAtQ,EAAA,6DACfuQ,EAAa7C,KAAM7K,OAAOyM,OAAOgB,IACjCf,EAAQ,IAAI7B,KAAM8B,MAAMe,IACxBC,QAAQ,OAAQH,EAAStT,MAHV,SAICwS,EAAMG,OAJP,OAKrB,GALqB,OAKTjN,OAAS,EACnBgO,MAAM,qBAAQJ,EAAStT,KAAO,4FACzB,CAEL,IADM2T,EAAS,IAAIH,EACnB,MAA2B1N,OAAOC,QAAQuN,GAA1C,eAAsD,EAAD,oBAAzCvU,EAAyC,KAApC4G,EAAoC,KACnDgO,EAAOC,IAAI7U,EAAK4G,GAElBgO,EAAOE,OAAOjB,MACZ,SAACG,GACCW,MAAM,oDACe,YAAjBH,EACFlB,KAC0B,cAAjBkB,GACTH,QAGJ,SAAC9L,GACCoM,MAAM,yEAtBS,2CAAH,wDA4BdI,GAAc,uCAAG,WAAOC,GAAP,2BAAA9Q,EAAA,sDAGrB,IAFM+Q,EAAYrD,KAAM7K,OAAOyM,OAAO,UAChC0B,EAAe,IAAID,EACzB,MAA2BlO,OAAOC,QAAQgO,GAA1C,eAAsD,EAAD,oBAAzChV,EAAyC,KAApC4G,EAAoC,KACnDsO,EAAaL,IAAI7U,EAAK4G,GAExBsO,EAAaJ,OAAOjB,MAClB,SAACG,GACCW,MAAM,wCACNR,QAEF,SAAC5L,GACCoM,MAAM,yEAZW,2CAAH,sDAiBdQ,GAAW,uCAAG,WAAO5W,EAAIgW,EAAUC,GAArB,eAAAtQ,EAAA,sDACZkR,EAAMxD,KAAM7K,OAAOyM,OAAOgB,GAClB,IAAI5C,KAAM8B,MAAM0B,GACxBnB,IAAI1V,GAAIsV,MAAK,SAACwB,GAClB,cAA2BtO,OAAOC,QAAQuN,GAA1C,eAAqD,CAAC,IAAD,sBAAzCvU,EAAyC,KAApC4G,EAAoC,KACnDyO,EAAOR,IAAI7U,EAAK4G,GAElByO,EAAOP,OAAOjB,MAAK,SAACyB,GAClBX,MAAM,oDACe,YAAjBH,EACFlB,KAC0B,cAAjBkB,GACTH,QAED,SAAC9L,GACFoM,MAAM,4EAfQ,2CAAH,0DAoBXY,GAAW,uCAAG,WAAOhX,EAAIyW,GAAX,eAAA9Q,EAAA,sDACZ+Q,EAAYrD,KAAM7K,OAAOyM,OAAO,UACxB,IAAI5B,KAAM8B,MAAMuB,GACxBhB,IAAI1V,GAAIsV,MAAK,SAACwB,GAClB,cAA2BtO,OAAOC,QAAQgO,GAA1C,eAAqD,CAAC,IAAD,sBAAzChV,EAAyC,KAApC4G,EAAoC,KACnDyO,EAAOR,IAAI7U,EAAK4G,GAElByO,EAAOP,OAAOjB,MAAK,SAACyB,GAClBX,MAAM,wCACNR,QACC,SAAC5L,GACFoM,MAAM,4EAXQ,2CAAH,wDAiBX5F,GAAuB,uCAAG,WAAOyG,EAAKjH,EAAaxD,GAAzB,iBAAA7G,EAAA,sDACxBkR,EAAMxD,KAAM7K,OAAOyM,OAAO,cAC1BC,EAAQ,IAAI7B,KAAM8B,MAAM0B,IACxBK,YAAY,WAAYD,GAC9B/B,EAAMG,OAAOC,MAAK,SAACC,GACjBA,EAAQxG,SAAQ,SAAC0G,GACfA,EAAOa,IAAI,kBAAmBtG,EAAYyF,EAAOzV,QAEnDqT,KAAM7K,OAAO2O,QAAQ5B,GAASD,MAAK,SAACyB,GAClCX,MAAM,wCACNN,QACC,SAACsB,GACFhB,MAAM,oDAEP,SAACpM,GACFoM,MAAM,iDAfsB,2CAAH,0DAmBvBiB,GAAW,uCAAG,WAAOrX,EAAIiW,GAAX,eAAAtQ,EAAA,sDACZkR,EAAMxD,KAAM7K,OAAOyM,OAAOgB,GAClB,IAAI5C,KAAM8B,MAAM0B,GACxBnB,IAAI1V,GAAIsV,MAAK,SAACwB,GAClBA,EAAOQ,UAAUhC,MAAK,SAACyB,GACrBX,MAAM,wCACe,YAAjBH,EACFlB,KAC0B,cAAjBkB,GACTH,QAED,SAAC9L,GACFoM,MAAM,4EAZQ,2CAAH,wDAiBX7D,GAAW,uCAAG,WAAOvS,GAAP,eAAA2F,EAAA,sDACZkQ,EAAYxC,KAAM7K,OAAOyM,OAAO,UACxB,IAAI5B,KAAM8B,MAAMU,GACxBH,IAAI1V,GAAIsV,MAAK,SAACwB,GAClBA,EAAOQ,UAAUhC,MAAK,SAACyB,GACrBX,MAAM,wCACNR,QACC,SAAC5L,GACFoM,MAAM,4EARQ,2CAAH,sDAajBnO,qBAAU,WACR8M,KACAe,KACAF,OACC,IAEH3N,qBAAU,WACR,IAAMsP,EAAgB,GACtBpW,EAAQiB,QAAO,SAAC8F,GAAD,MAA8B,iBAAlBA,EAAOnE,UAAiBgL,SAAQ,SAACqC,GAC1D,IAAIoG,EAAW5L,IAAOwF,EAAQ5M,UAAU0G,OAAO,WACzCsM,KAAYD,IAChBA,EAAcC,GAAY,CACxBhG,YAAa,EACbC,eAAgB,EAChBgG,UAAW,EACX/F,WAAY,EACZgG,WAAY,EACZ7F,SAAU,GACVD,OAAQ,KAGZ2F,EAAcC,GAAUhG,aAAe,EACvC+F,EAAcC,GAAU3F,SAASrG,KAAK4F,EAAQ1O,MAC9C6U,EAAcC,GAAU/F,gBAAkBL,EAAQpN,YAClDuT,EAAcC,GAAUC,WAAarG,EAAQnN,OAC7CsT,EAAcC,GAAU9F,YAAcN,EAAQpN,YAAcoN,EAAQnO,eAAkC,GAAjBmO,EAAQnN,UAE/F2N,GAAO7C,SAAQ,SAACiC,GACd,IAAIxC,EAAQ5C,IAAOoF,EAAMxC,OAAOtD,OAAO,WACnCsD,KAAS+I,GACXA,EAAc/I,GAAOoD,OAAOpG,KAAKwF,MAGrC6D,GAAa0C,KACZ,CAACpW,EAASyQ,KAEb3J,qBAAU,WACI,MAARiM,GAAyB,MAATE,GAClBV,GAAiB,KAElB,CAACQ,EAAME,IAEV,IAAMuD,GAAoB,SAACrU,EAAOtD,EAAI4X,GACpCtU,EAAMoG,iBACN,IAAMgD,EAAepJ,EAAMX,OAAOyH,SAC5ByN,EAAY,CAChB,KAAQnL,EAAahK,KAAK2F,MAC1B,KAAQqE,EAAa5J,KAAKuF,MAC1B,OAAUyE,OAAOJ,EAAa7J,OAAOwF,OACrC,YAAeyE,OAAOJ,EAAa1I,YAAYqE,OAC/C,OAAUyE,OAAOJ,EAAazI,OAAOoE,OACrC,eAAkByE,OAAOJ,EAAazJ,eAAeoF,OACrD,OAAUqE,EAAa3I,OAAOsE,MAC9B,MAASqE,EAAa3J,MAAMsF,MAC5B,YAAeqE,EAAalK,YAAY6F,MACxC,MAASyE,OAAOJ,EAAatI,MAAMiE,OACnC,aAAgByE,OAAOJ,EAAapC,aAAajC,OACjD,MAASyE,OAAOJ,EAAarI,MAAMgE,OACnC,QAAWyE,OAAOJ,EAAapI,QAAQ+D,OACvC,WAAcqE,EAAanI,WAAW8D,MACtC,SAAYqE,EAAalI,SAAS6D,MAClC,cAAiByE,OAAOJ,EAAajI,cAAc4D,QAEjDuP,EACF7B,GAAe8B,EAAW,WAE1BjB,GAAY5W,EAAI6X,EAAW,YAIzBC,GAAuB,SAACxU,EAAOtD,EAAI4X,GACvCtU,EAAMoG,iBACN,IAAMgD,EAAepJ,EAAMX,OAAOyH,SAC5B+B,EAAW,CACf,KAAQO,EAAahK,KAAK2F,MAC1B,YAAeyE,OAAOJ,EAAa1I,YAAYqE,OAC/C,MAASqE,EAAa3J,MAAMsF,MAC5B,YAAeqE,EAAalK,YAAY6F,MACxC,WAAcqE,EAAanI,WAAW8D,MACtC,iBAAoBqE,EAAaD,iBAAiBpE,MAClD,OAAUqE,EAAaF,OAAOnE,MAC9B,OAAUqE,EAAa3I,OAAOsE,OAE5BuP,EACF7B,GAAe5J,EAAU,aAEzByK,GAAY5W,EAAImM,EAAU,cAIxB4L,GAAoB,SAACzU,EAAOkL,EAAOxO,EAAI4X,GAC3CtU,EAAMoG,iBACN,IAAMgD,EAAepJ,EAAMX,OAAOyH,SAC5BqM,EAAW,CACf,MAASjI,EACT,QAAW9B,EAAauE,QAAQ5I,MAChC,YAAeqE,EAAawE,YAAY7I,MACxC,OAAUqE,EAAayE,OAAO9I,MAC9B,QAAWqE,EAAa0E,QAAQ/I,OAE9BuP,EACFpB,GAAeC,GAEfO,GAAYhX,EAAIyW,IA6DpB,OACE,6BACE,yBAAKxW,UAAU,OACb,kBAACT,EAAsBmT,SAAvB,CAAgCtK,MAAO,CAAEwK,WAAUC,WAAUjT,gBAAeC,oBAAmBmT,YA5DjF,SAAC3P,GACnBA,EAAMoG,iBAEN2J,KAAM2E,KAAKC,MAAMpF,EAAUC,GAAUwC,MAAK,SAACpB,IPpWjB,SAACA,EAAME,GACnCP,eAAeqE,QAAQ,QAAS9D,GAChCP,eAAeqE,QAAQ,OAAQnE,KAAKoE,UAAUjE,IOmWxCkE,CAAelE,EAAMA,EAAKmE,mBAC1BjC,MAAM,qBAAQlC,EAAKoE,eACnBxY,GAAkB,GAClB4T,GAAiB,MAClB6E,OAAM,SAASvO,GACdoM,MAAMpM,EAAMwO,aAmDgGzY,cA/C5F,WACpBoU,EAAQ,MACRE,EAAS,MPrXXR,eAAe4E,WAAW,SAC1B5E,eAAe4E,WAAW,QOsXxB/E,GAAiB,IA2C8GX,cAAaC,gBACtI,kBAAC,EAAD,CAAY/R,WAAYwT,IACvBd,EAAiB,kBAAC,GAAD,MAChB,kBAAC,EAAiBhB,SAAlB,CAA2BtK,MAAO,CAAElH,QAASA,EAASE,iBAAkBuT,GAAWxT,UAAWA,KA3CpF,SAACoT,GACnB,OAAQA,GACN,IAAK,YACH,OAAO,kBAAC,EAAD,CACLrM,UAAWA,EACXU,UAAWA,EACX2B,QAASuK,GACTpL,cAAegO,GACfpN,YAAa8M,KAEjB,IAAK,eACH,OAAO,kBAAC,EAAD,CACLlP,UAAWA,EACXU,UAAWA,EACX2B,QAASsL,GACTnM,cAAegO,GACfrI,iBAAkBwI,GAClBlB,YAAaA,GACbpH,eAAgB6H,GAChB7G,wBAAyBA,KAE7B,IAAK,iBACH,OAAO,kBAAC,EAAD,CACL8B,cAAeyF,GACfxF,YAAaA,KAEjB,QACE,OAAO,kBAAC,EAAD,CACLpK,UAAWA,EACXU,UAAWA,EACX2B,QAASuK,GACTpL,cAAegO,GACfpN,YAAa8M,MAYRqB,CAAYlE,QCxaPmE,QACW,cAA7B/X,OAAOC,SAAS+X,UAEe,UAA7BhY,OAAOC,SAAS+X,UAEhBhY,OAAOC,SAAS+X,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFrM,SAASC,eAAe,SDyHpB,kBAAmBqM,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdd,OAAM,SAAAvO,GACLC,QAAQD,MAAMA,EAAMwO,c","file":"static/js/main.cdd69dc5.chunk.js","sourcesContent":["module.exports = {\n    APPLICATION_ID: '54T0X4tWovUBdnRd6EKdW3BrN4WJrpGBEJdwDk9J',\n    JAVASCRIPT_KEY: 'WREbi60D2GfVknGhH9Je1GJ931oIhIVkHUXD9u5R',\n    SERVER_URL: 'https://parseapi.back4app.com/'\n}","import { useContext, createContext } from \"react\";\n\nexport const AuthenticationContext = createContext(null);\n\nexport function useAuthenticationContext() {\n  return useContext(AuthenticationContext);\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport './Navigation.css';\nimport '../App.css';\n\nfunction UserManagement() {\n  const { authenticated, setAuthenticating, handleSignOut } = useAuthenticationContext();\n  if (authenticated) {\n    return <div id=\"user-management\">\n        <div className=\"text-button clickable\" onClick={handleSignOut}>注销</div>\n      </div>\n  } else {\n    return <div className=\"text-button clickable\" onClick={() => setAuthenticating(true)}>登陆</div>\n  }\n}\n\nfunction Navigation(props) {\n  return (\n    <Navbar sticky=\"top\" expand=\"lg\" id=\"navbar\">\n      <Navbar.Brand href=\"/\">追番补番</Navbar.Brand>\n      <Nav className=\"mr-auto\" activeKey={window.location.pathname}>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"AnimeList\")}>补番列表</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"NewAnimeList\")}>追番列表</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"MonthlySummary\")}>每月总结</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"SeasonalSummary\")}>季度总结</Nav.Link></Nav.Item>\n      </Nav>\n      <UserManagement />\n    </Navbar>\n  );\n}\n\nexport default Navigation;\n","import React from 'react';\n\nconst animeData = {\n  ratings: [],\n  newAnimes: [],\n  monthlySummaries: {}\n}\n\nconst AnimeDataContext = React.createContext(animeData);\n\nexport default AnimeDataContext;","import React from 'react';\nimport { BiSort } from \"react-icons/bi\";\nimport '../App.css';\n\nexport default function SortHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <BiSort className='icon clickable' onClick={props.sort}/>\n      </div>\n    </th>\n  );\n}","import React, { useState } from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './FilterBox.css';\nimport '../App.css';\n\nexport default function FilterBox(props) {\n  const [displayBox, setDisplayBox] = useState(false);\n  return (displayBox ? \n    <div className=\"filter-box\">\n      <input className=\"filter-input-box\" placeholder=\"输入......\" type=\"text\" onKeyPress={(e) => {\n        if (e.key === \"Enter\") props.filter(e);\n      }}/>\n      <div className=\"close-button clickable\" onClick={() => {\n        props.clearFilter();\n        setDisplayBox(!displayBox)\n      }}>&times;</div>\n    </div> :\n    <AiOutlineSearch className=\"filter-box icon clickable\" onClick={() => setDisplayBox(!displayBox)}/>);\n}\n","import React from 'react';\nimport FilterBox from './FilterBox';\nimport './FilterHeader.css';\n\nexport default function FilterHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <FilterBox filter={props.filter} clearFilter={props.clearFilter}/>\n      </div>\n    </th>\n  );\n}","import React from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './Description.css';\n\nexport default function Description(props) {\n  const description = props.description;\n  return description === undefined || description === null ? \n    <p>暂无简介</p> :\n    <div className=\"description\">\n      <div>\n        <h1>\n          {description.name}\n          <a href={\"https://www.douban.com/search?q=\" + description.name} target=\"_blank\" rel=\"noopener noreferrer\">\n            <AiOutlineSearch className=\"icon clickable\" />\n          </a>\n        </h1>\n        <p>豆瓣评分：{description.douban}</p>\n        <p>年份：{description.year}</p>\n        <p>分类：{description.genre}</p>\n        <p>集数：{description.episodes}</p>\n        <p>单集片长：{description.episode_length}</p>\n        <p>简介：{description.description}</p>\n      </div>\n    </div>;\n}","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './AnimeModal.css';\nimport '../App.css';\n\nexport default function AnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  return <Form onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>豆瓣评分<a href={\"https://www.douban.com\"} target=\"_blank\" rel=\"noopener noreferrer\"><AiOutlineSearch className=\"icon clickable\" /></a></Form.Label><Form.Control defaultValue={oldValue.douban} id=\"douban\" type=\"input\"/></Col>\n        <Col><Form.Label>年份</Form.Label><Form.Control defaultValue={oldValue.year} id=\"year\" type=\"input\"/></Col>\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>TV集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n        <Col><Form.Label>剧场版</Form.Label><Form.Control defaultValue={oldValue.movies} id=\"movies\" type=\"input\"/></Col>\n        <Col><Form.Label>单集片长</Form.Label><Form.Control defaultValue={oldValue.episode_length} id=\"episode_length\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Label>简介</Form.Label>\n      <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>剧情评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"story\" type=\"input\"/></Col>\n        <Col><Form.Label>作画评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"illustration\" type=\"input\"/></Col>\n        <Col><Form.Label>音乐评分</Form.Label><Form.Control defaultValue={oldValue.music} id=\"music\" type=\"input\"/></Col>\n        <Col><Form.Label>情怀评分</Form.Label><Form.Control defaultValue={oldValue.passion} id=\"passion\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>开始观看日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>结束观看日期</Form.Label><Form.Control defaultValue={oldValue.end_date} id=\"end_date\" type=\"input\"/></Col>\n        <Col><Form.Label>观看次数</Form.Label><Form.Control defaultValue={oldValue.times_watched} id=\"times_watched\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Button className=\"pink-button\" type=\"submit\">\n      提交\n    </Button>\n\n  </Form>\n}\n","// return the user data from the session storage\nexport const getUser = () => {\n  const userStr = sessionStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  else return null;\n}\n \n// return the token from the session storage\nexport const getToken = () => {\n  return sessionStorage.getItem('token') || null;\n}\n \n// remove the token and user from the session storage\nexport const removeUserSession = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n}\n \n// set the token and user from the session storage\nexport const setUserSession = (user, token) => {\n  sessionStorage.setItem('token', token);\n  sessionStorage.setItem('user', JSON.stringify(user));\n}\n\nexport function formatEpisodes(tv_episodes, movies) {\n  if (tv_episodes === undefined || movies === undefined) {\n    return \"\";\n  } else if (tv_episodes === 0) {\n    return `剧场版×${movies}`;\n  } else if (movies === 0) {\n    return `${tv_episodes}集`;\n  } else {\n    return `${tv_episodes}集+剧场版×${movies}`;\n  }\n}\n\nexport function formatDate(start_date, end_date) {\n  if (!start_date.isValid()) {\n    return \"\"\n  } else if (!end_date.isValid()) {\n    return `${start_date.format('MM/DD/YY')}至今`;\n  } else {\n    return `${start_date.format('MM/DD/YY')} 至 ${end_date.format('MM/DD/YY')}`;\n  }\n}\n\nexport function formatTime(time) {\n  if (isNaN(time)) {\n    return \"-\";\n  }\n  if (time >= 60) {\n    return Math.round(time / 60 * 10) / 10 + \" 小时\";\n  } else {\n    return Math.round(time * 10) / 10 + \" 分钟\";\n  }\n}\n\nexport function calculateDailyTime(row) {\n  const days = row.end_date.diff(row.start_date, 'days') + 1;\n  const episode_length = row.episode_length === undefined || row.episode_length === 0 ? 24 : row.episode_length;\n  const totalTime = row.tv_episodes * episode_length + row.movies * 90;\n  return totalTime / days;\n}\n\nexport function translate(word) {\n  switch(word) {\n    case '名称':\n      return 'name';\n    case '集数':\n    case '预计集数':\n      return 'tv_episodes';\n    case '状态':\n      return 'status';\n    case '分类':\n      return 'genre';\n    case '剧情':\n      return 'story';\n    case '作画':\n      return 'illustration';\n    case '音乐':\n      return 'music';\n    case '情怀':\n      return 'passion';\n    case '评分':\n      return 'rating';\n    case '首次观看日期':\n      return 'end_date';\n    case '观看次数':\n      return 'times_watched';\n    case '年份':\n      return 'year';\n    case '豆瓣评分':\n      return 'douban';\n    case '日均时长':\n      return 'daily_time';\n    case '排名':\n      return 'ranking';\n    case '季度':\n      return 'season';\n    case '开始放送日期':\n      return 'start_date';\n    case '更新日':\n      return 'next_episode_day';\n    default:\n      return 'unknown';\n  }\n}\n\nexport function sortList(rawList, sortedCol) {\n  return rawList.slice().sort((a, b) => {\n    const aQuantity = sortedCol === \"daily_time\" ? calculateDailyTime(a) : a[sortedCol];\n    const bQuantity = sortedCol === \"daily_time\" ? calculateDailyTime(b) : b[sortedCol];\n    if (sortedCol === \"start_date\" && typeof sortedCol !== \"string\") {\n      if (!aQuantity.isValid()) {\n        return 1;\n      } else if (!bQuantity.isValid()) {\n        return -1;\n      } else {\n        return compare(aQuantity, bQuantity);\n      }\n    } else {\n      return compare(aQuantity, bQuantity);\n    }\n  });\n}\n\nfunction compare(a, b) {\n  if (a > b) {\n    return -1;\n  } else if (a < b) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nexport function parseDoubanPage(pageSrc) {\n  const name = pageSrc.split(\"\\n\")[5].split(\" \")[0];\n  const year = pageSrc.split(\"首播: \")[1].split(\"-\")[0];\n  const douban = pageSrc.split(\"豆瓣评分\")[1].split(\"\\n\")[1];\n  let tv_episodes = 12;\n  try {\n    tv_episodes = parseInt(pageSrc.split(\"集数: \")[1].split(\"-\")[0]);\n  } catch (error) {\n    console.error(error);\n  }\n  let episode_length = 24;\n  try {\n    episode_length = parseInt(pageSrc.split(\"单集片长: \")[1].split(\"-\")[0]);\n  } catch (error) {\n    console.error(error);\n  }\n  const description = pageSrc.split(\"的剧情简介 · · · · · ·\")[1].split(\"\\n\\n\")[1].trim();\n  return {\n    name: name,\n    year: year,\n    douban: douban,\n    tv_episodes: isNaN(tv_episodes) ? 0 : tv_episodes,\n    episode_length: isNaN(episode_length) ? 12: episode_length,\n    description: description,\n  }\n}\n\nexport function getSeason() {\n  const d = new Date();\n  const year = d.getFullYear();\n  const month = Math.floor(d.getMonth()/3) * 3 + 1;\n  const curSeason = year + \"年\" + month + \"月\";\n  let preSeason = year + \"年\" + (month - 3) + \"月\";\n  let nextSeason = year + \"年\" + (month + 3) + \"月\";\n  if (month === 1) {\n    preSeason = (year - 1) + \"年10月\";\n  }\n  if (month === 10) {\n    nextSeason = (year + 1) + \"年1月\";\n  }\n  return [preSeason, curSeason, nextSeason];\n}\n\nexport function getLatestRankings(newAnimes, currentSeason) {\n  let rankings = {};\n  newAnimes.forEach(newAnime => {\n    const currentSeasonRankings = newAnime.seasons_ranking[currentSeason];\n    const dates = Object.keys(currentSeasonRankings);\n    const latestRank = currentSeasonRankings[dates.sort()[dates.length - 1]];\n    rankings[newAnime.name] = latestRank;\n  });\n  return rankings;\n}","import React, { useState, useEffect } from 'react';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport SortHeader from './SortHeader';\nimport FilterHeader from './FilterHeader';\nimport Description from './Description';\nimport AnimeModal from './AnimeModal';\nimport { sortList, formatEpisodes, formatDate, translate, calculateDailyTime, formatTime, parseDoubanPage } from \"../utils/utils\";\nimport '../App.css';\nimport './AnimeList.css';\n\nfunction AnimeList(props) {\n\n  const { authenticated } = useAuthenticationContext();\n  \n  const { ratings } = React.useContext(AnimeDataContext);\n\n  const watchedHeaders = ['序号', '名称', '集数', '分类', '剧情', '作画', '音乐', '情怀', '评分', '首次观看日期', '日均时长', ''];\n  const wantToWatchHeaders = ['序号', '名称', '集数', '分类', '年份', '豆瓣评分', '简介', ''];\n  const [activeDescription, setActiveDescription] = useState(null);\n  const [showDescription, setShowDescription] = useState(false);\n  const [showAnimeModal, setShowAnimeModal] = useState(false);\n  const [showAnimeModalAuto, setShowAnimeModalAuto] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [submitNewAnimeAuto, setSubmitNewAnimeAuto] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayListStatus, setDisplayListStatus] = useState(\"已看\");\n  const [displayList, setDisplayList] = useState(ratings);\n  const [tableHeaders, setTableHeaders] = useState(watchedHeaders);\n  const [filterList, setFilterList] = useState({});\n  const [sortedCol, setSortedCol] = useState();\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n\n  useEffect(() => {setSortedCol(\"end_date\")}, []);\n\n  useEffect(() => {\n    setFilterList([]);\n    setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"end_date\"));\n  }, [props.isLoading, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      if (displayListStatus === '在看' && sortedCol === \"end_date\") {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"start_date\"));\n      } else {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), sortedCol));\n      }\n      setSortedCol(null);\n    } else {\n      if (displayListStatus === '在看' ) {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"start_date\"));\n      }\n    }\n  }, [sortedCol, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (filterList.length !== 0) {\n      for (const [key, value] of Object.entries(filterList)) {\n        setDisplayList(ratings.filter((item) => {\n          return item[key].includes(value) && item.status === displayListStatus;\n        }));\n      }\n      setFilterList([]);\n    }\n  }, [ratings, filterList, displayListStatus]);\n\n  const changeStatus = (e) => {\n    const newStatus = e.target.innerHTML;\n    if (newStatus === '想看') {\n      setTableHeaders(wantToWatchHeaders);\n    } else {\n      setTableHeaders(watchedHeaders);\n    }\n    setDisplayListStatus(newStatus);\n  }\n\n  const formatDescription = (description) => {\n    if (description !== null && description !== undefined) {\n      return description.substring(0, 20) + '......';\n    }\n  }\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      番剧评分加载失败！\n    </Alert>;\n  } else {\n    return (<div className=\"main-element\">\n      <Modal centered size='lg' show={showDescription} onHide={() => setShowDescription(false)}>\n        <Modal.Header>\n          <Modal.Title>简介</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Description description={activeDescription}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button className=\"pink-button\" onClick={() => setShowDescription(false)}>\n            关闭\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModal} onHide={() => setShowAnimeModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新番剧\" : \"编辑番剧\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              if (submitNewAnime) {\n                props.onAnimeSubmit(event, null, true);\n              } else if (submitNewAnimeAuto) {\n                props.onAnimeSubmit(event, null, true);\n              } else {\n                props.onAnimeSubmit(event, id, false);\n              }\n              setShowAnimeModal(false);\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModalAuto} onHide={() => setShowAnimeModalAuto(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>添加新番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={(event) => {\n            event.preventDefault();\n            const info = parseDoubanPage(event.target.elements.html.value);\n            setEditAnimeOldValue({\n              name: info.name,\n              year: info.year,\n              douban: info.douban,\n              tv_episodes: info.tv_episodes,\n              movies: 0,\n              episode_length: info.episode_length,\n              status: \"想看\",\n              genre: \"\",\n              description: info.description,\n              story: 0,\n              illustration: 0,\n              music: 0,\n              passion: 0,\n              start_date: null,\n              end_date: null,\n              times_watched: 0,\n            });\n            setSubmitNewAnimeAuto(true);\n            setShowAnimeModalAuto(false);\n            setActiveId(null);\n            setShowAnimeModal(true);\n          }}>\n            <Form.Group>\n              <Form.Label>豆瓣页面源</Form.Label>\n              <Form.Control id=\"html\" as=\"textarea\" rows=\"10\" />\n            </Form.Group>\n            <Button className=\"pink-button\" type=\"submit\">\n              提交\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteAnime(animeToDelete.id, \"Ratings\");\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          <Button className=\"pink-button\" onClick={changeStatus}>已看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>在看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>想看</Button>\n        </div>\n        <div>\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModal(true);\n            setSubmitNewAnime(true);\n          }}>手动添加</Button> : <></>}\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModalAuto(true);\n            setSubmitNewAnime(true);\n          }}>自动添加</Button> : <></>}\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '名称' || header === '分类') {\n                  return <FilterHeader key={header} header={header}\n                    filter={(e) => {\n                      let newFilterList = {};\n                      for (let item in filterList) {\n                        newFilterList[item] = filterList[item];\n                      }\n                      newFilterList[translate(header)] = e.target.value;\n                      setFilterList(newFilterList);\n                    }}\n                    clearFilter={() => {\n                      setFilterList([]);\n                      setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"end_date\"));\n                    }}\n                  />;\n                } else if (header === '序号') {\n                  return <th key={header} >序号</th>\n                } else if (header !== ''){\n                  return <SortHeader key={header} header={header} sort={() => setSortedCol(translate(header))}/>;\n                } else {\n                  return <th key={header} ></th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map((row, idx) =>\n                <tr key={row.name}>\n                  <td>{idx + 1}</td>\n                  <td className='anime-name clickable' onClick={(e) => {\n                    setActiveDescription(\n                      {\n                        name: row.name,\n                        douban: row.douban,\n                        year: row.year,\n                        genre: row.genre,\n                        episodes: row.tv_episodes,\n                        episode_length: row.episode_length,\n                        description: row.description,\n                      }\n                    );\n                    setShowDescription(true);\n                  }}>{row.name}</td>\n                  <td>{formatEpisodes(row.tv_episodes, row.movies)}</td>\n                  <td>{row.genre}</td>\n                  <td>{displayListStatus === '想看' ? row.year : row.story}</td>\n                  <td>{displayListStatus === '想看' ? row.douban : row.illustration}</td>\n                  <td>{displayListStatus === '想看' ? formatDescription(row.description) : row.music}</td>\n                  {displayListStatus === '想看' ? \"\" : <td>{row.passion}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{row.rating}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatDate(row.start_date, row.end_date)}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatTime(calculateDailyTime(row))}</td>}\n                  <td> {authenticated ?\n                      <>\n                        <BiEditAlt className=\"clickable\" onClick={() => {\n                          setActiveId(row.id);\n                          setEditAnimeOldValue({\n                            name: row.name,\n                            year: row.year,\n                            douban: row.douban,\n                            tv_episodes: row.tv_episodes,\n                            movies: row.movies,\n                            episode_length: row.episode_length,\n                            status: row.status,\n                            genre: row.genre,\n                            description: row.description,\n                            story: row.story,\n                            illustration: row.illustration,\n                            music: row.music,\n                            passion: row.passion,\n                            start_date: row.start_date.format('YYYY-MM-DD'),\n                            end_date: row.end_date.format('YYYY-MM-DD'),\n                            times_watched: row.times_watched,\n                          });\n                          setSubmitNewAnime(false);\n                          setShowAnimeModal(true);\n                        }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                          setAnimeToDelete({\n                            name: row.name,\n                            id: row.id,\n                          });\n                          setShowDeleteConfirmation(true);\n                        }}/>\n                      </> : <></>\n                    }\n                    </td>\n                </tr>)\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nexport default AnimeList;","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport { BsFileArrowUp, BsFileArrowDown } from \"react-icons/bs\";\nimport './Rankings.css'\nimport '../App.css';\n\nexport default function Rankings(props) {\n  const rankingsDictToArray = (rankings) => {\n    let res = [];\n    for (const [anime, ranking] of Object.entries(rankings)) {\n      res.push([anime, ranking]);\n    }\n    res.sort(function(a, b) {\n        return a[1] - b[1];\n    });\n    return res;\n  }\n\n  return <div>\n    <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n      <thead>\n        <tr className='table-headers'>\n          <th>排名</th>\n          <th>名称</th>\n          <th>调整排名</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n        rankingsDictToArray(props.rankings).map(row => \n          <tr key={row[0]}>\n            <td>{row[1]}</td>\n            <td className='new-anime-name'>{row[0]}</td>\n            <td className=\"update-ranking-buttons\">\n              <>\n                <Button className=\"pink-button\" onClick={(e) => props.changeRanking(e, -1)}><BsFileArrowUp/></Button>\n                <Button className=\"pink-button\" onClick={(e) => props.changeRanking(e, 1)}><BsFileArrowDown/></Button>\n              </>\n            </td>\n          </tr>\n        )\n      }\n      </tbody>\n    </Table>\n  </div>\n}","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport './DailyNewAnimes.css';\n\nexport default function DailyNewAnimes(props) {\n\n  const days = [moment().subtract(1,'days'), moment(), moment().add(1, 'days')];\n\n  moment.locale('zh-cn');\n\n  return <div id=\"daily-new-animes\">\n            {days.map(day => \n              <ListGroup>\n                <ListGroup.Item variant={day.isSame(moment(), 'day') ? 'primary' : 'dark'}>{day.format('dddd[，]YYYY[年]MMMDo ')}</ListGroup.Item>\n                {props.displayList.filter(newAnime => {\n                  const startDate = moment(newAnime.start_date);\n                  return day.isAfter(startDate) && day.diff(startDate, 'days') % 7 === 0;\n                }).map(todayAnime => <ListGroup.Item key={todayAnime.name}>{todayAnime.name}</ListGroup.Item>)}\n              </ListGroup>\n            )}\n          </div>\n}","import React, { useState, useEffect } from 'react';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Alert from 'react-bootstrap/Alert';\nimport moment from 'moment';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport SortHeader from './SortHeader';\nimport AnimeModal from './AnimeModal';\nimport Rankings from './Rankings';\nimport DailyNewAnimes from './DailyNewAnimes';\nimport { getSeason, formatEpisodes, translate, sortList, getLatestRankings } from \"../utils/utils\";\nimport '../App.css';\nimport './NewAnimeList.css';\n\nfunction NewAnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  return <Form id=\"new-anime-modal\" onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Row className=\"input-row\">\n        <Col><Form.Label>季度</Form.Label><Form.Control defaultValue={oldValue.season} id=\"season\" type=\"input\"/></Col>\n        <Col><Form.Label>开始放送日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>更新日</Form.Label><Form.Control defaultValue={oldValue.next_episode_day} id=\"next_episode_day\" type=\"input\"/></Col>\n      </Form.Row>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>预计集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Group>\n      <Form.Label>简介</Form.Label>\n        <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n      </Form.Group>\n    </Form.Group>\n    <div>\n      <Button className=\"pink-button\" type=\"submit\">\n        提交\n      </Button>\n      {props.submitNewAnime ? <></> : <Button onClick={() => {\n        const formElements = document.getElementById(\"new-anime-modal\").elements;\n        props.handleRateNewAnime({\n          \"name\": formElements.name.value,\n          \"tv_episodes\": Number(formElements.tv_episodes.value),\n          \"genre\": formElements.genre.value,\n          \"description\": formElements.description.value,\n          \"start_date\": formElements.start_date.value,\n          \"status\": formElements.status.value\n        });\n      }}>已追完</Button>}\n    </div>\n\n  </Form>\n}\n\nfunction NewAnimeList(props) {\n\n  const { authenticated } = useAuthenticationContext();\n  const { newAnimes } = React.useContext(AnimeDataContext);\n\n  const tableHeaders = ['排名', '名称', '分类', '季度', '开始放送日期', '更新日', '预计集数', '状态', '']\n\n  const [seasons, setSeasons] = useState([])\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showRateModal, setShowRateModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [showRankings, setShowRankings] = useState(false);\n  const [showToday, setShowToday] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [localRankings, setLocalRankings] = useState({});\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayList, setDisplayList] = useState(newAnimes);\n  const [displayListSeason, setDisplayListSeason] = useState(null);\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n  const [sortedCol, setSortedCol] = useState(null);\n  const [rateAnimePartialInfo, setRateAnimePartialInfo] = useState(null);\n\n  useEffect(() => {setSortedCol(\"ranking\")}, []);\n\n  const handleRateNewAnime = (partialInfo) => {\n    partialInfo.status = \"已看\";\n    setRateAnimePartialInfo(partialInfo);\n    setShowAddModal(false);\n    setShowRateModal(true);\n  }\n\n  const changeSeason = (e) => {\n    setDisplayListSeason(e.target.innerHTML);\n  }\n\n  const sortAnimesByRankings = (animes, rankings) => {\n    animes.sort((a, b) => {\n      if (rankings[a.name] > rankings[b.name]) return 1;\n      if (rankings[a.name] < rankings[b.name]) return -1;\n      return 0;\n    })\n  }\n\n  const getMaxRanking = (rankings) => {\n    let max = -1;\n    for (const anime of Object.keys(rankings)) {\n      if (rankings[anime] > max) {\n        max = rankings[anime];\n      }\n    }\n    return max;\n  }\n\n  const changeRanking = (e, offset) => {\n    const newAnimeName = e.currentTarget.parentElement.parentElement.getElementsByClassName('new-anime-name')[0].innerText;\n    const originRanking = localRankings[newAnimeName];\n    const newRankings = {};\n    let possibleToChange = false;\n    if (offset === 1) {\n      possibleToChange = originRanking !== getMaxRanking(localRankings);\n    } else if (offset === -1) {\n      possibleToChange = originRanking !== 1;\n    }\n    if (possibleToChange) {\n      for (const [anime, ranking] of Object.entries(localRankings)) {\n        if (anime === newAnimeName) {\n          newRankings[anime] = originRanking + offset;\n        } else if (ranking === originRanking + offset) {\n          newRankings[anime] = originRanking;\n        } else {\n          newRankings[anime] = ranking;\n        }\n      }\n      setLocalRankings(newRankings);\n    }\n  }\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      const filteredNewAnimes = newAnimes.filter((newAnime) => newAnime.season.includes(displayListSeason));\n      if (sortedCol === 'ranking') {\n        sortAnimesByRankings(filteredNewAnimes, rankings);\n        setDisplayList(filteredNewAnimes);\n      } else {\n        setDisplayList(sortList(filteredNewAnimes, sortedCol));\n      }\n      setSortedCol(null);\n    }\n  }, [sortedCol, newAnimes, displayListSeason, rankings]);\n\n  useEffect(() => {\n    const seasons = getSeason();\n    setSeasons(seasons);\n    setDisplayListSeason(seasons[1]);\n  }, [])\n\n  useEffect(() => {\n    const filteredNewAnimes = newAnimes.filter((newAnime) => newAnime.season.includes(displayListSeason));\n    const rankings = getLatestRankings(filteredNewAnimes, displayListSeason);\n    sortAnimesByRankings(filteredNewAnimes, rankings);\n    setDisplayList(filteredNewAnimes);\n    setRankings(rankings);\n    setLocalRankings(rankings);\n  }, [props.isLoading, newAnimes, displayListSeason])\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      追番列表加载失败！\n    </Alert>;\n  } else {\n    return (<div className=\"main-element\">\n      <Modal centered size='lg' show={showAddModal} onHide={() => setShowAddModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新追番\" : \"编辑追番\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <NewAnimeModal\n            submitNewAnime={submitNewAnime}\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              if (submitNewAnime) {\n                props.onNewAnimeSubmit(event, null, true);\n              } else {\n                props.onNewAnimeSubmit(event, id, false);\n              }\n              setShowAddModal(false);\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n            handleRateNewAnime={handleRateNewAnime}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size='lg' show={showRateModal} onHide={() => setShowRateModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>评价番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              props.onAnimeSubmit(event, id, true);\n              setShowRateModal(false);\n            }}\n            oldValue={rateAnimePartialInfo}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteNewAnime(animeToDelete.id, \"NewAnimes\");\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showRankings} onHide={() => setShowRankings(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>番剧排名</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Rankings rankings={localRankings} changeRanking={changeRanking}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            const updatedIds = [];\n            const newRankings = {};\n            const dateString = moment().format(\"YYYY-MM-DD\");\n            displayList.forEach(row => {\n              updatedIds.push(row.id);\n              const newRanking = Object.assign({}, row.seasons_ranking);\n              newRanking[displayListSeason][dateString] = localRankings[row.name];\n              newRankings[row.id] = newRanking;\n            })\n            props.updateNewAnimesRankings(updatedIds, newRankings, displayListSeason);\n            setShowRankings(false)\n          }}>提交</Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showToday} onHide={() => setShowToday(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>近期更新</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <DailyNewAnimes displayList={displayList}/>\n        </Modal.Body>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          {seasons.map(season => <Button key={season} className=\"pink-button\" onClick={changeSeason}>\n            {season}\n          </Button>)}\n        </div>\n        <div>\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setSubmitNewAnime(true);\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAddModal(true);\n          }}>添加追番</Button> : <></>}\n          {authenticated ? <Button className=\"pink-button\" onClick={() => setShowRankings(true)}>排名</Button> : <></>}\n          <Button className=\"pink-button\" onClick={() => setShowToday(true)}>近期更新</Button>\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '更新日' || header === '排名' || header === '开始放送日期'){\n                  return <SortHeader key={header} header={header} sort={() => setSortedCol(translate(header))}/>;\n                } else {\n                  return <th key={header} >{header}</th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map(row => \n                <tr key={row.name}>\n                  <td>{rankings[row.name]}</td>\n                  <td className='anime-name'>{row.name}</td>\n                  <td>{row.genre}</td>\n                  <td>{row.season}</td>\n                  <td>{row.start_date}</td>\n                  <td>{row.next_episode_day}</td>\n                  <td>{formatEpisodes(row.tv_episodes, 0)}</td>\n                  <td>{row.status}</td>\n                  <td> {authenticated ?\n                    <>\n                      <BiEditAlt className=\"clickable\" onClick={() => {\n                        setActiveId(row.id);\n                        setEditAnimeOldValue({\n                          name: row.name,\n                          tv_episodes: row.tv_episodes,\n                          genre: row.genre,\n                          description: row.description,\n                          start_date: row.start_date,\n                          next_episode_day: row.next_episode_day,\n                          season: row.season,\n                          status: row.status\n                        });\n                        setSubmitNewAnime(false);\n                        setShowAddModal(true);\n                      }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                        setAnimeToDelete({\n                          name: row.name,\n                          id: row.id,\n                        });\n                        setShowDeleteConfirmation(true);\n                      }}/>\n                    </> : <></>\n                  }</td>\n                </tr>  \n              )\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nexport default NewAnimeList;","import React, { useState, useContext, createContext } from 'react';\nimport moment from 'moment';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport { FiPlusCircle } from \"react-icons/fi\";\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport { formatTime } from \"../utils/utils\";\nimport './MonthlySummary.css';\nimport '../App.css';\n\nconst QuoteModificationContext = createContext(null);\n\nfunction useQuoteModificationContext() {\n  return useContext(QuoteModificationContext);\n}\n\nfunction Quote(props) {\n  const { authenticated } = useAuthenticationContext();\n  const { setQuoteToEdit, setShowQuoteModal, setIsNewQuote, setActiveQuoteId, setShowDeleteConfirmation } = useQuoteModificationContext();\n  return <blockquote>\n    <div className=\"quote-content\">{props.quote.content}</div>\n    <div className=\"quote-translation\">{props.quote.translation}</div>\n    <cite>\n      {props.quote.person + \"《\" + props.quote.bangumi + \"》\"}\n      {authenticated ? <BiEditAlt className=\"icon clickable\"\n        onClick={() => {\n          setIsNewQuote(false);\n          setQuoteToEdit(props.quote);\n          setShowQuoteModal(true);\n        }}/> : <></>}\n      {authenticated ? <BiTrash className=\"icon clickable\"\n        onClick={() => {\n          setActiveQuoteId(props.quote.id);\n          setShowDeleteConfirmation(true);\n        }}/> : <></>}\n    </cite>\n  </blockquote>\n}\n\nfunction Summary(props) {\n  const { authenticated } = useAuthenticationContext();\n  const { setIsNewQuote, setQuoteToEdit, addNewQuote } = useQuoteModificationContext();\n  return <div className=\"summary\">\n    <div className=\"summary-title\">\n      <div className=\"summary-info\">\n        <div className=\"year-month\">\n          <div className=\"month\">{moment(props.month).format(\"MM\")}</div>\n          <div className=\"year\">{moment(props.month).format(\"YYYY\")}</div>\n          <div className=\"yue\">月</div>\n        </div>\n        <div className=\"summary-info-pieces\">\n          <div className=\"summary-info-piece\">{\"番剧总数：\" + props.summary.bangumi_num}</div>\n          <div className=\"summary-info-piece\">{\"总集数：\" + props.summary.tv_episode_num}</div>\n          <div className=\"summary-info-piece\">{\"总时长：\" + formatTime(props.summary.total_time)}</div>\n          <div className=\"summary-info-piece\">{\"每日时长：\" + formatTime(props.summary.total_time / moment(props.month).daysInMonth())}</div>\n        </div>\n      </div>\n      <div className=\"summary-quotes\">\n        {\n          props.summary.quotes.length !== 0 ?\n          <>\n            {props.summary.quotes.map((quote) => <Quote quote={quote} setActiveQuoteId={props.setActiveQuoteId}/>)}\n            {authenticated ? <FiPlusCircle \n              className=\"clickable add-more-quote-button\"\n              onClick={() => {\n                addNewQuote(props.month);\n                setIsNewQuote(true);\n                setQuoteToEdit({});\n              }}\n            /> : <></>}\n          </> :\n          (authenticated ? <Button \n            className=\"pink-button add-quote-button\"\n            onClick={() => {\n              addNewQuote(props.month);\n              setQuoteToEdit({});\n            }}\n          >\n          添加语录\n          </Button> : <div className=\"add-quote-button\">暂无语录</div>)\n        }\n      </div>\n    </div>\n    <div className=\"summary-names\">\n      {props.summary.bangumis.map((bangumi_name) => \n        <div className=\"bangumi-name\">{\"• \" + bangumi_name}</div>)}\n    </div>\n  </div>\n}\n\nfunction MonthlySummary(props) {\n  const { monthlySummaries } = useContext(AnimeDataContext);\n\n  const [isNewQuote, setIsNewQuote] = useState(true);\n  const [showQuoteModal, setShowQuoteModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [activeQuoteId, setActiveQuoteId] = useState();\n  const [quoteToEdit, setQuoteToEdit] = useState({});\n  const [activeMonth, setActiveMonth] = useState(\"\");\n\n  const addNewQuote = (month) => {\n    setShowQuoteModal(true);\n    setActiveMonth(month);\n  };\n\n  const sortMonthlySummaries = (monthlySummaries) => {\n    const res = [];\n    for (const [month, summary] of Object.entries(monthlySummaries)) {\n      res.push([month, summary]);\n    }\n    res.sort((a, b) => a[0].localeCompare(b[0]) * -1);\n    return res;\n  }\n\n  return <div className=\"monthly-summary\">\n      <Modal centered size='lg' show={showQuoteModal} onHide={() => setShowQuoteModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{isNewQuote ? \"添加新语录\" : \"编辑语录\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <Form onSubmit={(event) => {\n            if (isNewQuote) {\n              event.preventDefault();\n              props.onQuoteSubmit(event, activeMonth, quoteToEdit.id, true);\n            } else {\n              event.preventDefault();\n              props.onQuoteSubmit(event, quoteToEdit.month, quoteToEdit.id, false)\n            }\n            setShowQuoteModal(false);\n          }}>\n          <Form.Group controlId=\"content\">\n            <Form.Label>语录原文</Form.Label>\n            <Form.Control defaultValue={quoteToEdit.content} type=\"input\" as=\"textarea\" rows=\"3\"/>\n          </Form.Group>\n          <Form.Group controlId=\"translation\">\n            <Form.Label>中文翻译</Form.Label>\n            <Form.Control defaultValue={quoteToEdit.translation} type=\"input\" as=\"textarea\" rows=\"3\"/>\n          </Form.Group>\n          <Form.Row className=\"input-row\">\n            <Col><Form.Label>人物</Form.Label><Form.Control defaultValue={quoteToEdit.person} id=\"person\" type=\"input\"/></Col>\n            <Col><Form.Label>作品</Form.Label><Form.Control defaultValue={quoteToEdit.bangumi} id=\"bangumi\" type=\"input\"/></Col>\n          </Form.Row>\n          <Button className=\"pink-button\" type=\"submit\">\n            提交\n          </Button>\n        </Form>\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除语录</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除此语录吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setActiveQuoteId(null);\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteQuote(activeQuoteId);\n            setActiveQuoteId(null);\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n    {\n      sortMonthlySummaries(monthlySummaries).map((entry) => \n      <QuoteModificationContext.Provider value={{ setIsNewQuote, setShowQuoteModal, addNewQuote, setQuoteToEdit, setActiveQuoteId, setShowDeleteConfirmation }}>\n        <Summary month={entry[0]} summary={entry[1]} />\n      </QuoteModificationContext.Provider>)\n    }\n  </div>;\n}\n\nexport default MonthlySummary;","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport \"./Login.css\";\nimport \"../App.css\";\n\nexport default function Login() {\n  const { username, password, setAuthenticating, setUsername, setPassword, handleLogin } = useAuthenticationContext();\n\n  const validateForm = () => {\n    return username.length > 0 && password.length > 0;\n  }\n\n  return (\n    <div className=\"Login\">\n      <Form onSubmit={handleLogin}>\n        <Form.Group size=\"lg\" controlId=\"username\">\n          <Form.Label>用户名</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"password\">\n          <Form.Label>密码</Form.Label>\n          <Form.Control\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"button-group\">\n          <Button className=\"pink-button\" size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n            登陆\n          </Button>\n          <Button className=\"pink-button\" size=\"lg\" type=\"submit\" onClick={() => setAuthenticating(false)}>\n            取消\n          </Button>\n        </div>\n      </Form>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport * as Env from \"./environments\";\nimport Navivation from './components/Navigation';\nimport AnimeDataContext from './context/AnimeDataContext';\nimport AnimeList from './components/AnimeList';\nimport NewAnimeList from './components/NewAnimeList';\nimport MonthlySummary from './components/MonthlySummary';\nimport Login from \"./components/Login\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { AuthenticationContext } from \"./context/AuthenticationContext\";\nimport { sortList, getUser, getToken, setUserSession, removeUserSession } from \"./utils/utils\";\nimport Parse from 'parse';\nimport moment from 'moment';\nimport './App.css';\n\nParse.initialize(Env.APPLICATION_ID, Env.JAVASCRIPT_KEY);\nParse.serverURL = Env.SERVER_URL;\n\nfunction App() {\n  // authentication related states\n  const [authenticated, setAuthenticated] = useState(false);\n  const [authenticating, setAuthenticating] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(getUser());\n  const [token, setToken] = useState(getToken());\n  // page status related states\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [activePage, setActivePage] = useState(\"AnimeList\")\n\n  // data related states\n  const [ratings, setRatings] = useState([]);\n  const [newAnimes, setNewAnimes] = useState([]);\n  const [summaries, setSummaries] = useState({});\n  const [quotes, setQuotes] = useState([]);\n\n  const fetchRatings = async () => {\n    setIsLoading(true);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for ratings\");\n      if (typeof document !== 'undefined'){\n        const ratings = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            year: result.get(\"year\"),\n            douban: result.get(\"douban\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            movies: result.get(\"movies\"),\n            episode_length: result.get(\"episode_length\"),\n            status: result.get(\"status\"),\n            genre: result.get(\"genre\"),\n            description: result.get(\"description\"),\n            story: result.get(\"story\"),\n            illustration: result.get(\"illustration\"),\n            music: result.get(\"music\"),\n            passion: result.get(\"passion\"),\n            rating: Number((result.get(\"story\") + result.get(\"illustration\") + result.get(\"music\") + result.get(\"passion\")).toFixed(1)),\n            start_date: moment(result.get(\"start_date\"), 'YYYY-MM-DD'),\n            end_date: moment(result.get(\"end_date\"), 'YYYY-MM-DD'),\n            times_watched: result.get(\"times_watched\"),\n          }}\n        );\n        setRatings(sortList(ratings, \"start_date\"));\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      console.error('Error while fetching ratings', error);\n    });\n  };\n\n  const fetchQuotes = async () => {\n    const quotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(quotesObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for quotes\");\n      if (typeof document !== 'undefined'){\n        const quotes = results.map((result) => {\n          return {\n            id: result.id,\n            month: result.get(\"month\"),\n            content: result.get(\"content\"),\n            translation: result.get(\"translation\"),\n            person: result.get(\"person\"),\n            bangumi: result.get(\"bangumi\"),\n          }}\n        );\n        setQuotes(quotes);\n      }\n    }, (error) => {\n      setLoadError(true);\n      console.error('Error while fetching quotes', error);\n    });\n  }\n\n  const fetchNewAnimes = async () => {\n    setIsLoading(true);\n    const quotesObj = Parse.Object.extend('NewAnimes');\n    const query = new Parse.Query(quotesObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for new animes\");\n      if (typeof document !== 'undefined'){\n        const newAnimes = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            genre: result.get(\"genre\"),\n            seasons_ranking: result.get(\"seasons_ranking\"),\n            start_date: result.get(\"start_date\"),\n            next_episode_day: result.get(\"next_episode_day\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            description: result.get(\"description\"),\n            season: result.get(\"season\"),\n            status: result.get(\"status\"),\n          }}\n        );\n        setNewAnimes(newAnimes);\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      console.error('Error while fetching new animes', error);\n    });\n  }\n\n  const submitNewEntry = async (newEntry, databaseName) => {\n    const DataObject = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(DataObject);\n    query.equalTo(\"name\", newEntry.name);\n    const results = await query.find();\n    if (results.length > 0) {\n      alert(\"番剧《\" + newEntry.name + \"》已存在！请勿重复添加番剧！\")\n    } else {\n      const newObj = new DataObject();\n      for (const [key, value] of Object.entries(newEntry)) {\n        newObj.set(key, value)\n      }\n      newObj.save().then(\n        (result) => {\n          alert(\"已提交番剧信息！\");\n          if (databaseName === \"Ratings\") {\n            fetchRatings();\n          } else if (databaseName === \"NewAnimes\") {\n            fetchNewAnimes();\n          }\n        },\n        (error) => {\n          alert(\"更新失败，请稍后重试。\");\n        }\n      );\n    }\n  };\n\n  const submitNewQuote = async (newQuote) => {\n    const QuotesObj = Parse.Object.extend('Quotes');\n    const newQuotesObj = new QuotesObj();\n    for (const [key, value] of Object.entries(newQuote)) {\n      newQuotesObj.set(key, value)\n    }\n    newQuotesObj.save().then(\n      (result) => {\n        alert(\"已添加语录！\");\n        fetchQuotes();\n      },\n      (error) => {\n        alert(\"添加失败，请稍后重试。\");\n      }\n    );\n  };\n\n  const updateEntry = async (id, newEntry, databaseName) => {\n    const obj = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(obj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newEntry)) {\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        alert(\"已更新番剧信息！\");\n        if (databaseName === \"Ratings\") {\n          fetchRatings();\n        } else if (databaseName === \"NewAnimes\") {\n          fetchNewAnimes();\n        }\n      }, (error) => {\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n  const updateQuote = async (id, newQuote) => {\n    const QuotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(QuotesObj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newQuote)) {\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        alert(\"已更新语录！\");\n        fetchQuotes();\n      }, (error) => {\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n\n  const updateNewAnimesRankings = async (ids, newRankings, season) => {\n    const obj = Parse.Object.extend(\"NewAnimes\");\n    const query = new Parse.Query(obj);\n    query.containedIn(\"objectId\", ids);\n    query.find().then((results) => {\n      results.forEach((result) => {\n        result.set(\"seasons_ranking\", newRankings[result.id]);\n      })\n      Parse.Object.saveAll(results).then((response) => {\n        alert(\"已更新排名！\");\n        fetchNewAnimes();\n      }, (err) => {\n        alert(\"更新排名失败。\");\n      })\n    }, (error) => {\n      alert(\"更新排名失败。\");\n    });\n  }\n  \n  const deleteEntry = async (id, databaseName) => {\n    const obj = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(obj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        alert(\"已删除番剧！\");\n        if (databaseName === \"Ratings\") {\n          fetchRatings();\n        } else if (databaseName === \"NewAnimes\") {\n          fetchNewAnimes();\n        }\n      }, (error) => {\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  const deleteQuote = async (id) => {\n    const quotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(quotesObj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        alert(\"已删除语录！\");\n        fetchQuotes();\n      }, (error) => {\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchRatings();\n    fetchNewAnimes();\n    fetchQuotes();\n  }, [])\n\n  useEffect(() => {\n    const tempSummaries = {};\n    ratings.filter((rating) => rating.status === \"已看\").forEach((bangumi) => {\n      let endMonth = moment(bangumi.end_date).format('YYYY-MM');\n      if (!(endMonth in tempSummaries)) {\n        tempSummaries[endMonth] = {\n          bangumi_num: 0,\n          tv_episode_num: 0,\n          movie_num: 0,\n          total_time: 0,\n          daily_time: 0,\n          bangumis: [],\n          quotes: [],\n        };\n      }\n      tempSummaries[endMonth].bangumi_num += 1;\n      tempSummaries[endMonth].bangumis.push(bangumi.name);\n      tempSummaries[endMonth].tv_episode_num += bangumi.tv_episodes;\n      tempSummaries[endMonth].movie_num += bangumi.movies;\n      tempSummaries[endMonth].total_time += bangumi.tv_episodes * bangumi.episode_length + bangumi.movies * 90;\n    });\n    quotes.forEach((quote) => {\n      let month = moment(quote.month).format('YYYY-MM');\n      if (month in tempSummaries) {\n        tempSummaries[month].quotes.push(quote);\n      }\n    });\n    setSummaries(tempSummaries);\n  }, [ratings, quotes])\n\n  useEffect(() => {\n    if (user != null && token != null) {\n      setAuthenticated(true);\n    }\n  }, [user, token])\n\n  const handleAnimeSubmit = (event, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newRating = {\n      \"name\": formElements.name.value,\n      \"year\": formElements.year.value,\n      \"douban\": Number(formElements.douban.value),\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"movies\": Number(formElements.movies.value),\n      \"episode_length\": Number(formElements.episode_length.value),\n      \"status\": formElements.status.value,\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"story\": Number(formElements.story.value),\n      \"illustration\": Number(formElements.illustration.value),\n      \"music\": Number(formElements.music.value),\n      \"passion\": Number(formElements.passion.value),\n      \"start_date\": formElements.start_date.value,\n      \"end_date\": formElements.end_date.value,\n      \"times_watched\": Number(formElements.times_watched.value),\n    };\n    if (isNew) {\n      submitNewEntry(newRating, 'Ratings');\n    } else {\n      updateEntry(id, newRating, 'Ratings');\n    }\n  };\n\n  const handleNewAnimeSubmit = (event, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newAnime = {\n      \"name\": formElements.name.value,\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"start_date\": formElements.start_date.value,\n      \"next_episode_day\": formElements.next_episode_day.value,\n      \"season\": formElements.season.value,\n      \"status\": formElements.status.value,\n    };\n    if (isNew) {\n      submitNewEntry(newAnime, 'NewAnimes');\n    } else {\n      updateEntry(id, newAnime, 'NewAnimes');\n    }\n  };\n\n  const handleQuoteSubmit = (event, month, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newQuote = {\n      \"month\": month,\n      \"content\": formElements.content.value,\n      \"translation\": formElements.translation.value,\n      \"person\": formElements.person.value,\n      \"bangumi\": formElements.bangumi.value,\n    };\n    if (isNew) {\n      submitNewQuote(newQuote);\n    } else {\n      updateQuote(id, newQuote);\n    }\n  }\n\n  const handleLogin = (event) => {\n    event.preventDefault();\n    // Create a new instance of the user class\n    Parse.User.logIn(username, password).then((user) => {\n        setUserSession(user, user.getSessionToken());\n        alert(\"欢迎，\" + user.getUsername());\n        setAuthenticating(false);\n        setAuthenticated(true);\n    }).catch(function(error){\n        alert(error.message);\n    });\n  }\n\n  const handleSignOut = () => {\n    setUser(null);\n    setToken(null);\n    removeUserSession();\n    setAuthenticated(false);\n  }\n\n  const mainElement = (activePage) => {\n    switch (activePage) {\n      case 'AnimeList':\n        return <AnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchRatings}\n          onAnimeSubmit={handleAnimeSubmit}\n          deleteAnime={deleteEntry}\n        />;\n      case 'NewAnimeList':\n        return <NewAnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchNewAnimes}\n          onAnimeSubmit={handleAnimeSubmit}\n          onNewAnimeSubmit={handleNewAnimeSubmit}\n          updateEntry={updateEntry}\n          deleteNewAnime={deleteEntry}\n          updateNewAnimesRankings={updateNewAnimesRankings}\n        />\n      case 'MonthlySummary':\n        return <MonthlySummary\n          onQuoteSubmit={handleQuoteSubmit}\n          deleteQuote={deleteQuote}\n        />;\n      default:\n        return <AnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchRatings}\n          onAnimeSubmit={handleAnimeSubmit}\n          deleteAnime={deleteEntry}\n        />;\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"App\">\n        <AuthenticationContext.Provider value={{ username, password, authenticated, setAuthenticating, handleLogin, handleSignOut, setUsername, setPassword }}>\n          <Navivation switchPage={setActivePage}/>\n          {authenticating ? <Login /> :\n            <AnimeDataContext.Provider value={{ ratings: ratings, monthlySummaries: summaries, newAnimes: newAnimes }}>\n              {mainElement(activePage)}\n            </AnimeDataContext.Provider>\n          }\n        </AuthenticationContext.Provider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}