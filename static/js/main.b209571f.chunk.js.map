{"version":3,"sources":["environments.js","context/AuthenticationContext.jsx","components/Navigation.js","context/AnimeDataContext.jsx","components/SortHeader.js","components/FilterBox.js","components/FilterHeader.js","components/Description.js","components/AnimeModal.js","utils/utils.js","components/AnimeList.js","components/Rankings.js","components/DailyNewAnimes.js","components/NewAnimeList.js","components/MonthlySummary.js","components/SeasonalSummary.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APPLICATION_ID","JAVASCRIPT_KEY","SERVER_URL","AuthenticationContext","createContext","useAuthenticationContext","useContext","UserManagement","authenticated","setAuthenticating","handleSignOut","id","className","onClick","Navigation","props","Navbar","sticky","expand","Brand","href","Nav","activeKey","window","location","pathname","Item","Link","switchPage","animeData","ratings","newAnimes","monthlySummaries","AnimeDataContext","React","SortHeader","header","sort","FilterBox","useState","displayBox","setDisplayBox","placeholder","type","onKeyPress","e","key","filter","clearFilter","FilterHeader","Description","description","undefined","name","target","rel","douban","year","genre","episodes","episode_length","AnimeModal","oldValue","setOldValue","useEffect","handleFillTodayDate","startDate","endDate","todayDate","moment","Date","format","newOldValue","JSON","parse","stringify","start_date","end_date","Form","onSubmit","event","onSubmitOrEdit","Group","controlId","Label","Control","defaultValue","Row","Col","status","tv_episodes","movies","as","rows","story","music","passion","times_watched","Button","formatEpisodes","formatTime","time","isNaN","Math","round","calculateDailyTime","row","days","diff","translate","word","sortList","rawList","sortedCol","slice","a","b","aQuantity","bQuantity","isValid","compare","getLatestRankings","currentSeason","rankings","forEach","newAnime","currentSeasonRankings","seasons_ranking","dates","Object","keys","latestRank","length","AnimeList","watchedHeaders","wantToWatchHeaders","activeDescription","setActiveDescription","showDescription","setShowDescription","showAnimeModal","setShowAnimeModal","showAnimeModalAuto","setShowAnimeModalAuto","showDeleteConfirmation","setShowDeleteConfirmation","submitNewAnime","setSubmitNewAnime","submitNewAnimeAuto","setSubmitNewAnimeAuto","animeToDelete","setAnimeToDelete","activeId","setActiveId","displayListStatus","setDisplayListStatus","displayList","setDisplayList","tableHeaders","setTableHeaders","filterList","setFilterList","setSortedCol","editAnimeOldValue","setEditAnimeOldValue","rating","isLoading","value","item","includes","entries","changeStatus","newStatus","innerHTML","formatDescription","substring","loadError","Alert","variant","Modal","centered","size","show","onHide","Header","Title","Body","Footer","closeButton","preventDefault","onAnimeSubmit","info","pageSrc","split","parseInt","error","console","trim","parseDoubanPage","elements","html","illustration","deleteAnime","refresh","Table","striped","borderless","hover","map","newFilterList","idx","DraggableRankingEntry","draggableId","index","toString","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","isDragging","draggableStyle","background","anime","Rankings","onDragEnd","droppableId","droppableProps","DailyNewAnimes","subtract","add","locale","day","ListGroup","isSame","isAfter","todayAnime","NewAnimeModal","season","next_episode_day","formElements","document","getElementById","handleRateNewAnime","Number","NewAnimeList","seasons","setSeasons","showAddModal","setShowAddModal","showRateModal","setShowRateModal","showRankings","setShowRankings","showToday","setShowToday","setRankings","localRankings","setLocalRankings","displayListSeason","setDisplayListSeason","rateAnimePartialInfo","setRateAnimePartialInfo","changeSeason","sortAnimesByRankings","animes","rankingsDictToArray","rankingsArray","Array","filteredNewAnimes","d","getFullYear","month","floor","getMonth","preSeason","nextSeason","getSeason","newRanking","max","values","onNewAnimeSubmit","partialInfo","deleteNewAnime","result","destination","newRankingsArray","list","startIndex","endIndex","from","splice","removed","reorder","source","newRankings","ranking","updatedIds","dateString","push","assign","updateNewAnimesRankings","QuoteModificationContext","useQuoteModificationContext","Quote","setQuoteToEdit","setShowQuoteModal","setIsNewQuote","setActiveQuoteId","quote","content","translation","person","bangumi","Summary","addNewQuote","summary","bangumi_num","tv_episode_num","total_time","daysInMonth","quotes","bangumis","bangumi_name","MonthlySummary","isNewQuote","showQuoteModal","activeQuoteId","quoteToEdit","activeMonth","setActiveMonth","onQuoteSubmit","deleteQuote","res","localeCompare","sortMonthlySummaries","entry","Provider","SeasonalSummary","summaryData","setSummaryData","formatRankingData","data","date","valueOf","tempData","seasonRankings","chart","height","borderRadius","title","text","xAxis","labels","yAxis","tickInterval","min","reversed","series","newSummaryData","e1","e2","season1","season2","year1","month1","replace","year2","month2","compareSeason","highcharts","Highcharts","options","Login","username","password","setUsername","setPassword","handleLogin","autoFocus","onChange","disabled","Parse","initialize","Env","serverURL","App","setAuthenticated","authenticating","userStr","sessionStorage","getItem","getUser","user","setUser","token","setToken","setIsLoading","setLoadError","activePage","setActivePage","setRatings","setNewAnimes","summaries","setSummaries","setQuotes","fetchRatings","ratingsObj","extend","query","Query","limit","find","then","results","log","get","toFixed","fetchQuotes","quotesObj","fetchNewAnimes","submitNewEntry","newEntry","databaseName","DataObject","equalTo","alert","newObj","set","save","submitNewQuote","newQuote","QuotesObj","newQuotesObj","updateEntry","obj","object","response","updateQuote","ids","containedIn","saveAll","err","deleteEntry","destroy","tempSummaries","endMonth","movie_num","daily_time","handleAnimeSubmit","isNew","newRating","handleNewAnimeSubmit","latestSeason","newSeasonsRanking","handleQuoteSubmit","User","logIn","setItem","setUserSession","getSessionToken","getUsername","catch","message","removeItem","mainElement","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b209571f.chunk.js","sourcesContent":["module.exports = {\n    APPLICATION_ID: '54T0X4tWovUBdnRd6EKdW3BrN4WJrpGBEJdwDk9J',\n    JAVASCRIPT_KEY: 'WREbi60D2GfVknGhH9Je1GJ931oIhIVkHUXD9u5R',\n    SERVER_URL: 'https://parseapi.back4app.com/'\n}","import { useContext, createContext } from \"react\";\n\nexport const AuthenticationContext = createContext(null);\n\nexport function useAuthenticationContext() {\n  return useContext(AuthenticationContext);\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport './Navigation.css';\nimport '../App.css';\n\nfunction UserManagement() {\n  const { authenticated, setAuthenticating, handleSignOut } = useAuthenticationContext();\n  if (authenticated) {\n    return <div id=\"user-management\">\n        <div className=\"text-button clickable\" onClick={handleSignOut}>注销</div>\n      </div>\n  } else {\n    return <div className=\"text-button clickable\" onClick={() => setAuthenticating(true)}>登陆</div>\n  }\n}\n\nfunction Navigation(props) {\n  return (\n    <Navbar sticky=\"top\" expand=\"lg\" id=\"navbar\">\n      <Navbar.Brand href=\"/\">追番补番</Navbar.Brand>\n      <Nav className=\"mr-auto\" activeKey={window.location.pathname}>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"AnimeList\")}>补番列表</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"NewAnimeList\")}>追番列表</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"MonthlySummary\")}>每月总结</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"SeasonalSummary\")}>季度总结</Nav.Link></Nav.Item>\n      </Nav>\n      <UserManagement />\n    </Navbar>\n  );\n}\n\nexport default Navigation;\n","import React from 'react';\n\nconst animeData = {\n  ratings: [],\n  newAnimes: [],\n  monthlySummaries: {}\n}\n\nconst AnimeDataContext = React.createContext(animeData);\n\nexport default AnimeDataContext;","import React from 'react';\nimport { BiSort } from \"react-icons/bi\";\nimport '../App.css';\n\nexport default function SortHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <BiSort className='icon clickable' onClick={props.sort}/>\n      </div>\n    </th>\n  );\n}","import React, { useState } from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './FilterBox.css';\nimport '../App.css';\n\nexport default function FilterBox(props) {\n  const [displayBox, setDisplayBox] = useState(false);\n  return (displayBox ? \n    <div className=\"filter-box\">\n      <input className=\"filter-input-box\" placeholder=\"输入......\" type=\"text\" onKeyPress={(e) => {\n        if (e.key === \"Enter\") props.filter(e);\n      }}/>\n      <div className=\"close-button clickable\" onClick={() => {\n        props.clearFilter();\n        setDisplayBox(!displayBox)\n      }}>&times;</div>\n    </div> :\n    <AiOutlineSearch className=\"filter-box icon clickable\" onClick={() => setDisplayBox(!displayBox)}/>);\n}\n","import React from 'react';\nimport FilterBox from './FilterBox';\nimport './FilterHeader.css';\n\nexport default function FilterHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <FilterBox filter={props.filter} clearFilter={props.clearFilter}/>\n      </div>\n    </th>\n  );\n}","import React from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './Description.css';\n\nexport default function Description(props) {\n  const description = props.description;\n  return description === undefined || description === null ? \n    <p>暂无简介</p> :\n    <div className=\"description\">\n      <div>\n        <h1>\n          {description.name}\n          <a href={\"https://www.douban.com/search?q=\" + description.name} target=\"_blank\" rel=\"noopener noreferrer\">\n            <AiOutlineSearch className=\"icon clickable\" />\n          </a>\n        </h1>\n        <p>豆瓣评分：{description.douban}</p>\n        <p>年份：{description.year}</p>\n        <p>分类：{description.genre}</p>\n        <p>集数：{description.episodes}</p>\n        <p>单集片长：{description.episode_length}</p>\n        <p>简介：{description.description}</p>\n      </div>\n    </div>;\n}","import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport moment from 'moment';\nimport './AnimeModal.css';\nimport '../App.css';\n\nexport default function AnimeModal(props) {\n\n  const [oldValue, setOldValue] = useState({});\n\n  useEffect(() => { setOldValue(props.oldValue == null || props.oldValue === undefined ? {} : props.oldValue) }, [props.oldValue])\n\n  const handleFillTodayDate = (startDate, endDate) => {\n    const todayDate = moment(new Date()).format(\"YYYY-MM-DD\");\n    const newOldValue = JSON.parse(JSON.stringify(oldValue));\n    if (startDate) {\n      newOldValue.start_date = todayDate;\n    } else if (endDate) {\n      newOldValue.end_date = todayDate;\n    }\n    setOldValue(newOldValue);\n  }\n\n  return <Form onSubmit={(event) => { props.onSubmitOrEdit(event, props.id) }}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>豆瓣评分<a href={\"https://www.douban.com\"} target=\"_blank\" rel=\"noopener noreferrer\"><AiOutlineSearch className=\"icon clickable\" /></a></Form.Label><Form.Control defaultValue={oldValue.douban} id=\"douban\" type=\"input\" /></Col>\n        <Col><Form.Label>年份</Form.Label><Form.Control defaultValue={oldValue.year} id=\"year\" type=\"input\" /></Col>\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\" /></Col>\n      </Form.Row>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\" /></Col>\n        <Col><Form.Label>TV集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\" /></Col>\n        <Col><Form.Label>剧场版</Form.Label><Form.Control defaultValue={oldValue.movies} id=\"movies\" type=\"input\" /></Col>\n        <Col><Form.Label>单集片长</Form.Label><Form.Control defaultValue={oldValue.episode_length} id=\"episode_length\" type=\"input\" /></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Label>简介</Form.Label>\n      <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>剧情评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"story\" type=\"input\" /></Col>\n        <Col><Form.Label>作画评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"illustration\" type=\"input\" /></Col>\n        <Col><Form.Label>音乐评分</Form.Label><Form.Control defaultValue={oldValue.music} id=\"music\" type=\"input\" /></Col>\n        <Col><Form.Label>情怀评分</Form.Label><Form.Control defaultValue={oldValue.passion} id=\"passion\" type=\"input\" /></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>开始观看日期 <span className=\"clickable\" onClick={() => handleFillTodayDate(true, false)}>(今日日期)</span></Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\" /></Col>\n        <Col><Form.Label>结束观看日期 <span className=\"clickable\" onClick={() => handleFillTodayDate(false, true)}>(今日日期)</span></Form.Label><Form.Control defaultValue={oldValue.end_date} id=\"end_date\" type=\"input\" /></Col>\n        <Col><Form.Label>观看次数</Form.Label><Form.Control defaultValue={oldValue.times_watched} id=\"times_watched\" type=\"input\" /></Col>\n      </Form.Row>\n    </Form.Group>\n    <Button className=\"pink-button\" type=\"submit\">\n      提交\n    </Button>\n\n  </Form>\n}\n","// return the user data from the session storage\nexport const getUser = () => {\n  const userStr = sessionStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  else return null;\n}\n \n// return the token from the session storage\nexport const getToken = () => {\n  return sessionStorage.getItem('token') || null;\n}\n \n// remove the token and user from the session storage\nexport const removeUserSession = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n}\n \n// set the token and user from the session storage\nexport const setUserSession = (user, token) => {\n  sessionStorage.setItem('token', token);\n  sessionStorage.setItem('user', JSON.stringify(user));\n}\n\nexport function formatEpisodes(tv_episodes, movies) {\n  if (tv_episodes === undefined || movies === undefined) {\n    return \"\";\n  } else if (tv_episodes === 0) {\n    return `剧场版×${movies}`;\n  } else if (movies === 0) {\n    return `${tv_episodes}集`;\n  } else {\n    return `${tv_episodes}集+剧场版×${movies}`;\n  }\n}\n\nexport function formatDate(start_date, end_date) {\n  if (!start_date.isValid()) {\n    return \"\"\n  } else if (!end_date.isValid()) {\n    return `${start_date.format('MM/DD/YY')}至今`;\n  } else {\n    return `${start_date.format('MM/DD/YY')} 至 ${end_date.format('MM/DD/YY')}`;\n  }\n}\n\nexport function formatTime(time) {\n  if (isNaN(time)) {\n    return \"-\";\n  }\n  if (time >= 60) {\n    return Math.round(time / 60 * 10) / 10 + \" 小时\";\n  } else {\n    return Math.round(time * 10) / 10 + \" 分钟\";\n  }\n}\n\nexport function calculateDailyTime(row) {\n  const days = row.end_date.diff(row.start_date, 'days') + 1;\n  const episode_length = row.episode_length === undefined || row.episode_length === 0 ? 24 : row.episode_length;\n  const totalTime = row.tv_episodes * episode_length + row.movies * 90;\n  return totalTime / days;\n}\n\nexport function translate(word) {\n  switch(word) {\n    case '名称':\n      return 'name';\n    case '集数':\n    case '预计集数':\n      return 'tv_episodes';\n    case '状态':\n      return 'status';\n    case '分类':\n      return 'genre';\n    case '剧情':\n      return 'story';\n    case '作画':\n      return 'illustration';\n    case '音乐':\n      return 'music';\n    case '情怀':\n      return 'passion';\n    case '评分':\n      return 'rating';\n    case '首次观看日期':\n      return 'end_date';\n    case '观看次数':\n      return 'times_watched';\n    case '年份':\n      return 'year';\n    case '豆瓣评分':\n      return 'douban';\n    case '日均时长':\n      return 'daily_time';\n    case '排名':\n      return 'ranking';\n    case '季度':\n      return 'season';\n    case '开始放送日期':\n      return 'start_date';\n    case '更新日':\n      return 'next_episode_day';\n    default:\n      return 'unknown';\n  }\n}\n\nexport function sortList(rawList, sortedCol) {\n  return rawList.slice().sort((a, b) => {\n    const aQuantity = sortedCol === \"daily_time\" ? calculateDailyTime(a) : a[sortedCol];\n    const bQuantity = sortedCol === \"daily_time\" ? calculateDailyTime(b) : b[sortedCol];\n    if (sortedCol === \"start_date\" && typeof sortedCol !== \"string\") {\n      if (!aQuantity.isValid()) {\n        return 1;\n      } else if (!bQuantity.isValid()) {\n        return -1;\n      } else {\n        return compare(aQuantity, bQuantity);\n      }\n    } else {\n      return compare(aQuantity, bQuantity);\n    }\n  });\n}\n\nfunction compare(a, b) {\n  if (a > b) {\n    return -1;\n  } else if (a < b) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nexport function parseDoubanPage(pageSrc) {\n  const name = pageSrc.split(\"\\n\")[5].split(\" \")[0];\n  const year = pageSrc.split(\"首播: \")[1].split(\"-\")[0];\n  const douban = pageSrc.split(\"豆瓣评分\")[1].split(\"\\n\")[1];\n  let tv_episodes = 12;\n  try {\n    tv_episodes = parseInt(pageSrc.split(\"集数: \")[1].split(\"-\")[0]);\n  } catch (error) {\n    console.error(error);\n  }\n  let episode_length = 24;\n  try {\n    episode_length = parseInt(pageSrc.split(\"单集片长: \")[1].split(\"-\")[0]);\n  } catch (error) {\n    console.error(error);\n  }\n  const description = pageSrc.split(\"的剧情简介 · · · · · ·\")[1].split(\"\\n\\n\")[1].trim();\n  return {\n    name: name,\n    year: year,\n    douban: douban,\n    tv_episodes: isNaN(tv_episodes) ? 0 : tv_episodes,\n    episode_length: isNaN(episode_length) ? 12: episode_length,\n    description: description,\n  }\n}\n\nexport function getSeason() {\n  const d = new Date();\n  const year = d.getFullYear();\n  const month = Math.floor(d.getMonth()/3) * 3 + 1;\n  const curSeason = year + \"年\" + month + \"月\";\n  let preSeason = year + \"年\" + (month - 3) + \"月\";\n  let nextSeason = year + \"年\" + (month + 3) + \"月\";\n  if (month === 1) {\n    preSeason = (year - 1) + \"年10月\";\n  }\n  if (month === 10) {\n    nextSeason = (year + 1) + \"年1月\";\n  }\n  return [preSeason, curSeason, nextSeason];\n}\n\nexport function getLatestRankings(newAnimes, currentSeason) {\n  let rankings = {};\n  newAnimes.forEach(newAnime => {\n    const currentSeasonRankings = newAnime.seasons_ranking[currentSeason];\n    const dates = Object.keys(currentSeasonRankings);\n    const latestRank = currentSeasonRankings[dates.sort()[dates.length - 1]];\n    rankings[newAnime.name] = latestRank;\n  });\n  return rankings;\n}\n\nexport function compareSeason(season1, season2) {\n  const year1 = parseInt(season1.split(\"年\")[0]);\n  const month1 = parseInt(season1.split(\"年\")[1].replace(\"日\", \"\"));\n  const year2 = parseInt(season2.split(\"年\")[0]);\n  const month2 = parseInt(season2.split(\"年\")[1].replace(\"日\", \"\"));\n  if (year1 === year2) {\n    return month1 - month2;\n  } else {\n    return year1 - year2;\n  }\n}\n\n// place an item in list at startIndex to endIndex\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};","import React, { useState, useEffect } from 'react';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport SortHeader from './SortHeader';\nimport FilterHeader from './FilterHeader';\nimport Description from './Description';\nimport AnimeModal from './AnimeModal';\nimport { sortList, formatEpisodes, formatDate, translate, calculateDailyTime, formatTime, parseDoubanPage } from \"../utils/utils\";\nimport '../App.css';\nimport './AnimeList.css';\n\nfunction AnimeList(props) {\n\n  const { authenticated } = useAuthenticationContext();\n  \n  const { ratings } = React.useContext(AnimeDataContext);\n\n  const watchedHeaders = ['序号', '名称', '集数', '分类', '剧情', '作画', '音乐', '情怀', '评分', '首次观看日期', '日均时长', ''];\n  const wantToWatchHeaders = ['序号', '名称', '集数', '分类', '年份', '豆瓣评分', '简介', ''];\n  const [activeDescription, setActiveDescription] = useState(null);\n  const [showDescription, setShowDescription] = useState(false);\n  const [showAnimeModal, setShowAnimeModal] = useState(false);\n  const [showAnimeModalAuto, setShowAnimeModalAuto] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [submitNewAnimeAuto, setSubmitNewAnimeAuto] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayListStatus, setDisplayListStatus] = useState(\"已看\");\n  const [displayList, setDisplayList] = useState(ratings);\n  const [tableHeaders, setTableHeaders] = useState(watchedHeaders);\n  const [filterList, setFilterList] = useState({});\n  const [sortedCol, setSortedCol] = useState(\"end_date\");\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n\n  useEffect(() => {\n    setFilterList([]);\n    setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"end_date\"));\n  }, [props.isLoading, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      if (displayListStatus === '在看' && sortedCol === \"end_date\") {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"start_date\"));\n      } else {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), sortedCol));\n      }\n      setSortedCol(null);\n    } else {\n      if (displayListStatus === '在看' ) {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"start_date\"));\n      }\n    }\n  }, [sortedCol, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (filterList.length !== 0) {\n      for (const [key, value] of Object.entries(filterList)) {\n        setDisplayList(ratings.filter((item) => {\n          return item[key].includes(value) && item.status === displayListStatus;\n        }));\n      }\n      setFilterList([]);\n    }\n  }, [ratings, filterList, displayListStatus]);\n\n  const changeStatus = (e) => {\n    const newStatus = e.target.innerHTML;\n    if (newStatus === '想看') {\n      setTableHeaders(wantToWatchHeaders);\n    } else {\n      setTableHeaders(watchedHeaders);\n    }\n    setDisplayListStatus(newStatus);\n  }\n\n  const formatDescription = (description) => {\n    if (description !== null && description !== undefined) {\n      return description.substring(0, 20) + '......';\n    }\n  }\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      番剧评分加载失败！\n    </Alert>;\n  } else {\n    return (<div className=\"main-element\">\n      <Modal centered size='lg' show={showDescription} onHide={() => setShowDescription(false)}>\n        <Modal.Header>\n          <Modal.Title>简介</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Description description={activeDescription}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button className=\"pink-button\" onClick={() => setShowDescription(false)}>\n            关闭\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModal} onHide={() => setShowAnimeModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新番剧\" : \"编辑番剧\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              if (submitNewAnime) {\n                props.onAnimeSubmit(event, null, true);\n              } else if (submitNewAnimeAuto) {\n                props.onAnimeSubmit(event, null, true);\n              } else {\n                props.onAnimeSubmit(event, id, false);\n              }\n              setShowAnimeModal(false);\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModalAuto} onHide={() => setShowAnimeModalAuto(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>添加新番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={(event) => {\n            event.preventDefault();\n            const info = parseDoubanPage(event.target.elements.html.value);\n            setEditAnimeOldValue({\n              name: info.name,\n              year: info.year,\n              douban: info.douban,\n              tv_episodes: info.tv_episodes,\n              movies: 0,\n              episode_length: info.episode_length,\n              status: \"想看\",\n              genre: \"\",\n              description: info.description,\n              story: 0,\n              illustration: 0,\n              music: 0,\n              passion: 0,\n              start_date: null,\n              end_date: null,\n              times_watched: 0,\n            });\n            setSubmitNewAnimeAuto(true);\n            setShowAnimeModalAuto(false);\n            setActiveId(null);\n            setShowAnimeModal(true);\n          }}>\n            <Form.Group>\n              <Form.Label>豆瓣页面源</Form.Label>\n              <Form.Control id=\"html\" as=\"textarea\" rows=\"10\" />\n            </Form.Group>\n            <Button className=\"pink-button\" type=\"submit\">\n              提交\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteAnime(animeToDelete.id, \"Ratings\");\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          <Button className=\"pink-button\" onClick={changeStatus}>已看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>在看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>想看</Button>\n        </div>\n        <div>\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModal(true);\n            setSubmitNewAnime(true);\n          }}>手动添加</Button> : <></>}\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModalAuto(true);\n            setSubmitNewAnime(true);\n          }}>自动添加</Button> : <></>}\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '名称' || header === '分类') {\n                  return <FilterHeader key={header} header={header}\n                    filter={(e) => {\n                      let newFilterList = {};\n                      for (let item in filterList) {\n                        newFilterList[item] = filterList[item];\n                      }\n                      newFilterList[translate(header)] = e.target.value;\n                      setFilterList(newFilterList);\n                    }}\n                    clearFilter={() => {\n                      setFilterList([]);\n                      setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"end_date\"));\n                    }}\n                  />;\n                } else if (header === '序号') {\n                  return <th key={header} >序号</th>\n                } else if (header !== ''){\n                  return <SortHeader key={header} header={header} sort={() => setSortedCol(translate(header))}/>;\n                } else {\n                  return <th key={header} ></th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map((row, idx) =>\n                <tr key={row.name}>\n                  <td>{idx + 1}</td>\n                  <td className='anime-name clickable' onClick={(e) => {\n                    setActiveDescription(\n                      {\n                        name: row.name,\n                        douban: row.douban,\n                        year: row.year,\n                        genre: row.genre,\n                        episodes: row.tv_episodes,\n                        episode_length: row.episode_length,\n                        description: row.description,\n                      }\n                    );\n                    setShowDescription(true);\n                  }}>{row.name}</td>\n                  <td>{formatEpisodes(row.tv_episodes, row.movies)}</td>\n                  <td>{row.genre}</td>\n                  <td>{displayListStatus === '想看' ? row.year : row.story}</td>\n                  <td>{displayListStatus === '想看' ? row.douban : row.illustration}</td>\n                  <td>{displayListStatus === '想看' ? formatDescription(row.description) : row.music}</td>\n                  {displayListStatus === '想看' ? \"\" : <td>{row.passion}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{row.rating}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatDate(row.start_date, row.end_date)}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatTime(calculateDailyTime(row))}</td>}\n                  <td> {authenticated ?\n                      <>\n                        <BiEditAlt className=\"clickable\" onClick={() => {\n                          setActiveId(row.id);\n                          setEditAnimeOldValue({\n                            name: row.name,\n                            year: row.year,\n                            douban: row.douban,\n                            tv_episodes: row.tv_episodes,\n                            movies: row.movies,\n                            episode_length: row.episode_length,\n                            status: row.status,\n                            genre: row.genre,\n                            description: row.description,\n                            story: row.story,\n                            illustration: row.illustration,\n                            music: row.music,\n                            passion: row.passion,\n                            start_date: row.start_date.format('YYYY-MM-DD'),\n                            end_date: row.end_date.format('YYYY-MM-DD'),\n                            times_watched: row.times_watched,\n                          });\n                          setSubmitNewAnime(false);\n                          setShowAnimeModal(true);\n                        }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                          setAnimeToDelete({\n                            name: row.name,\n                            id: row.id,\n                          });\n                          setShowDeleteConfirmation(true);\n                        }}/>\n                      </> : <></>\n                    }\n                    </td>\n                </tr>)\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nexport default AnimeList;","import React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./Rankings.css\";\nimport \"../App.css\";\n\nfunction DraggableRankingEntry(props) {\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    // change background colour if dragging\n    background: isDragging ? \"grey\" : \"transparent\",\n\n    // styles we need to apply on draggables\n    ...draggableStyle,\n  });\n\n  return (\n    <div className=\"drag-item-container\">\n      <Draggable\n        key={props.index}\n        draggableId={props.index.toString()}\n        index={props.index}\n      >\n        {(provided, snapshot) => (\n          <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            style={getItemStyle(\n              snapshot.isDragging,\n              provided.draggableProps.style\n            )}\n            className=\"drag-item\"\n          >\n            <div className={`ranking-entry${props.index < 3 ? \"-red\" : \"\"}`}>\n              <div className={`ranking-entry-num`}><b>{props.index + 1}</b></div>\n              <div className=\"ranking-entry-name\">{props.anime}</div>\n            </div>\n          </div>\n        )}\n      </Draggable>\n    </div>\n  );\n}\n\nexport default function Rankings(props) {\n  return (\n    <div id=\"rankings\">\n      <DragDropContext onDragEnd={props.onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              className=\"drag-list\"\n            >\n              {props.rankings.map((anime, index) => (\n                <DraggableRankingEntry anime={anime} index={index} />\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport './DailyNewAnimes.css';\n\nexport default function DailyNewAnimes(props) {\n\n  const days = [moment().subtract(1,'days'), moment(), moment().add(1, 'days')];\n\n  moment.locale('zh-cn');\n\n  return <div id=\"daily-new-animes\">\n            {days.map(day => \n              <ListGroup>\n                <ListGroup.Item variant={day.isSame(moment(), 'day') ? 'primary' : 'dark'}>{day.format('dddd[，]YYYY[年]MMMDo ')}</ListGroup.Item>\n                {props.displayList.filter(newAnime => {\n                  const startDate = moment(newAnime.start_date);\n                  return day.isAfter(startDate) && day.diff(startDate, 'days') % 7 === 0;\n                }).map(todayAnime => <ListGroup.Item key={todayAnime.name}>{todayAnime.name}</ListGroup.Item>)}\n              </ListGroup>\n            )}\n          </div>\n}","import React, { useState, useEffect } from 'react';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Alert from 'react-bootstrap/Alert';\nimport moment from 'moment';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport SortHeader from './SortHeader';\nimport AnimeModal from './AnimeModal';\nimport Rankings from './Rankings';\nimport DailyNewAnimes from './DailyNewAnimes';\nimport { getSeason, formatEpisodes, translate, sortList, getLatestRankings, reorder } from \"../utils/utils\";\nimport '../App.css';\nimport './NewAnimeList.css';\n\nfunction NewAnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  return <Form id=\"new-anime-modal\" onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Row className=\"input-row\">\n        <Col><Form.Label>季度</Form.Label><Form.Control defaultValue={oldValue.season} id=\"season\" type=\"input\"/></Col>\n        <Col><Form.Label>开始放送日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>更新日</Form.Label><Form.Control defaultValue={oldValue.next_episode_day} id=\"next_episode_day\" type=\"input\"/></Col>\n      </Form.Row>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>预计集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Group>\n      <Form.Label>简介</Form.Label>\n        <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n      </Form.Group>\n    </Form.Group>\n    <div>\n      <Button className=\"pink-button\" type=\"submit\">\n        提交\n      </Button>\n      {props.submitNewAnime ? <></> : <Button onClick={() => {\n        const formElements = document.getElementById(\"new-anime-modal\").elements;\n        props.handleRateNewAnime({\n          \"name\": formElements.name.value,\n          \"tv_episodes\": Number(formElements.tv_episodes.value),\n          \"genre\": formElements.genre.value,\n          \"description\": formElements.description.value,\n          \"start_date\": formElements.start_date.value,\n          \"status\": formElements.status.value\n        });\n      }}>已追完</Button>}\n    </div>\n\n  </Form>\n}\n\nfunction NewAnimeList(props) {\n\n  const { authenticated } = useAuthenticationContext();\n  const { newAnimes } = React.useContext(AnimeDataContext);\n\n  const tableHeaders = ['排名', '名称', '分类', '季度', '开始放送日期', '更新日', '预计集数', '状态', '']\n\n  const [seasons, setSeasons] = useState([])\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showRateModal, setShowRateModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [showRankings, setShowRankings] = useState(false);\n  const [showToday, setShowToday] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [localRankings, setLocalRankings] = useState({});\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayList, setDisplayList] = useState(newAnimes);\n  const [displayListSeason, setDisplayListSeason] = useState(null);\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n  const [sortedCol, setSortedCol] = useState(null);\n  const [rateAnimePartialInfo, setRateAnimePartialInfo] = useState(null);\n\n  useEffect(() => {setSortedCol(\"ranking\")}, []);\n\n  const handleRateNewAnime = (partialInfo) => {\n    partialInfo.status = \"已看\";\n    setRateAnimePartialInfo(partialInfo);\n    setShowAddModal(false);\n    setShowRateModal(true);\n  }\n\n  const changeSeason = (e) => {\n    setDisplayListSeason(e.target.innerHTML);\n  }\n\n  const sortAnimesByRankings = (animes, rankings) => {\n    animes.sort((a, b) => {\n      if (rankings[a.name] > rankings[b.name]) return 1;\n      if (rankings[a.name] < rankings[b.name]) return -1;\n      return 0;\n    })\n  }\n\n  const rankingsDictToArray = (rankings) => {\n    const rankingsArray = new Array(Object.entries(rankings).length);\n    for (const [anime, ranking] of Object.entries(rankings)) {\n      rankingsArray[ranking - 1] = anime;\n    }\n    return rankingsArray;\n  }\n\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n    const localRankingsArray = rankingsDictToArray(localRankings);\n    const newRankingsArray = reorder(\n      localRankingsArray,\n      result.source.index,\n      result.destination.index\n    );\n    const newRankings = {};\n    newRankingsArray.forEach((anime, ranking) => newRankings[anime] = ranking + 1);\n    setLocalRankings(newRankings);\n  };\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      const filteredNewAnimes = newAnimes.filter((newAnime) => newAnime.season.includes(displayListSeason));\n      if (sortedCol === 'ranking') {\n        sortAnimesByRankings(filteredNewAnimes, rankings);\n        setDisplayList(filteredNewAnimes);\n      } else {\n        setDisplayList(sortList(filteredNewAnimes, sortedCol));\n      }\n      setSortedCol(null);\n    }\n  }, [sortedCol, newAnimes, displayListSeason, rankings]);\n\n  useEffect(() => {\n    const seasons = getSeason();\n    setSeasons(seasons);\n    setDisplayListSeason(seasons[1]);\n  }, [])\n\n  useEffect(() => {\n    const filteredNewAnimes = newAnimes.filter((newAnime) => newAnime.season.includes(displayListSeason));\n    const rankings = getLatestRankings(filteredNewAnimes, displayListSeason);\n    sortAnimesByRankings(filteredNewAnimes, rankings);\n    setDisplayList(filteredNewAnimes);\n    setRankings(rankings);\n    setLocalRankings(rankings);\n  }, [props.isLoading, newAnimes, displayListSeason])\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      追番列表加载失败！\n    </Alert>;\n  } else {\n    return (<div className=\"main-element\">\n      <Modal centered size='lg' show={showAddModal} onHide={() => setShowAddModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新追番\" : \"编辑追番\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <NewAnimeModal\n            submitNewAnime={submitNewAnime}\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              if (submitNewAnime) {\n                const newRanking = Math.max(...Object.values(getLatestRankings(displayList, displayListSeason))) + 1;\n                props.onNewAnimeSubmit(event, null, true, newRanking);\n              } else {\n                props.onNewAnimeSubmit(event, id, false);\n              }\n              setShowAddModal(false);\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n            handleRateNewAnime={handleRateNewAnime}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size='lg' show={showRateModal} onHide={() => setShowRateModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>评价番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              props.onAnimeSubmit(event, id, true);\n              setShowRateModal(false);\n            }}\n            oldValue={rateAnimePartialInfo}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteNewAnime(animeToDelete.id, \"NewAnimes\");\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showRankings} onHide={() => setShowRankings(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>番剧排名</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Rankings rankings={rankingsDictToArray(localRankings)} onDragEnd={onDragEnd}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            const updatedIds = [];\n            const newRankings = {};\n            const dateString = moment().format(\"YYYY-MM-DD\");\n            displayList.forEach(row => {\n              updatedIds.push(row.id);\n              const newRanking = Object.assign({}, row.seasons_ranking);\n              newRanking[displayListSeason][dateString] = localRankings[row.name];\n              newRankings[row.id] = newRanking;\n            })\n            props.updateNewAnimesRankings(updatedIds, newRankings, displayListSeason);\n            setShowRankings(false)\n          }}>提交</Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showToday} onHide={() => setShowToday(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>近期更新</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <DailyNewAnimes displayList={displayList}/>\n        </Modal.Body>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          {seasons.map(season => <Button key={season} className=\"pink-button\" onClick={changeSeason}>\n            {season}\n          </Button>)}\n        </div>\n        <div>\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setSubmitNewAnime(true);\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAddModal(true);\n          }}>添加追番</Button> : <></>}\n          {authenticated ? <Button className=\"pink-button\" onClick={() => setShowRankings(true)}>排名</Button> : <></>}\n          <Button className=\"pink-button\" onClick={() => setShowToday(true)}>近期更新</Button>\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '更新日' || header === '排名' || header === '开始放送日期'){\n                  return <SortHeader key={header} header={header} sort={() => setSortedCol(translate(header))}/>;\n                } else {\n                  return <th key={header} >{header}</th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map(row => \n                <tr key={row.name}>\n                  <td>{rankings[row.name]}</td>\n                  <td className='anime-name'>{row.name}</td>\n                  <td>{row.genre}</td>\n                  <td>{row.season}</td>\n                  <td>{row.start_date}</td>\n                  <td>{row.next_episode_day}</td>\n                  <td>{formatEpisodes(row.tv_episodes, 0)}</td>\n                  <td>{row.status}</td>\n                  <td> {authenticated ?\n                    <>\n                      <BiEditAlt className=\"clickable\" onClick={() => {\n                        setActiveId(row.id);\n                        setEditAnimeOldValue({\n                          name: row.name,\n                          tv_episodes: row.tv_episodes,\n                          genre: row.genre,\n                          description: row.description,\n                          start_date: row.start_date,\n                          next_episode_day: row.next_episode_day,\n                          season: row.season,\n                          status: row.status\n                        });\n                        setSubmitNewAnime(false);\n                        setShowAddModal(true);\n                      }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                        setAnimeToDelete({\n                          name: row.name,\n                          id: row.id,\n                        });\n                        setShowDeleteConfirmation(true);\n                      }}/>\n                    </> : <></>\n                  }</td>\n                </tr>  \n              )\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nexport default NewAnimeList;","import React, { useState, useContext, createContext } from 'react';\nimport moment from 'moment';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport { FiPlusCircle } from \"react-icons/fi\";\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport { formatTime } from \"../utils/utils\";\nimport './MonthlySummary.css';\nimport '../App.css';\n\nconst QuoteModificationContext = createContext(null);\n\nfunction useQuoteModificationContext() {\n  return useContext(QuoteModificationContext);\n}\n\nfunction Quote(props) {\n  const { authenticated } = useAuthenticationContext();\n  const { setQuoteToEdit, setShowQuoteModal, setIsNewQuote, setActiveQuoteId, setShowDeleteConfirmation } = useQuoteModificationContext();\n  return <blockquote>\n    <div className=\"quote-content\">{props.quote.content}</div>\n    <div className=\"quote-translation\">{props.quote.translation}</div>\n    <cite>\n      {props.quote.person + \"《\" + props.quote.bangumi + \"》\"}\n      {authenticated ? <BiEditAlt className=\"icon clickable\"\n        onClick={() => {\n          setIsNewQuote(false);\n          setQuoteToEdit(props.quote);\n          setShowQuoteModal(true);\n        }}/> : <></>}\n      {authenticated ? <BiTrash className=\"icon clickable\"\n        onClick={() => {\n          setActiveQuoteId(props.quote.id);\n          setShowDeleteConfirmation(true);\n        }}/> : <></>}\n    </cite>\n  </blockquote>\n}\n\nfunction Summary(props) {\n  const { authenticated } = useAuthenticationContext();\n  const { setIsNewQuote, setQuoteToEdit, addNewQuote } = useQuoteModificationContext();\n  return <div className=\"summary\">\n    <div className=\"summary-title\">\n      <div className=\"summary-info\">\n        <div className=\"year-month\">\n          <div className=\"month\">{moment(props.month).format(\"MM\")}</div>\n          <div className=\"year\">{moment(props.month).format(\"YYYY\")}</div>\n          <div className=\"yue\">月</div>\n        </div>\n        <div className=\"summary-info-pieces\">\n          <div className=\"summary-info-piece\">{\"番剧总数：\" + props.summary.bangumi_num}</div>\n          <div className=\"summary-info-piece\">{\"总集数：\" + props.summary.tv_episode_num}</div>\n          <div className=\"summary-info-piece\">{\"总时长：\" + formatTime(props.summary.total_time)}</div>\n          <div className=\"summary-info-piece\">{\"每日时长：\" + formatTime(props.summary.total_time / moment(props.month).daysInMonth())}</div>\n        </div>\n      </div>\n      <div className=\"summary-quotes\">\n        {\n          props.summary.quotes.length !== 0 ?\n          <>\n            {props.summary.quotes.map((quote, index) => <Quote key={index} quote={quote} setActiveQuoteId={props.setActiveQuoteId}/>)}\n            {authenticated ? <FiPlusCircle \n              className=\"clickable add-more-quote-button\"\n              onClick={() => {\n                addNewQuote(props.month);\n                setIsNewQuote(true);\n                setQuoteToEdit({});\n              }}\n            /> : <></>}\n          </> :\n          (authenticated ? <Button \n            className=\"pink-button add-quote-button\"\n            onClick={() => {\n              addNewQuote(props.month);\n              setQuoteToEdit({});\n            }}\n          >\n          添加语录\n          </Button> : <div className=\"add-quote-button\">暂无语录</div>)\n        }\n      </div>\n    </div>\n    <div className=\"summary-names\">\n      {props.summary.bangumis.map((bangumi_name, index) => \n        <div key={index} className=\"bangumi-name\">{\"• \" + bangumi_name}</div>)}\n    </div>\n  </div>\n}\n\nfunction MonthlySummary(props) {\n  const { monthlySummaries } = useContext(AnimeDataContext);\n\n  const [isNewQuote, setIsNewQuote] = useState(true);\n  const [showQuoteModal, setShowQuoteModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [activeQuoteId, setActiveQuoteId] = useState();\n  const [quoteToEdit, setQuoteToEdit] = useState({});\n  const [activeMonth, setActiveMonth] = useState(\"\");\n\n  const addNewQuote = (month) => {\n    setShowQuoteModal(true);\n    setActiveMonth(month);\n  };\n\n  const sortMonthlySummaries = (monthlySummaries) => {\n    const res = [];\n    for (const [month, summary] of Object.entries(monthlySummaries)) {\n      res.push([month, summary]);\n    }\n    res.sort((a, b) => a[0].localeCompare(b[0]) * -1);\n    return res;\n  }\n\n  return <div className=\"summaries\">\n      <Modal centered size='lg' show={showQuoteModal} onHide={() => setShowQuoteModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{isNewQuote ? \"添加新语录\" : \"编辑语录\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <Form onSubmit={(event) => {\n            if (isNewQuote) {\n              event.preventDefault();\n              props.onQuoteSubmit(event, activeMonth, quoteToEdit.id, true);\n            } else {\n              event.preventDefault();\n              props.onQuoteSubmit(event, quoteToEdit.month, quoteToEdit.id, false)\n            }\n            setShowQuoteModal(false);\n          }}>\n          <Form.Group controlId=\"content\">\n            <Form.Label>语录原文</Form.Label>\n            <Form.Control defaultValue={quoteToEdit.content} type=\"input\" as=\"textarea\" rows=\"3\"/>\n          </Form.Group>\n          <Form.Group controlId=\"translation\">\n            <Form.Label>中文翻译</Form.Label>\n            <Form.Control defaultValue={quoteToEdit.translation} type=\"input\" as=\"textarea\" rows=\"3\"/>\n          </Form.Group>\n          <Form.Row className=\"input-row\">\n            <Col><Form.Label>人物</Form.Label><Form.Control defaultValue={quoteToEdit.person} id=\"person\" type=\"input\"/></Col>\n            <Col><Form.Label>作品</Form.Label><Form.Control defaultValue={quoteToEdit.bangumi} id=\"bangumi\" type=\"input\"/></Col>\n          </Form.Row>\n          <Button className=\"pink-button\" type=\"submit\">\n            提交\n          </Button>\n        </Form>\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除语录</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除此语录吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setActiveQuoteId(null);\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteQuote(activeQuoteId);\n            setActiveQuoteId(null);\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n    {\n      sortMonthlySummaries(monthlySummaries).map((entry, index) => \n      <QuoteModificationContext.Provider value={{ setIsNewQuote, setShowQuoteModal, addNewQuote, setQuoteToEdit, setActiveQuoteId, setShowDeleteConfirmation }} key={index} >\n        <Summary month={entry[0]} summary={entry[1]} />\n      </QuoteModificationContext.Provider>)\n    }\n  </div>;\n}\n\nexport default MonthlySummary;","import React, { useState, useContext, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport { compareSeason } from '../utils/utils';\nimport '../App.css';\nimport './SeasonalSummary.css';\n\nexport default function SeasonalSummary(props) {\n  const { newAnimes } = useContext(AnimeDataContext);\n\n  const [summaryData, setSummaryData] = useState([]);\n\n\n  const formatRankingData = (data) => {\n    const res = [];\n    for (const [date, ranking] of Object.entries(data)) {\n      res.push([new Date(date).valueOf(), ranking]);\n    }\n    return res;\n  }\n  \n  useEffect(() => {\n    const tempData = {};\n    newAnimes.forEach(newAnime => {\n      const rankings = newAnime[\"seasons_ranking\"];\n\n      for (const [season, seasonRankings] of Object.entries(rankings)) {\n        if (tempData[season] === undefined) {\n          tempData[season] = {\n            chart: {\n              height: 600,\n              borderRadius: 10\n            },\n            title: {\n              text: season\n            },\n            xAxis: {\n              type: 'datetime',\n              labels: {\n                format: '{value:%Y-%b-%e}'\n              },\n              title: {\n                text: '日期'\n              }\n            },\n            yAxis: {\n              title: {\n                text: '排名'\n              },\n              tickInterval: 1,\n              min: 1,\n              reversed: true\n            },\n            series: []\n          };\n        }\n        tempData[season].series.push({\n          name: newAnime.name,\n          data: formatRankingData(seasonRankings)\n        })\n      }\n    });\n    const newSummaryData = Array.from(Object.values(tempData));\n    newSummaryData.sort((e1, e2) => { return -compareSeason(e1.title.text, e2.title.text)});\n    setSummaryData(newSummaryData);\n  }, [newAnimes]);\n\n  return <div className=\"summaries seasonal-summaries\">\n    {summaryData.map((data, index) =>\n      <div className=\"summary-chart\" key={index}>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={data}\n        />\n      </div>\n    )}\n  </div>\n}","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport \"./Login.css\";\nimport \"../App.css\";\n\nexport default function Login() {\n  const { username, password, setAuthenticating, setUsername, setPassword, handleLogin } = useAuthenticationContext();\n\n  const validateForm = () => {\n    return username.length > 0 && password.length > 0;\n  }\n\n  return (\n    <div className=\"Login\">\n      <Form onSubmit={handleLogin}>\n        <Form.Group size=\"lg\" controlId=\"username\">\n          <Form.Label>用户名</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"password\">\n          <Form.Label>密码</Form.Label>\n          <Form.Control\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"button-group\">\n          <Button className=\"pink-button\" size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n            登陆\n          </Button>\n          <Button className=\"pink-button\" size=\"lg\" type=\"submit\" onClick={() => setAuthenticating(false)}>\n            取消\n          </Button>\n        </div>\n      </Form>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport * as Env from \"./environments\";\nimport Navivation from './components/Navigation';\nimport AnimeDataContext from './context/AnimeDataContext';\nimport AnimeList from './components/AnimeList';\nimport NewAnimeList from './components/NewAnimeList';\nimport MonthlySummary from './components/MonthlySummary';\nimport SeasonalSummary from './components/SeasonalSummary';\nimport Login from \"./components/Login\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { AuthenticationContext } from \"./context/AuthenticationContext\";\nimport { sortList, getUser, getToken, setUserSession, removeUserSession } from \"./utils/utils\";\nimport Parse from 'parse';\nimport moment from 'moment';\nimport './App.css';\n\nParse.initialize(Env.APPLICATION_ID, Env.JAVASCRIPT_KEY);\nParse.serverURL = Env.SERVER_URL;\n\nfunction App() {\n  // authentication related states\n  const [authenticated, setAuthenticated] = useState(false);\n  const [authenticating, setAuthenticating] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(getUser());\n  const [token, setToken] = useState(getToken());\n  // page status related states\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [activePage, setActivePage] = useState(\"AnimeList\")\n\n  // data related states\n  const [ratings, setRatings] = useState([]);\n  const [newAnimes, setNewAnimes] = useState([]);\n  const [summaries, setSummaries] = useState({});\n  const [quotes, setQuotes] = useState([]);\n\n  const fetchRatings = async () => {\n    setIsLoading(true);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for ratings\");\n      if (typeof document !== 'undefined'){\n        const ratings = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            year: result.get(\"year\"),\n            douban: result.get(\"douban\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            movies: result.get(\"movies\"),\n            episode_length: result.get(\"episode_length\"),\n            status: result.get(\"status\"),\n            genre: result.get(\"genre\"),\n            description: result.get(\"description\"),\n            story: result.get(\"story\"),\n            illustration: result.get(\"illustration\"),\n            music: result.get(\"music\"),\n            passion: result.get(\"passion\"),\n            rating: Number((result.get(\"story\") + result.get(\"illustration\") + result.get(\"music\") + result.get(\"passion\")).toFixed(1)),\n            start_date: moment(result.get(\"start_date\"), 'YYYY-MM-DD'),\n            end_date: moment(result.get(\"end_date\"), 'YYYY-MM-DD'),\n            times_watched: result.get(\"times_watched\"),\n          }}\n        );\n        setRatings(sortList(ratings, \"start_date\"));\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      console.error('Error while fetching ratings', error);\n    });\n  };\n\n  const fetchQuotes = async () => {\n    const quotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(quotesObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for quotes\");\n      if (typeof document !== 'undefined'){\n        const quotes = results.map((result) => {\n          return {\n            id: result.id,\n            month: result.get(\"month\"),\n            content: result.get(\"content\"),\n            translation: result.get(\"translation\"),\n            person: result.get(\"person\"),\n            bangumi: result.get(\"bangumi\"),\n          }}\n        );\n        setQuotes(quotes);\n      }\n    }, (error) => {\n      setLoadError(true);\n      console.error('Error while fetching quotes', error);\n    });\n  }\n\n  const fetchNewAnimes = async () => {\n    setIsLoading(true);\n    const quotesObj = Parse.Object.extend('NewAnimes');\n    const query = new Parse.Query(quotesObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for new animes\");\n      if (typeof document !== 'undefined'){\n        const newAnimes = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            genre: result.get(\"genre\"),\n            seasons_ranking: result.get(\"seasons_ranking\"),\n            start_date: result.get(\"start_date\"),\n            next_episode_day: result.get(\"next_episode_day\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            description: result.get(\"description\"),\n            season: result.get(\"season\"),\n            status: result.get(\"status\"),\n          }}\n        );\n        setNewAnimes(newAnimes);\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      console.error('Error while fetching new animes', error);\n    });\n  }\n\n  const submitNewEntry = async (newEntry, databaseName) => {\n    const DataObject = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(DataObject);\n    query.equalTo(\"name\", newEntry.name);\n    const results = await query.find();\n    if (results.length > 0) {\n      alert(\"番剧《\" + newEntry.name + \"》已存在！请勿重复添加番剧！\")\n    } else {\n      const newObj = new DataObject();\n      for (const [key, value] of Object.entries(newEntry)) {\n        newObj.set(key, value)\n      }\n      newObj.save().then(\n        (result) => {\n          alert(\"已提交番剧信息！\");\n          if (databaseName === \"Ratings\") {\n            fetchRatings();\n          } else if (databaseName === \"NewAnimes\") {\n            fetchNewAnimes();\n          }\n        },\n        (error) => {\n          alert(\"更新失败，请稍后重试。\");\n        }\n      );\n    }\n  };\n\n  const submitNewQuote = async (newQuote) => {\n    const QuotesObj = Parse.Object.extend('Quotes');\n    const newQuotesObj = new QuotesObj();\n    for (const [key, value] of Object.entries(newQuote)) {\n      newQuotesObj.set(key, value)\n    }\n    newQuotesObj.save().then(\n      (result) => {\n        alert(\"已添加语录！\");\n        fetchQuotes();\n      },\n      (error) => {\n        alert(\"添加失败，请稍后重试。\");\n      }\n    );\n  };\n\n  const updateEntry = async (id, newEntry, databaseName) => {\n    const obj = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(obj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newEntry)) {\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        alert(\"已更新番剧信息！\");\n        if (databaseName === \"Ratings\") {\n          fetchRatings();\n        } else if (databaseName === \"NewAnimes\") {\n          fetchNewAnimes();\n        }\n      }, (error) => {\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n  const updateQuote = async (id, newQuote) => {\n    const QuotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(QuotesObj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newQuote)) {\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        alert(\"已更新语录！\");\n        fetchQuotes();\n      }, (error) => {\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n\n  const updateNewAnimesRankings = async (ids, newRankings, season) => {\n    const obj = Parse.Object.extend(\"NewAnimes\");\n    const query = new Parse.Query(obj);\n    query.containedIn(\"objectId\", ids);\n    query.find().then((results) => {\n      results.forEach((result) => {\n        result.set(\"seasons_ranking\", newRankings[result.id]);\n      })\n      Parse.Object.saveAll(results).then((response) => {\n        alert(\"已更新排名！\");\n        fetchNewAnimes();\n      }, (err) => {\n        alert(\"更新排名失败。\");\n      })\n    }, (error) => {\n      alert(\"更新排名失败。\");\n    });\n  }\n\n  const deleteEntry = async (id, databaseName) => {\n    const obj = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(obj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        alert(\"已删除番剧！\");\n        if (databaseName === \"Ratings\") {\n          fetchRatings();\n        } else if (databaseName === \"NewAnimes\") {\n          fetchNewAnimes();\n        }\n      }, (error) => {\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  const deleteQuote = async (id) => {\n    const quotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(quotesObj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        alert(\"已删除语录！\");\n        fetchQuotes();\n      }, (error) => {\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchRatings();\n    fetchNewAnimes();\n    fetchQuotes();\n  }, [])\n\n  useEffect(() => {\n    const tempSummaries = {};\n    ratings.filter((rating) => rating.status === \"已看\").forEach((bangumi) => {\n      let endMonth = moment(bangumi.end_date).format('YYYY-MM');\n      if (!(endMonth in tempSummaries)) {\n        tempSummaries[endMonth] = {\n          bangumi_num: 0,\n          tv_episode_num: 0,\n          movie_num: 0,\n          total_time: 0,\n          daily_time: 0,\n          bangumis: [],\n          quotes: [],\n        };\n      }\n      tempSummaries[endMonth].bangumi_num += 1;\n      tempSummaries[endMonth].bangumis.push(bangumi.name);\n      tempSummaries[endMonth].tv_episode_num += bangumi.tv_episodes;\n      tempSummaries[endMonth].movie_num += bangumi.movies;\n      tempSummaries[endMonth].total_time += bangumi.tv_episodes * bangumi.episode_length + bangumi.movies * 90;\n    });\n    quotes.forEach((quote) => {\n      let month = moment(quote.month).format('YYYY-MM');\n      if (month in tempSummaries) {\n        tempSummaries[month].quotes.push(quote);\n      }\n    });\n    setSummaries(tempSummaries);\n  }, [ratings, quotes])\n\n  useEffect(() => {\n    if (user != null && token != null) {\n      setAuthenticated(true);\n    }\n  }, [user, token])\n\n  const handleAnimeSubmit = (event, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newRating = {\n      \"name\": formElements.name.value,\n      \"year\": formElements.year.value,\n      \"douban\": Number(formElements.douban.value),\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"movies\": Number(formElements.movies.value),\n      \"episode_length\": Number(formElements.episode_length.value),\n      \"status\": formElements.status.value,\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"story\": Number(formElements.story.value),\n      \"illustration\": Number(formElements.illustration.value),\n      \"music\": Number(formElements.music.value),\n      \"passion\": Number(formElements.passion.value),\n      \"start_date\": formElements.start_date.value,\n      \"end_date\": formElements.end_date.value,\n      \"times_watched\": Number(formElements.times_watched.value),\n    };\n    if (isNew) {\n      submitNewEntry(newRating, 'Ratings');\n    } else {\n      updateEntry(id, newRating, 'Ratings');\n    }\n  };\n\n  const handleNewAnimeSubmit = (event, id, isNew, newRanking) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newAnime = {\n      \"name\": formElements.name.value,\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"start_date\": formElements.start_date.value,\n      \"next_episode_day\": formElements.next_episode_day.value,\n      \"season\": formElements.season.value,\n      \"status\": formElements.status.value,\n    };\n    if (isNew) {\n      let latestSeason = formElements.season.value.split(\"，\");\n      latestSeason = latestSeason[latestSeason.length - 1];\n      let newSeasonsRanking = {}\n      newSeasonsRanking[latestSeason] = {}\n      newSeasonsRanking[latestSeason][moment().format(\"YYYY-MM-DD\")] = newRanking;\n      newAnime[\"seasons_ranking\"] = newSeasonsRanking;\n      submitNewEntry(newAnime, 'NewAnimes');\n    } else {\n      updateEntry(id, newAnime, 'NewAnimes');\n    }\n  };\n\n  const handleQuoteSubmit = (event, month, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newQuote = {\n      \"month\": month,\n      \"content\": formElements.content.value,\n      \"translation\": formElements.translation.value,\n      \"person\": formElements.person.value,\n      \"bangumi\": formElements.bangumi.value,\n    };\n    if (isNew) {\n      submitNewQuote(newQuote);\n    } else {\n      updateQuote(id, newQuote);\n    }\n  }\n\n  const handleLogin = (event) => {\n    event.preventDefault();\n    // Create a new instance of the user class\n    Parse.User.logIn(username, password).then((user) => {\n        setUserSession(user, user.getSessionToken());\n        alert(\"欢迎，\" + user.getUsername());\n        setAuthenticating(false);\n        setAuthenticated(true);\n    }).catch(function(error){\n        alert(error.message);\n    });\n  }\n\n  const handleSignOut = () => {\n    setUser(null);\n    setToken(null);\n    removeUserSession();\n    setAuthenticated(false);\n  }\n\n  const mainElement = (activePage) => {\n    switch (activePage) {\n      case 'AnimeList':\n        return <AnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchRatings}\n          onAnimeSubmit={handleAnimeSubmit}\n          deleteAnime={deleteEntry}\n        />;\n      case 'NewAnimeList':\n        return <NewAnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchNewAnimes}\n          onAnimeSubmit={handleAnimeSubmit}\n          onNewAnimeSubmit={handleNewAnimeSubmit}\n          updateEntry={updateEntry}\n          deleteNewAnime={deleteEntry}\n          updateNewAnimesRankings={updateNewAnimesRankings}\n        />\n      case 'MonthlySummary':\n        return <MonthlySummary\n          onQuoteSubmit={handleQuoteSubmit}\n          deleteQuote={deleteQuote}\n        />;\n      case 'SeasonalSummary':\n        return <SeasonalSummary />\n      default:\n        return <AnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchRatings}\n          onAnimeSubmit={handleAnimeSubmit}\n          deleteAnime={deleteEntry}\n        />;\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"App\">\n        <AuthenticationContext.Provider value={{ username, password, authenticated, setAuthenticating, handleLogin, handleSignOut, setUsername, setPassword }}>\n          <Navivation switchPage={setActivePage}/>\n          {authenticating ? <Login /> :\n            <AnimeDataContext.Provider value={{ ratings: ratings, monthlySummaries: summaries, newAnimes: newAnimes }}>\n              {mainElement(activePage)}\n            </AnimeDataContext.Provider>\n          }\n        </AuthenticationContext.Provider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}