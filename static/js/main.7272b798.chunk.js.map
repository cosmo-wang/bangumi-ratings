{"version":3,"sources":["environments.js","context/AuthenticationContext.jsx","components/Navigation.js","context/AnimeDataContext.jsx","components/SortHeader.js","components/FilterBox.js","components/FilterHeader.js","components/DropdownHeader.js","components/Description.js","components/AnimeModal.js","utils/utils.js","components/AnimeList.js","components/Rankings.js","components/DailyNewAnimes.js","components/NewAnimeList.js","components/MonthlySummary.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APPLICATION_ID","JAVASCRIPT_KEY","SERVER_URL","AuthenticationContext","createContext","useAuthenticationContext","useContext","UserManagement","authenticated","setAuthenticating","handleSignOut","id","className","onClick","Navigation","props","Navbar","sticky","expand","Brand","href","Nav","activeKey","window","location","pathname","Item","Link","switchPage","animeData","ratings","newAnimes","monthlySummaries","AnimeDataContext","React","SortHeader","key","header","sort","FilterBox","useState","displayBox","setDisplayBox","placeholder","type","onKeyPress","e","filter","clearFilter","FilterHeader","DropdownHeader","name","onChange","event","filterStatus","value","selected","Description","description","undefined","target","rel","douban","year","genre","episodes","episode_length","AnimeModal","oldValue","Form","onSubmit","onSubmitOrEdit","Group","controlId","Label","Control","defaultValue","Row","Col","status","tv_episodes","movies","as","rows","story","music","passion","start_date","end_date","times_watched","Button","formatEpisodes","formatTime","time","isNaN","Math","round","calculateDailyTime","row","days","diff","translate","word","sortList","rawList","sortedCol","slice","a","b","aQuantity","bQuantity","isValid","compare","AnimeList","watchedHeaders","wantToWatchHeaders","activeDescription","setActiveDescription","showDescription","setShowDescription","showAnimeModal","setShowAnimeModal","showAnimeModalAuto","setShowAnimeModalAuto","showDeleteConfirmation","setShowDeleteConfirmation","submitNewAnime","setSubmitNewAnime","submitNewAnimeAuto","setSubmitNewAnimeAuto","animeToDelete","setAnimeToDelete","activeId","setActiveId","displayListStatus","setDisplayListStatus","displayList","setDisplayList","tableHeaders","setTableHeaders","filterList","setFilterList","setSortedCol","editAnimeOldValue","setEditAnimeOldValue","useEffect","rating","isLoading","length","item","includes","Object","entries","changeStatus","newStatus","innerHTML","loadError","Alert","variant","Modal","centered","size","show","onHide","Header","Title","Body","Footer","closeButton","preventDefault","onAnimeSubmit","info","pageSrc","split","parseInt","error","console","trim","parseDoubanPage","elements","html","illustration","deleteAnime","refresh","Table","striped","borderless","hover","map","newFilterList","idx","substring","formatDescription","format","Rankings","rankings","res","anime","ranking","push","rankingsDictToArray","changeRanking","DailyNewAnimes","moment","subtract","add","locale","day","ListGroup","isSame","newAnime","startDate","isAfter","todayAnime","NewAnimeModal","season","next_episode_day","formElements","document","getElementById","handleRateNewAnime","Number","NewAnimeList","seasons","setSeasons","showAddModal","setShowAddModal","showRateModal","setShowRateModal","showRankings","setShowRankings","showToday","setShowToday","setRankings","localRankings","setLocalRankings","displayListSeason","setDisplayListSeason","rateAnimePartialInfo","setRateAnimePartialInfo","changeSeason","sortAnimesByRankings","animes","filteredNewAnimes","d","Date","getFullYear","month","floor","getMonth","preSeason","nextSeason","getSeason","currentSeason","forEach","currentSeasonRankings","seasons_ranking","dates","keys","latestRank","getLatestRankings","onNewAnimeSubmit","partialInfo","deleteNewAnime","offset","newAnimeName","currentTarget","parentElement","getElementsByClassName","innerText","originRanking","newRankings","possibleToChange","max","getMaxRanking","updatedIds","dateString","newRanking","assign","updateNewAnimesRankings","QuoteModificationContext","useQuoteModificationContext","Quote","setQuoteToEdit","setShowQuoteModal","setIsNewQuote","setActiveQuoteId","quote","content","translation","person","bangumi","Summary","addNewQuote","summary","bangumi_num","tv_episode_num","total_time","daysInMonth","quotes","bangumis","bangumi_name","MonthlySummary","isNewQuote","showQuoteModal","activeQuoteId","quoteToEdit","activeMonth","setActiveMonth","onQuoteSubmit","deleteQuote","localeCompare","sortMonthlySummaries","entry","Provider","Login","username","password","setUsername","setPassword","handleLogin","autoFocus","disabled","Parse","initialize","Env","serverURL","App","setAuthenticated","authenticating","userStr","sessionStorage","getItem","JSON","parse","getUser","user","setUser","token","setToken","setIsLoading","setLoadError","activePage","setActivePage","setRatings","setNewAnimes","summaries","setSummaries","setQuotes","fetchRatings","ratingsObj","extend","query","Query","limit","find","then","results","log","result","get","toFixed","fetchQuotes","quotesObj","fetchNewAnimes","submitNewEntry","newEntry","databaseName","DataObject","equalTo","alert","newObj","set","save","submitNewQuote","newQuote","QuotesObj","newQuotesObj","updateEntry","obj","object","response","updateQuote","ids","containedIn","saveAll","err","deleteEntry","destroy","tempSummaries","endMonth","movie_num","daily_time","handleAnimeSubmit","isNew","newRating","handleNewAnimeSubmit","handleQuoteSubmit","User","logIn","setItem","stringify","setUserSession","getSessionToken","getUsername","catch","message","removeItem","mainElement","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7272b798.chunk.js","sourcesContent":["module.exports = {\n    APPLICATION_ID: '54T0X4tWovUBdnRd6EKdW3BrN4WJrpGBEJdwDk9J',\n    JAVASCRIPT_KEY: 'WREbi60D2GfVknGhH9Je1GJ931oIhIVkHUXD9u5R',\n    SERVER_URL: 'https://parseapi.back4app.com/'\n}","import { useContext, createContext } from \"react\";\n\nexport const AuthenticationContext = createContext(null);\n\nexport function useAuthenticationContext() {\n  return useContext(AuthenticationContext);\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport './Navigation.css';\nimport '../App.css';\n\nfunction UserManagement() {\n  const { authenticated, setAuthenticating, handleSignOut } = useAuthenticationContext();\n  if (authenticated) {\n    return <div id=\"user-management\">\n        <div className=\"text-button clickable\" onClick={handleSignOut}>注销</div>\n      </div>\n  } else {\n    return <div className=\"text-button clickable\" onClick={() => setAuthenticating(true)}>登陆</div>\n  }\n}\n\nfunction Navigation(props) {\n  return (\n    <Navbar sticky=\"top\" expand=\"lg\" id=\"navbar\">\n      <Navbar.Brand href=\"/\">追番补番</Navbar.Brand>\n      <Nav className=\"mr-auto\" activeKey={window.location.pathname}>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"AnimeList\")}>补番列表</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"NewAnimeList\")}>追番列表</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"MonthlySummary\")}>每月总结</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"SeasonalSummary\")}>季度总结</Nav.Link></Nav.Item>\n      </Nav>\n      <UserManagement />\n    </Navbar>\n  );\n}\n\nexport default Navigation;\n","import React from 'react';\n\nconst animeData = {\n  ratings: [],\n  newAnimes: [],\n  monthlySummaries: {}\n}\n\nconst AnimeDataContext = React.createContext(animeData);\n\nexport default AnimeDataContext;","import React from 'react';\nimport { BiSort } from \"react-icons/bi\";\nimport '../App.css';\n\nexport default function SortHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <BiSort className='icon clickable' onClick={props.sort}/>\n      </div>\n    </th>\n  );\n}","import React, { useState } from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './FilterBox.css';\nimport '../App.css';\n\nexport default function FilterBox(props) {\n  const [displayBox, setDisplayBox] = useState(false);\n  return (displayBox ? \n    <div className=\"filter-box\">\n      <input className=\"filter-input-box\" placeholder=\"输入......\" type=\"text\" onKeyPress={(e) => {\n        if (e.key === \"Enter\") props.filter(e);\n      }}/>\n      <div className=\"close-button clickable\" onClick={() => {\n        props.clearFilter();\n        setDisplayBox(!displayBox)\n      }}>&times;</div>\n    </div> :\n    <AiOutlineSearch className=\"filter-box icon clickable\" onClick={() => setDisplayBox(!displayBox)}/>);\n}\n","import React from 'react';\nimport FilterBox from './FilterBox';\nimport './FilterHeader.css';\n\nexport default function FilterHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <FilterBox filter={props.filter} clearFilter={props.clearFilter}/>\n      </div>\n    </th>\n  );\n}","import React from 'react';\nimport './DropdownHeader.css';\n\nexport default function DropdownHeader(props) {\n  return <th key={props.header}>\n    <select id=\"status\" className=\"dropdown-header\" name=\"status\" onChange={(event) => props.filterStatus(event)}>\n      <option value=\"\" selected>状态</option>\n      <option value=\"想看\">想看</option>\n      <option value=\"在看\">在看</option>\n      <option value=\"已看\">已看</option>\n    </select>\n  </th>\n};","import React from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './Description.css';\n\nexport default function Description(props) {\n  const description = props.description;\n  return description === undefined || description === null ? \n    <p>暂无简介</p> :\n    <div className=\"description\">\n      <div>\n        <h1>\n          {description.name}\n          <a href={\"https://www.douban.com/search?q=\" + description.name} target=\"_blank\" rel=\"noopener noreferrer\">\n            <AiOutlineSearch className=\"icon clickable\" />\n          </a>\n        </h1>\n        <p>豆瓣评分：{description.douban}</p>\n        <p>年份：{description.year}</p>\n        <p>分类：{description.genre}</p>\n        <p>集数：{description.episodes}</p>\n        <p>单集片长：{description.episode_length}</p>\n        <p>简介：{description.description}</p>\n      </div>\n    </div>;\n}","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './AnimeModal.css';\nimport '../App.css';\n\nexport default function AnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  return <Form onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>豆瓣评分<a href={\"https://www.douban.com\"} target=\"_blank\" rel=\"noopener noreferrer\"><AiOutlineSearch className=\"icon clickable\" /></a></Form.Label><Form.Control defaultValue={oldValue.douban} id=\"douban\" type=\"input\"/></Col>\n        <Col><Form.Label>年份</Form.Label><Form.Control defaultValue={oldValue.year} id=\"year\" type=\"input\"/></Col>\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>TV集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n        <Col><Form.Label>剧场版</Form.Label><Form.Control defaultValue={oldValue.movies} id=\"movies\" type=\"input\"/></Col>\n        <Col><Form.Label>单集片长</Form.Label><Form.Control defaultValue={oldValue.episode_length} id=\"episode_length\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Label>简介</Form.Label>\n      <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>剧情评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"story\" type=\"input\"/></Col>\n        <Col><Form.Label>作画评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"illustration\" type=\"input\"/></Col>\n        <Col><Form.Label>音乐评分</Form.Label><Form.Control defaultValue={oldValue.music} id=\"music\" type=\"input\"/></Col>\n        <Col><Form.Label>情怀评分</Form.Label><Form.Control defaultValue={oldValue.passion} id=\"passion\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>开始观看日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>结束观看日期</Form.Label><Form.Control defaultValue={oldValue.end_date} id=\"end_date\" type=\"input\"/></Col>\n        <Col><Form.Label>观看次数</Form.Label><Form.Control defaultValue={oldValue.times_watched} id=\"times_watched\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Button className=\"pink-button\" type=\"submit\">\n      提交\n    </Button>\n\n  </Form>\n}\n","// return the user data from the session storage\nexport const getUser = () => {\n  const userStr = sessionStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  else return null;\n}\n \n// return the token from the session storage\nexport const getToken = () => {\n  return sessionStorage.getItem('token') || null;\n}\n \n// remove the token and user from the session storage\nexport const removeUserSession = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n}\n \n// set the token and user from the session storage\nexport const setUserSession = (user, token) => {\n  sessionStorage.setItem('token', token);\n  sessionStorage.setItem('user', JSON.stringify(user));\n}\n\nexport function formatEpisodes(tv_episodes, movies) {\n  if (tv_episodes === undefined || movies === undefined) {\n    return \"\";\n  } else if (tv_episodes === 0) {\n    return `剧场版×${movies}`;\n  } else if (movies === 0) {\n    return `${tv_episodes}集`;\n  } else {\n    return `${tv_episodes}集+剧场版×${movies}`;\n  }\n}\n\nexport function formatDate(start_date, end_date) {\n  if (!start_date.isValid()) {\n    return \"\"\n  } else if (!end_date.isValid()) {\n    return `${start_date.format('MM/DD/YY')}至今`;\n  } else {\n    return `${start_date.format('MM/DD/YY')} 至 ${end_date.format('MM/DD/YY')}`;\n  }\n}\n\nexport function formatTime(time) {\n  if (isNaN(time)) {\n    return \"-\";\n  }\n  if (time >= 60) {\n    return Math.round(time / 60 * 10) / 10 + \" 小时\";\n  } else {\n    return Math.round(time * 10) / 10 + \" 分钟\";\n  }\n}\n\nexport function calculateDailyTime(row) {\n  const days = row.end_date.diff(row.start_date, 'days') + 1;\n  const episode_length = row.episode_length === undefined || row.episode_length === 0 ? 24 : row.episode_length;\n  const totalTime = row.tv_episodes * episode_length + row.movies * 90;\n  return totalTime / days;\n}\n\nexport function translate(word) {\n  switch(word) {\n    case '名称':\n      return 'name';\n    case '集数':\n    case '预计集数':\n      return 'tv_episodes';\n    case '状态':\n      return 'status';\n    case '分类':\n      return 'genre';\n    case '剧情':\n      return 'story';\n    case '作画':\n      return 'illustration';\n    case '音乐':\n      return 'music';\n    case '情怀':\n      return 'passion';\n    case '评分':\n      return 'rating';\n    case '首次观看日期':\n      return 'end_date';\n    case '观看次数':\n      return 'times_watched';\n    case '年份':\n      return 'year';\n    case '豆瓣评分':\n      return 'douban';\n    case '日均时长':\n      return 'daily_time';\n    case '排名':\n      return 'ranking';\n    case '季度':\n      return 'season';\n    case '开始放送日期':\n      return 'start_date';\n    case '更新日':\n      return 'next_episode_day';\n    default:\n      return 'unknown';\n  }\n}\n\nexport function sortList(rawList, sortedCol) {\n  return rawList.slice().sort((a, b) => {\n    const aQuantity = sortedCol === \"daily_time\" ? calculateDailyTime(a) : a[sortedCol];\n    const bQuantity = sortedCol === \"daily_time\" ? calculateDailyTime(b) : b[sortedCol];\n    if (sortedCol === \"start_date\" && typeof sortedCol !== \"string\") {\n      if (!aQuantity.isValid()) {\n        return 1;\n      } else if (!bQuantity.isValid()) {\n        return -1;\n      } else {\n        return compare(aQuantity, bQuantity);\n      }\n    } else {\n      return compare(aQuantity, bQuantity);\n    }\n  });\n}\n\nfunction compare(a, b) {\n  if (a > b) {\n    return -1;\n  } else if (a < b) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nexport function parseDoubanPage(pageSrc) {\n  const name = pageSrc.split(\"\\n\")[5].split(\" \")[0];\n  const year = pageSrc.split(\"首播: \")[1].split(\"-\")[0];\n  const douban = pageSrc.split(\"豆瓣评分\")[1].split(\"\\n\")[1];\n  let tv_episodes = 12;\n  try {\n    tv_episodes = parseInt(pageSrc.split(\"集数: \")[1].split(\"-\")[0]);\n  } catch (error) {\n    console.error(error);\n  }\n  let episode_length = 24;\n  try {\n    episode_length = parseInt(pageSrc.split(\"单集片长: \")[1].split(\"-\")[0]);\n  } catch (error) {\n    console.error(error);\n  }\n  const description = pageSrc.split(\"的剧情简介 · · · · · ·\")[1].split(\"\\n\\n\")[1].trim();\n  return {\n    name: name,\n    year: year,\n    douban: douban,\n    tv_episodes: isNaN(tv_episodes) ? 0 : tv_episodes,\n    episode_length: isNaN(episode_length) ? 12: episode_length,\n    description: description,\n  }\n}\n\nexport function getSeason() {\n  const d = new Date();\n  const year = d.getFullYear();\n  const month = Math.floor(d.getMonth()/3) * 3 + 1;\n  const curSeason = year + \"年\" + month + \"月\";\n  let preSeason = year + \"年\" + (month - 3) + \"月\";\n  let nextSeason = year + \"年\" + (month + 3) + \"月\";\n  if (month === 1) {\n    preSeason = (year - 1) + \"年10月\";\n  }\n  if (month === 10) {\n    nextSeason = (year + 1) + \"年1月\";\n  }\n  return [preSeason, curSeason, nextSeason];\n}\n\nexport function getLatestRankings(newAnimes, currentSeason) {\n  let rankings = {};\n  newAnimes.forEach(newAnime => {\n    const currentSeasonRankings = newAnime.seasons_ranking[currentSeason];\n    const dates = Object.keys(currentSeasonRankings);\n    const latestRank = currentSeasonRankings[dates.sort()[dates.length - 1]];\n    rankings[newAnime.name] = latestRank;\n  });\n  return rankings;\n}","import React, { useState, useEffect } from 'react';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport SortHeader from './SortHeader';\nimport FilterHeader from './FilterHeader';\nimport DropdownHeader from './DropdownHeader';\nimport Description from './Description';\nimport AnimeModal from './AnimeModal';\nimport { sortList, formatEpisodes, formatDate, translate, calculateDailyTime, formatTime, parseDoubanPage } from \"../utils/utils\";\nimport '../App.css';\nimport './AnimeList.css';\n\nfunction AnimeList(props) {\n\n  const { authenticated } = useAuthenticationContext();\n  \n  const { ratings } = React.useContext(AnimeDataContext);\n\n  const watchedHeaders = ['序号', '名称', '集数', '分类', '剧情', '作画', '音乐', '情怀', '评分', '首次观看日期', '日均时长', ''];\n  const wantToWatchHeaders = ['序号', '名称', '集数', '分类', '年份', '豆瓣评分', '简介', ''];\n  const [activeDescription, setActiveDescription] = useState(null);\n  const [showDescription, setShowDescription] = useState(false);\n  const [showAnimeModal, setShowAnimeModal] = useState(false);\n  const [showAnimeModalAuto, setShowAnimeModalAuto] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [submitNewAnimeAuto, setSubmitNewAnimeAuto] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayListStatus, setDisplayListStatus] = useState(\"已看\");\n  const [displayList, setDisplayList] = useState(ratings);\n  const [tableHeaders, setTableHeaders] = useState(watchedHeaders);\n  const [filterList, setFilterList] = useState({});\n  const [sortedCol, setSortedCol] = useState();\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n\n  useEffect(() => {setSortedCol(\"end_date\")}, []);\n\n  useEffect(() => {\n    setFilterList([]);\n    setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"end_date\"));\n  }, [props.isLoading, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), sortedCol));\n      setSortedCol(null);\n    }\n  }, [sortedCol, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (filterList.length !== 0) {\n      for (const [key, value] of Object.entries(filterList)) {\n        setDisplayList(ratings.filter((item) => {\n          return item[key].includes(value) && item.status === displayListStatus;\n        }));\n      }\n      setFilterList([]);\n    }\n  }, [ratings, filterList, displayListStatus]);\n\n  const changeStatus = (e) => {\n    const newStatus = e.target.innerHTML;\n    if (newStatus === '想看') {\n      setTableHeaders(wantToWatchHeaders);\n    } else {\n      setTableHeaders(watchedHeaders);\n    }\n    setDisplayListStatus(newStatus);\n  }\n\n  const formatDescription = (description) => {\n    if (description !== null && description !== undefined) {\n      return description.substring(0, 20) + '......';\n    }\n  }\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      番剧评分加载失败！\n    </Alert>;\n  } else {\n    return (<div className=\"main-element\">\n      <Modal centered size='lg' show={showDescription} onHide={() => setShowDescription(false)}>\n        <Modal.Header>\n          <Modal.Title>简介</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Description description={activeDescription}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button className=\"pink-button\" onClick={() => setShowDescription(false)}>\n            关闭\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModal} onHide={() => setShowAnimeModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新番剧\" : \"编辑番剧\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              if (submitNewAnime) {\n                props.onAnimeSubmit(event, null, true);\n              } else if (submitNewAnimeAuto) {\n                props.onAnimeSubmit(event, null, true);\n              } else {\n                props.onAnimeSubmit(event, id, false);\n              }\n              setShowAnimeModal(false);\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModalAuto} onHide={() => setShowAnimeModalAuto(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>添加新番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={(event) => {\n            event.preventDefault();\n            const info = parseDoubanPage(event.target.elements.html.value);\n            setEditAnimeOldValue({\n              name: info.name,\n              year: info.year,\n              douban: info.douban,\n              tv_episodes: info.tv_episodes,\n              movies: 0,\n              episode_length: info.episode_length,\n              status: \"想看\",\n              genre: \"\",\n              description: info.description,\n              story: 0,\n              illustration: 0,\n              music: 0,\n              passion: 0,\n              start_date: null,\n              end_date: null,\n              times_watched: 0,\n            });\n            setSubmitNewAnimeAuto(true);\n            setShowAnimeModalAuto(false);\n            setActiveId(null);\n            setShowAnimeModal(true);\n          }}>\n            <Form.Group>\n              <Form.Label>豆瓣页面源</Form.Label>\n              <Form.Control id=\"html\" as=\"textarea\" rows=\"10\" />\n            </Form.Group>\n            <Button className=\"pink-button\" type=\"submit\">\n              提交\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteAnime(animeToDelete.id, \"Ratings\");\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          <Button className=\"pink-button\" onClick={changeStatus}>已看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>在看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>想看</Button>\n        </div>\n        <div>\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModal(true);\n            setSubmitNewAnime(true);\n          }}>手动添加</Button> : <></>}\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModalAuto(true);\n            setSubmitNewAnime(true);\n          }}>自动添加</Button> : <></>}\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '名称' || header === '分类') {\n                  return <FilterHeader key={header} header={header}\n                    filter={(e) => {\n                      let newFilterList = {};\n                      for (let item in filterList) {\n                        newFilterList[item] = filterList[item];\n                      }\n                      newFilterList[translate(header)] = e.target.value;\n                      setFilterList(newFilterList);\n                    }}\n                    clearFilter={() => {\n                      setFilterList([]);\n                      setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"end_date\"));\n                    }}\n                  />;\n                } else if (header === '状态') {\n                  return <DropdownHeader key={header} header={header} filterStatus={(event) => {\n                    setFilterList({\"status\": event.target.value});\n                  }}/>\n                } else if (header !== ''){\n                  return <SortHeader key={header} header={header} sort={() => setSortedCol(translate(header))}/>;\n                } else {\n                  return <th key={header} ></th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map((row, idx) =>\n                <tr key={row.name}>\n                  <td>{idx + 1}</td>\n                  <td className='anime-name clickable' onClick={(e) => {\n                    setActiveDescription(\n                      {\n                        name: row.name,\n                        douban: row.douban,\n                        year: row.year,\n                        genre: row.genre,\n                        episodes: row.tv_episodes,\n                        episode_length: row.episode_length,\n                        description: row.description,\n                      }\n                    );\n                    setShowDescription(true);\n                  }}>{row.name}</td>\n                  <td>{formatEpisodes(row.tv_episodes, row.movies)}</td>\n                  <td>{row.genre}</td>\n                  <td>{displayListStatus === '想看' ? row.year : row.story}</td>\n                  <td>{displayListStatus === '想看' ? row.douban : row.illustration}</td>\n                  <td>{displayListStatus === '想看' ? formatDescription(row.description) : row.music}</td>\n                  {displayListStatus === '想看' ? \"\" : <td>{row.passion}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{row.rating}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatDate(row.start_date, row.end_date)}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatTime(calculateDailyTime(row))}</td>}\n                  <td> {authenticated ?\n                      <>\n                        <BiEditAlt className=\"clickable\" onClick={() => {\n                          setActiveId(row.id);\n                          setEditAnimeOldValue({\n                            name: row.name,\n                            year: row.year,\n                            douban: row.douban,\n                            tv_episodes: row.tv_episodes,\n                            movies: row.movies,\n                            episode_length: row.episode_length,\n                            status: row.status,\n                            genre: row.genre,\n                            description: row.description,\n                            story: row.story,\n                            illustration: row.illustration,\n                            music: row.music,\n                            passion: row.passion,\n                            start_date: row.start_date.format('YYYY-MM-DD'),\n                            end_date: row.end_date.format('YYYY-MM-DD'),\n                            times_watched: row.times_watched,\n                          });\n                          setSubmitNewAnime(false);\n                          setShowAnimeModal(true);\n                        }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                          setAnimeToDelete({\n                            name: row.name,\n                            id: row.id,\n                          });\n                          setShowDeleteConfirmation(true);\n                        }}/>\n                      </> : <></>\n                    }\n                    </td>\n                </tr>)\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nexport default AnimeList;","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport { BsFileArrowUp, BsFileArrowDown } from \"react-icons/bs\";\nimport './Rankings.css'\nimport '../App.css';\n\nexport default function Rankings(props) {\n  const rankingsDictToArray = (rankings) => {\n    let res = [];\n    for (const [anime, ranking] of Object.entries(rankings)) {\n      res.push([anime, ranking]);\n    }\n    res.sort(function(a, b) {\n        return a[1] - b[1];\n    });\n    return res;\n  }\n\n  return <div>\n    <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n      <thead>\n        <tr className='table-headers'>\n          <th>排名</th>\n          <th>名称</th>\n          <th>调整排名</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n        rankingsDictToArray(props.rankings).map(row => \n          <tr key={row[0]}>\n            <td>{row[1]}</td>\n            <td className='new-anime-name'>{row[0]}</td>\n            <td className=\"update-ranking-buttons\">\n              <>\n                <Button className=\"pink-button\" onClick={(e) => props.changeRanking(e, -1)}><BsFileArrowUp/></Button>\n                <Button className=\"pink-button\" onClick={(e) => props.changeRanking(e, 1)}><BsFileArrowDown/></Button>\n              </>\n            </td>\n          </tr>\n        )\n      }\n      </tbody>\n    </Table>\n  </div>\n}","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport './DailyNewAnimes.css';\n\nexport default function DailyNewAnimes(props) {\n\n  const days = [moment().subtract(1,'days'), moment(), moment().add(1, 'days')];\n\n  moment.locale('zh-cn');\n\n  return <div id=\"daily-new-animes\">\n            {days.map(day => \n              <ListGroup>\n                <ListGroup.Item variant={day.isSame(moment(), 'day') ? 'primary' : 'dark'}>{day.format('dddd[，]YYYY[年]MMMDo ')}</ListGroup.Item>\n                {props.displayList.filter(newAnime => {\n                  const startDate = moment(newAnime.start_date);\n                  return day.isAfter(startDate) && day.diff(startDate, 'days') % 7 === 0;\n                }).map(todayAnime => <ListGroup.Item key={todayAnime.name}>{todayAnime.name}</ListGroup.Item>)}\n              </ListGroup>\n            )}\n          </div>\n}","import React, { useState, useEffect } from 'react';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Alert from 'react-bootstrap/Alert';\nimport moment from 'moment';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport SortHeader from './SortHeader';\nimport AnimeModal from './AnimeModal';\nimport Rankings from './Rankings';\nimport DailyNewAnimes from './DailyNewAnimes';\nimport { getSeason, formatEpisodes, translate, sortList, getLatestRankings } from \"../utils/utils\";\nimport '../App.css';\nimport './NewAnimeList.css';\n\nfunction NewAnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  return <Form id=\"new-anime-modal\" onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Row className=\"input-row\">\n        <Col><Form.Label>季度</Form.Label><Form.Control defaultValue={oldValue.season} id=\"season\" type=\"input\"/></Col>\n        <Col><Form.Label>开始放送日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>更新日</Form.Label><Form.Control defaultValue={oldValue.next_episode_day} id=\"next_episode_day\" type=\"input\"/></Col>\n      </Form.Row>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>预计集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Group>\n      <Form.Label>简介</Form.Label>\n        <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n      </Form.Group>\n    </Form.Group>\n    <div>\n      <Button className=\"pink-button\" type=\"submit\">\n        提交\n      </Button>\n      {props.submitNewAnime ? <></> : <Button onClick={() => {\n        const formElements = document.getElementById(\"new-anime-modal\").elements;\n        props.handleRateNewAnime({\n          \"name\": formElements.name.value,\n          \"tv_episodes\": Number(formElements.tv_episodes.value),\n          \"genre\": formElements.genre.value,\n          \"description\": formElements.description.value,\n          \"start_date\": formElements.start_date.value,\n          \"status\": formElements.status.value\n        });\n      }}>已追完</Button>}\n    </div>\n\n  </Form>\n}\n\nfunction NewAnimeList(props) {\n\n  const { authenticated } = useAuthenticationContext();\n  const { newAnimes } = React.useContext(AnimeDataContext);\n\n  const tableHeaders = ['排名', '名称', '分类', '季度', '开始放送日期', '更新日', '预计集数', '状态', '']\n\n  const [seasons, setSeasons] = useState([])\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showRateModal, setShowRateModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [showRankings, setShowRankings] = useState(false);\n  const [showToday, setShowToday] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [localRankings, setLocalRankings] = useState({});\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayList, setDisplayList] = useState(newAnimes);\n  const [displayListSeason, setDisplayListSeason] = useState(null);\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n  const [sortedCol, setSortedCol] = useState(null);\n  const [rateAnimePartialInfo, setRateAnimePartialInfo] = useState(null);\n\n  useEffect(() => {setSortedCol(\"ranking\")}, []);\n\n  const handleRateNewAnime = (partialInfo) => {\n    partialInfo.status = \"已看\";\n    setRateAnimePartialInfo(partialInfo);\n    setShowAddModal(false);\n    setShowRateModal(true);\n  }\n\n  const changeSeason = (e) => {\n    setDisplayListSeason(e.target.innerHTML);\n  }\n\n  const sortAnimesByRankings = (animes, rankings) => {\n    animes.sort((a, b) => {\n      if (rankings[a.name] > rankings[b.name]) return 1;\n      if (rankings[a.name] < rankings[b.name]) return -1;\n      return 0;\n    })\n  }\n\n  const getMaxRanking = (rankings) => {\n    let max = -1;\n    for (const anime of Object.keys(rankings)) {\n      if (rankings[anime] > max) {\n        max = rankings[anime];\n      }\n    }\n    return max;\n  }\n\n  const changeRanking = (e, offset) => {\n    const newAnimeName = e.currentTarget.parentElement.parentElement.getElementsByClassName('new-anime-name')[0].innerText;\n    const originRanking = localRankings[newAnimeName];\n    const newRankings = {};\n    let possibleToChange = false;\n    if (offset === 1) {\n      possibleToChange = originRanking !== getMaxRanking(localRankings);\n    } else if (offset === -1) {\n      possibleToChange = originRanking !== 1;\n    }\n    if (possibleToChange) {\n      for (const [anime, ranking] of Object.entries(localRankings)) {\n        if (anime === newAnimeName) {\n          newRankings[anime] = originRanking + offset;\n        } else if (ranking === originRanking + offset) {\n          newRankings[anime] = originRanking;\n        } else {\n          newRankings[anime] = ranking;\n        }\n      }\n      setLocalRankings(newRankings);\n    }\n  }\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      const filteredNewAnimes = newAnimes.filter((newAnime) => newAnime.season.includes(displayListSeason));\n      if (sortedCol === 'ranking') {\n        sortAnimesByRankings(filteredNewAnimes, rankings);\n        setDisplayList(filteredNewAnimes);\n      } else {\n        setDisplayList(sortList(filteredNewAnimes, sortedCol));\n      }\n      setSortedCol(null);\n    }\n  }, [sortedCol, newAnimes, displayListSeason, rankings]);\n\n  useEffect(() => {\n    const seasons = getSeason();\n    setSeasons(seasons);\n    setDisplayListSeason(seasons[1]);\n  }, [])\n\n  useEffect(() => {\n    const filteredNewAnimes = newAnimes.filter((newAnime) => newAnime.season.includes(displayListSeason));\n    const rankings = getLatestRankings(filteredNewAnimes, displayListSeason);\n    sortAnimesByRankings(filteredNewAnimes, rankings);\n    setDisplayList(filteredNewAnimes);\n    setRankings(rankings);\n    setLocalRankings(rankings);\n  }, [props.isLoading, newAnimes, displayListSeason])\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      追番列表加载失败！\n    </Alert>;\n  } else {\n    return (<div className=\"main-element\">\n      <Modal centered size='lg' show={showAddModal} onHide={() => setShowAddModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新追番\" : \"编辑追番\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <NewAnimeModal\n            submitNewAnime={submitNewAnime}\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              if (submitNewAnime) {\n                props.onNewAnimeSubmit(event, null, true);\n              } else {\n                props.onNewAnimeSubmit(event, id, false);\n              }\n              setShowAddModal(false);\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n            handleRateNewAnime={handleRateNewAnime}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size='lg' show={showRateModal} onHide={() => setShowRateModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>评价番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              props.onAnimeSubmit(event, id, true);\n              setShowRateModal(false);\n            }}\n            oldValue={rateAnimePartialInfo}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteNewAnime(animeToDelete.id, \"NewAnimes\");\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showRankings} onHide={() => setShowRankings(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>番剧排名</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Rankings rankings={localRankings} changeRanking={changeRanking}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            const updatedIds = [];\n            const newRankings = {};\n            const dateString = moment().format(\"YYYY-MM-DD\");\n            displayList.forEach(row => {\n              updatedIds.push(row.id);\n              const newRanking = Object.assign({}, row.seasons_ranking);\n              newRanking[displayListSeason][dateString] = localRankings[row.name];\n              newRankings[row.id] = newRanking;\n            })\n            props.updateNewAnimesRankings(updatedIds, newRankings, displayListSeason);\n            setShowRankings(false)\n          }}>提交</Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showToday} onHide={() => setShowToday(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>近期更新</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <DailyNewAnimes displayList={displayList}/>\n        </Modal.Body>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          {seasons.map(season => <Button key={season} className=\"pink-button\" onClick={changeSeason}>\n            {season}\n          </Button>)}\n        </div>\n        <div>\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setSubmitNewAnime(true);\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAddModal(true);\n          }}>添加追番</Button> : <></>}\n          {authenticated ? <Button className=\"pink-button\" onClick={() => setShowRankings(true)}>排名</Button> : <></>}\n          <Button className=\"pink-button\" onClick={() => setShowToday(true)}>近期更新</Button>\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '更新日' || header === '排名' || header === '开始放送日期'){\n                  return <SortHeader key={header} header={header} sort={() => setSortedCol(translate(header))}/>;\n                } else {\n                  return <th key={header} >{header}</th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map(row => \n                <tr key={row.name}>\n                  <td>{rankings[row.name]}</td>\n                  <td className='anime-name'>{row.name}</td>\n                  <td>{row.genre}</td>\n                  <td>{row.season}</td>\n                  <td>{row.start_date}</td>\n                  <td>{row.next_episode_day}</td>\n                  <td>{formatEpisodes(row.tv_episodes, 0)}</td>\n                  <td>{row.status}</td>\n                  <td> {authenticated ?\n                    <>\n                      <BiEditAlt className=\"clickable\" onClick={() => {\n                        setActiveId(row.id);\n                        setEditAnimeOldValue({\n                          name: row.name,\n                          tv_episodes: row.tv_episodes,\n                          genre: row.genre,\n                          description: row.description,\n                          start_date: row.start_date,\n                          next_episode_day: row.next_episode_day,\n                          season: row.season,\n                          status: row.status\n                        });\n                        setSubmitNewAnime(false);\n                        setShowAddModal(true);\n                      }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                        setAnimeToDelete({\n                          name: row.name,\n                          id: row.id,\n                        });\n                        setShowDeleteConfirmation(true);\n                      }}/>\n                    </> : <></>\n                  }</td>\n                </tr>  \n              )\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nexport default NewAnimeList;","import React, { useState, useContext, createContext } from 'react';\nimport moment from 'moment';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport { FiPlusCircle } from \"react-icons/fi\";\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport { formatTime } from \"../utils/utils\";\nimport './MonthlySummary.css';\nimport '../App.css';\n\nconst QuoteModificationContext = createContext(null);\n\nfunction useQuoteModificationContext() {\n  return useContext(QuoteModificationContext);\n}\n\nfunction Quote(props) {\n  const { authenticated } = useAuthenticationContext();\n  const { setQuoteToEdit, setShowQuoteModal, setIsNewQuote, setActiveQuoteId, setShowDeleteConfirmation } = useQuoteModificationContext();\n  return <blockquote>\n    <div className=\"quote-content\">{props.quote.content}</div>\n    <div className=\"quote-translation\">{props.quote.translation}</div>\n    <cite>\n      {props.quote.person + \"《\" + props.quote.bangumi + \"》\"}\n      {authenticated ? <BiEditAlt className=\"icon clickable\"\n        onClick={() => {\n          setIsNewQuote(false);\n          setQuoteToEdit(props.quote);\n          setShowQuoteModal(true);\n        }}/> : <></>}\n      {authenticated ? <BiTrash className=\"icon clickable\"\n        onClick={() => {\n          setActiveQuoteId(props.quote.id);\n          setShowDeleteConfirmation(true);\n        }}/> : <></>}\n    </cite>\n  </blockquote>\n}\n\nfunction Summary(props) {\n  const { authenticated } = useAuthenticationContext();\n  const { setIsNewQuote, setQuoteToEdit, addNewQuote } = useQuoteModificationContext();\n  return <div className=\"summary\">\n    <div className=\"summary-title\">\n      <div className=\"summary-info\">\n        <div className=\"year-month\">\n          <div className=\"month\">{moment(props.month).format(\"MM\")}</div>\n          <div className=\"year\">{moment(props.month).format(\"YYYY\")}</div>\n          <div className=\"yue\">月</div>\n        </div>\n        <div className=\"summary-info-pieces\">\n          <div className=\"summary-info-piece\">{\"番剧总数：\" + props.summary.bangumi_num}</div>\n          <div className=\"summary-info-piece\">{\"总集数：\" + props.summary.tv_episode_num}</div>\n          <div className=\"summary-info-piece\">{\"总时长：\" + formatTime(props.summary.total_time)}</div>\n          <div className=\"summary-info-piece\">{\"每日时长：\" + formatTime(props.summary.total_time / moment(props.month).daysInMonth())}</div>\n        </div>\n      </div>\n      <div className=\"summary-quotes\">\n        {\n          props.summary.quotes.length !== 0 ?\n          <>\n            {props.summary.quotes.map((quote) => <Quote quote={quote} setActiveQuoteId={props.setActiveQuoteId}/>)}\n            {authenticated ? <FiPlusCircle \n              className=\"clickable add-more-quote-button\"\n              onClick={() => {\n                addNewQuote(props.month);\n                setIsNewQuote(true);\n                setQuoteToEdit({});\n              }}\n            /> : <></>}\n          </> :\n          (authenticated ? <Button \n            className=\"pink-button add-quote-button\"\n            onClick={() => {\n              addNewQuote(props.month);\n              setQuoteToEdit({});\n            }}\n          >\n          添加语录\n          </Button> : <div className=\"add-quote-button\">暂无语录</div>)\n        }\n      </div>\n    </div>\n    <div className=\"summary-names\">\n      {props.summary.bangumis.map((bangumi_name) => \n        <div className=\"bangumi-name\">{\"• \" + bangumi_name}</div>)}\n    </div>\n  </div>\n}\n\nfunction MonthlySummary(props) {\n  const { monthlySummaries } = useContext(AnimeDataContext);\n\n  const [isNewQuote, setIsNewQuote] = useState(true);\n  const [showQuoteModal, setShowQuoteModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [activeQuoteId, setActiveQuoteId] = useState();\n  const [quoteToEdit, setQuoteToEdit] = useState({});\n  const [activeMonth, setActiveMonth] = useState(\"\");\n\n  const addNewQuote = (month) => {\n    setShowQuoteModal(true);\n    setActiveMonth(month);\n  };\n\n  const sortMonthlySummaries = (monthlySummaries) => {\n    const res = [];\n    for (const [month, summary] of Object.entries(monthlySummaries)) {\n      res.push([month, summary]);\n    }\n    res.sort((a, b) => a[0].localeCompare(b[0]) * -1);\n    return res;\n  }\n\n  return <div className=\"monthly-summary\">\n      <Modal centered size='lg' show={showQuoteModal} onHide={() => setShowQuoteModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{isNewQuote ? \"添加新语录\" : \"编辑语录\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <Form onSubmit={(event) => {\n            if (isNewQuote) {\n              event.preventDefault();\n              props.onQuoteSubmit(event, activeMonth, quoteToEdit.id, true);\n            } else {\n              event.preventDefault();\n              props.onQuoteSubmit(event, quoteToEdit.month, quoteToEdit.id, false)\n            }\n            setShowQuoteModal(false);\n          }}>\n          <Form.Group controlId=\"content\">\n            <Form.Label>语录原文</Form.Label>\n            <Form.Control defaultValue={quoteToEdit.content} type=\"input\" as=\"textarea\" rows=\"3\"/>\n          </Form.Group>\n          <Form.Group controlId=\"translation\">\n            <Form.Label>中文翻译</Form.Label>\n            <Form.Control defaultValue={quoteToEdit.translation} type=\"input\" as=\"textarea\" rows=\"3\"/>\n          </Form.Group>\n          <Form.Row className=\"input-row\">\n            <Col><Form.Label>人物</Form.Label><Form.Control defaultValue={quoteToEdit.person} id=\"person\" type=\"input\"/></Col>\n            <Col><Form.Label>作品</Form.Label><Form.Control defaultValue={quoteToEdit.bangumi} id=\"bangumi\" type=\"input\"/></Col>\n          </Form.Row>\n          <Button className=\"pink-button\" type=\"submit\">\n            提交\n          </Button>\n        </Form>\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除语录</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除此语录吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setActiveQuoteId(null);\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteQuote(activeQuoteId);\n            setActiveQuoteId(null);\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n    {\n      sortMonthlySummaries(monthlySummaries).map((entry) => \n      <QuoteModificationContext.Provider value={{ setIsNewQuote, setShowQuoteModal, addNewQuote, setQuoteToEdit, setActiveQuoteId, setShowDeleteConfirmation }}>\n        <Summary month={entry[0]} summary={entry[1]} />\n      </QuoteModificationContext.Provider>)\n    }\n  </div>;\n}\n\nexport default MonthlySummary;","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport \"./Login.css\";\nimport \"../App.css\";\n\nexport default function Login() {\n  const { username, password, setAuthenticating, setUsername, setPassword, handleLogin } = useAuthenticationContext();\n\n  const validateForm = () => {\n    return username.length > 0 && password.length > 0;\n  }\n\n  return (\n    <div className=\"Login\">\n      <Form onSubmit={handleLogin}>\n        <Form.Group size=\"lg\" controlId=\"username\">\n          <Form.Label>用户名</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"password\">\n          <Form.Label>密码</Form.Label>\n          <Form.Control\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"button-group\">\n          <Button className=\"pink-button\" size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n            登陆\n          </Button>\n          <Button className=\"pink-button\" size=\"lg\" type=\"submit\" onClick={() => setAuthenticating(false)}>\n            取消\n          </Button>\n        </div>\n      </Form>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport * as Env from \"./environments\";\nimport Navivation from './components/Navigation';\nimport AnimeDataContext from './context/AnimeDataContext';\nimport AnimeList from './components/AnimeList';\nimport NewAnimeList from './components/NewAnimeList';\nimport MonthlySummary from './components/MonthlySummary';\nimport Login from \"./components/Login\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { AuthenticationContext } from \"./context/AuthenticationContext\";\nimport { sortList, getUser, getToken, setUserSession, removeUserSession } from \"./utils/utils\";\nimport Parse from 'parse';\nimport moment from 'moment';\nimport './App.css';\n\nParse.initialize(Env.APPLICATION_ID, Env.JAVASCRIPT_KEY);\nParse.serverURL = Env.SERVER_URL;\n\nfunction App() {\n  // authentication related states\n  const [authenticated, setAuthenticated] = useState(false);\n  const [authenticating, setAuthenticating] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(getUser());\n  const [token, setToken] = useState(getToken());\n  // page status related states\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [activePage, setActivePage] = useState(\"AnimeList\")\n\n  // data related states\n  const [ratings, setRatings] = useState([]);\n  const [newAnimes, setNewAnimes] = useState([]);\n  const [summaries, setSummaries] = useState({});\n  const [quotes, setQuotes] = useState([]);\n\n  const fetchRatings = async () => {\n    setIsLoading(true);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for ratings\");\n      if (typeof document !== 'undefined'){\n        const ratings = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            year: result.get(\"year\"),\n            douban: result.get(\"douban\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            movies: result.get(\"movies\"),\n            episode_length: result.get(\"episode_length\"),\n            status: result.get(\"status\"),\n            genre: result.get(\"genre\"),\n            description: result.get(\"description\"),\n            story: result.get(\"story\"),\n            illustration: result.get(\"illustration\"),\n            music: result.get(\"music\"),\n            passion: result.get(\"passion\"),\n            rating: Number((result.get(\"story\") + result.get(\"illustration\") + result.get(\"music\") + result.get(\"passion\")).toFixed(1)),\n            start_date: moment(result.get(\"start_date\"), 'YYYY-MM-DD'),\n            end_date: moment(result.get(\"end_date\"), 'YYYY-MM-DD'),\n            times_watched: result.get(\"times_watched\"),\n          }}\n        );\n        setRatings(sortList(ratings, \"start_date\"));\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      console.error('Error while fetching ratings', error);\n    });\n  };\n\n  const fetchQuotes = async () => {\n    const quotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(quotesObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for quotes\");\n      if (typeof document !== 'undefined'){\n        const quotes = results.map((result) => {\n          return {\n            id: result.id,\n            month: result.get(\"month\"),\n            content: result.get(\"content\"),\n            translation: result.get(\"translation\"),\n            person: result.get(\"person\"),\n            bangumi: result.get(\"bangumi\"),\n          }}\n        );\n        setQuotes(quotes);\n      }\n    }, (error) => {\n      setLoadError(true);\n      console.error('Error while fetching quotes', error);\n    });\n  }\n\n  const fetchNewAnimes = async () => {\n    setIsLoading(true);\n    const quotesObj = Parse.Object.extend('NewAnimes');\n    const query = new Parse.Query(quotesObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for new animes\");\n      if (typeof document !== 'undefined'){\n        const newAnimes = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            genre: result.get(\"genre\"),\n            seasons_ranking: result.get(\"seasons_ranking\"),\n            start_date: result.get(\"start_date\"),\n            next_episode_day: result.get(\"next_episode_day\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            description: result.get(\"description\"),\n            season: result.get(\"season\"),\n            status: result.get(\"status\"),\n          }}\n        );\n        setNewAnimes(newAnimes);\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      console.error('Error while fetching new animes', error);\n    });\n  }\n\n  const submitNewEntry = async (newEntry, databaseName) => {\n    const DataObject = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(DataObject);\n    query.equalTo(\"name\", newEntry.name);\n    const results = await query.find();\n    if (results.length > 0) {\n      alert(\"番剧《\" + newEntry.name + \"》已存在！请勿重复添加番剧！\")\n    } else {\n      const newObj = new DataObject();\n      for (const [key, value] of Object.entries(newEntry)) {\n        newObj.set(key, value)\n      }\n      newObj.save().then(\n        (result) => {\n          alert(\"已提交番剧信息！\");\n          if (databaseName === \"Ratings\") {\n            fetchRatings();\n          } else if (databaseName === \"NewAnimes\") {\n            fetchNewAnimes();\n          }\n        },\n        (error) => {\n          alert(\"更新失败，请稍后重试。\");\n        }\n      );\n    }\n  };\n\n  const submitNewQuote = async (newQuote) => {\n    const QuotesObj = Parse.Object.extend('Quotes');\n    const newQuotesObj = new QuotesObj();\n    for (const [key, value] of Object.entries(newQuote)) {\n      newQuotesObj.set(key, value)\n    }\n    newQuotesObj.save().then(\n      (result) => {\n        alert(\"已添加语录！\");\n        fetchQuotes();\n      },\n      (error) => {\n        alert(\"添加失败，请稍后重试。\");\n      }\n    );\n  };\n\n  const updateEntry = async (id, newEntry, databaseName) => {\n    const obj = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(obj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newEntry)) {\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        alert(\"已更新番剧信息！\");\n        if (databaseName === \"Ratings\") {\n          fetchRatings();\n        } else if (databaseName === \"NewAnimes\") {\n          fetchNewAnimes();\n        }\n      }, (error) => {\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n  const updateQuote = async (id, newQuote) => {\n    const QuotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(QuotesObj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newQuote)) {\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        alert(\"已更新语录！\");\n        fetchQuotes();\n      }, (error) => {\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n\n  const updateNewAnimesRankings = async (ids, newRankings, season) => {\n    const obj = Parse.Object.extend(\"NewAnimes\");\n    const query = new Parse.Query(obj);\n    query.containedIn(\"objectId\", ids);\n    query.find().then((results) => {\n      results.forEach((result) => {\n        result.set(\"seasons_ranking\", newRankings[result.id]);\n      })\n      Parse.Object.saveAll(results).then((response) => {\n        alert(\"已更新排名！\");\n        fetchNewAnimes();\n      }, (err) => {\n        alert(\"更新排名失败。\");\n      })\n    }, (error) => {\n      alert(\"更新排名失败。\");\n    });\n  }\n  \n  const deleteEntry = async (id, databaseName) => {\n    const obj = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(obj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        alert(\"已删除番剧！\");\n        if (databaseName === \"Ratings\") {\n          fetchRatings();\n        } else if (databaseName === \"NewAnimes\") {\n          fetchNewAnimes();\n        }\n      }, (error) => {\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  const deleteQuote = async (id) => {\n    const quotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(quotesObj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        alert(\"已删除语录！\");\n        fetchQuotes();\n      }, (error) => {\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchRatings();\n    fetchNewAnimes();\n    fetchQuotes();\n  }, [])\n\n  useEffect(() => {\n    const tempSummaries = {};\n    ratings.filter((rating) => rating.status === \"已看\").forEach((bangumi) => {\n      let endMonth = moment(bangumi.end_date).format('YYYY-MM');\n      if (!(endMonth in tempSummaries)) {\n        tempSummaries[endMonth] = {\n          bangumi_num: 0,\n          tv_episode_num: 0,\n          movie_num: 0,\n          total_time: 0,\n          daily_time: 0,\n          bangumis: [],\n          quotes: [],\n        };\n      }\n      tempSummaries[endMonth].bangumi_num += 1;\n      tempSummaries[endMonth].bangumis.push(bangumi.name);\n      tempSummaries[endMonth].tv_episode_num += bangumi.tv_episodes;\n      tempSummaries[endMonth].movie_num += bangumi.movies;\n      tempSummaries[endMonth].total_time += bangumi.tv_episodes * bangumi.episode_length + bangumi.movies * 90;\n    });\n    quotes.forEach((quote) => {\n      let month = moment(quote.month).format('YYYY-MM');\n      if (month in tempSummaries) {\n        tempSummaries[month].quotes.push(quote);\n      }\n    });\n    setSummaries(tempSummaries);\n  }, [ratings, quotes])\n\n  useEffect(() => {\n    if (user != null && token != null) {\n      setAuthenticated(true);\n    }\n  }, [user, token])\n\n  const handleAnimeSubmit = (event, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newRating = {\n      \"name\": formElements.name.value,\n      \"year\": formElements.year.value,\n      \"douban\": Number(formElements.douban.value),\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"movies\": Number(formElements.movies.value),\n      \"episode_length\": Number(formElements.episode_length.value),\n      \"status\": formElements.status.value,\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"story\": Number(formElements.story.value),\n      \"illustration\": Number(formElements.illustration.value),\n      \"music\": Number(formElements.music.value),\n      \"passion\": Number(formElements.passion.value),\n      \"start_date\": formElements.start_date.value,\n      \"end_date\": formElements.end_date.value,\n      \"times_watched\": Number(formElements.times_watched.value),\n    };\n    if (isNew) {\n      submitNewEntry(newRating, 'Ratings');\n    } else {\n      updateEntry(id, newRating, 'Ratings');\n    }\n  };\n\n  const handleNewAnimeSubmit = (event, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newAnime = {\n      \"name\": formElements.name.value,\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"start_date\": formElements.start_date.value,\n      \"next_episode_day\": formElements.next_episode_day.value,\n      \"season\": formElements.season.value,\n      \"status\": formElements.status.value,\n    };\n    if (isNew) {\n      submitNewEntry(newAnime, 'NewAnimes');\n    } else {\n      updateEntry(id, newAnime, 'NewAnimes');\n    }\n  };\n\n  const handleQuoteSubmit = (event, month, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newQuote = {\n      \"month\": month,\n      \"content\": formElements.content.value,\n      \"translation\": formElements.translation.value,\n      \"person\": formElements.person.value,\n      \"bangumi\": formElements.bangumi.value,\n    };\n    if (isNew) {\n      submitNewQuote(newQuote);\n    } else {\n      updateQuote(id, newQuote);\n    }\n  }\n\n  const handleLogin = (event) => {\n    event.preventDefault();\n    // Create a new instance of the user class\n    Parse.User.logIn(username, password).then((user) => {\n        setUserSession(user, user.getSessionToken());\n        alert(\"欢迎，\" + user.getUsername());\n        setAuthenticating(false);\n        setAuthenticated(true);\n    }).catch(function(error){\n        alert(error.message);\n    });\n  }\n\n  const handleSignOut = () => {\n    setUser(null);\n    setToken(null);\n    removeUserSession();\n    setAuthenticated(false);\n  }\n\n  const mainElement = (activePage) => {\n    switch (activePage) {\n      case 'AnimeList':\n        return <AnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchRatings}\n          onAnimeSubmit={handleAnimeSubmit}\n          deleteAnime={deleteEntry}\n        />;\n      case 'NewAnimeList':\n        return <NewAnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchNewAnimes}\n          onAnimeSubmit={handleAnimeSubmit}\n          onNewAnimeSubmit={handleNewAnimeSubmit}\n          updateEntry={updateEntry}\n          deleteNewAnime={deleteEntry}\n          updateNewAnimesRankings={updateNewAnimesRankings}\n        />\n      case 'MonthlySummary':\n        return <MonthlySummary\n          onQuoteSubmit={handleQuoteSubmit}\n          deleteQuote={deleteQuote}\n        />;\n      default:\n        return <AnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchRatings}\n          onAnimeSubmit={handleAnimeSubmit}\n          deleteAnime={deleteEntry}\n        />;\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"App\">\n        <AuthenticationContext.Provider value={{ username, password, authenticated, setAuthenticating, handleLogin, handleSignOut, setUsername, setPassword }}>\n          <Navivation switchPage={setActivePage}/>\n          {authenticating ? <Login /> :\n            <AnimeDataContext.Provider value={{ ratings: ratings, monthlySummaries: summaries, newAnimes: newAnimes }}>\n              {mainElement(activePage)}\n            </AnimeDataContext.Provider>\n          }\n        </AuthenticationContext.Provider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}