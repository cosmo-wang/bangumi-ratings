{"version":3,"sources":["environments.js","components/Navigation.js","Context/AnimeDataContext.jsx","home/Home.js","register/Register.js","components/SortHeader.js","components/FilterBox.js","components/FilterHeader.js","components/Description.js","components/AnimeModal.js","components/AnimeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APPLICATION_ID","JAVASCRIPT_KEY","SERVER_URL","Navigation","Navbar","sticky","expand","id","Brand","href","Nav","className","activeKey","window","location","pathname","Item","Link","AnimeDataContext","React","createContext","ratings","descriptions","Component","SortHeader","props","key","header","onClick","sort","FilterBox","useState","displayBox","setDisplayBox","placeholder","type","onKeyPress","e","filter","clearFilter","FilterHeader","Description","description","undefined","name","douban","year","genre","episodes","episode_length","AnimeModal","oldValue","console","log","Form","onSubmit","event","onSubmitOrEdit","Group","controlId","Label","Control","defaultValue","Row","Col","status","tv_episodes","movies","as","rows","story","music","passion","start_date","end_date","times_watched","Button","translateHeader","Parse","initialize","Env","serverURL","AnimeList","useContext","activeDescription","setActiveDescription","showDescription","setShowDescription","showAnimeModal","setShowAnimeModal","submitNewAnime","setSubmitNewAnime","activeId","setActiveId","displayList","setDisplayList","filterList","setFilterList","sortedCol","setSortedCol","editAnimeOldValue","setEditAnimeOldValue","useEffect","isLoading","slice","a","b","length","value","item","includes","Object","entries","loadError","Alert","variant","Modal","centered","size","show","onHide","Header","Title","Body","Footer","closeButton","preventDefault","onAnimeSubmit","refresh","Table","striped","borderless","hover","map","newFilterList","target","row","illustration","rating","isValid","format","App","setIsLoading","setLoadError","setRatings","fetchRatings","ratingsObj","extend","query","Query","limit","find","then","results","document","result","get","Number","toFixed","moment","error","write","JSON","stringify","submitNewRating","newRating","RatingsObj","newRatingObj","set","save","alert","updateRating","object","response","basename","process","Provider","path","isNew","formElements","elements","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.de421fac.chunk.js","sourcesContent":["module.exports = {\n    APPLICATION_ID: '54T0X4tWovUBdnRd6EKdW3BrN4WJrpGBEJdwDk9J',\n    JAVASCRIPT_KEY: 'WREbi60D2GfVknGhH9Je1GJ931oIhIVkHUXD9u5R',\n    SERVER_URL: 'https://parseapi.back4app.com/'\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport './Navigation.css';\n\nfunction Navigation() {\n    return (\n      <Navbar sticky=\"top\" expand=\"lg\" id=\"navbar\">\n        <Navbar.Brand href=\"/\">追番补番</Navbar.Brand>\n        <Nav className=\"mr-auto\" activeKey={window.location.pathname}>\n          <Nav.Item><Nav.Link href=\"/\">我的列表</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"/today\">今日更新</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"/calendar\">看番日历</Nav.Link></Nav.Item>\n      </Nav>\n      </Navbar>\n    );\n}\n\nexport default Navigation;\n","import React from 'react';\n\nconst animeData = {\n  ratings: [],\n  descriptions: {}\n}\n\nconst AnimeDataContext = React.createContext(animeData);\n\nexport default AnimeDataContext;","import React from 'react';\nimport './Home.css';\nimport Parse from \"parse\";\nimport { Form, Button, Container, Col, Row } from 'react-bootstrap';\n\nclass Home extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            buttonLoading: false,\n            usernameError: false,\n            passwordError: false,\n            username: '',\n            password: ''\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    changeHandler = event => {\n        const name = event.target.getAttribute('id');\n        const value = event.target.value;\n        if (!value || value === \"\") {            \n            this.setState({\n                [`${name}Error`]: true\n            })\n        } else { \n            this.setState({\n                [`${name}Error`]: false,\n                [name]: value\n            })\n        }\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        try{\n            await Parse.User.logIn(this.state.username, this.state.password);\n            alert(\"Logged in!\");\n        } catch (e){\n            alert(e.message); \n        }\n        \n    }\n\n    render() {\n\n        return (\n            <section id=\"home\">\n                <Container>\n                    <Row className={\"box-form\"}>\n                        <Col>\n                            <Form onSubmit={this.handleSubmit} className={\"formLogin\"}>\n                                <Form.Group>\n                                    <Form.Label htmlFor=\"username\">Username</Form.Label>\n                                    <Form.Control\n                                        required\n                                        id=\"username\"\n                                        type=\"text\"\n                                        onChange={this.changeHandler}\n                                    />\n                                    <Form.Control.Feedback className={this.state.usernameError ? \"displayErrors\" : 'noError'}>Username is required</Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label htmlFor=\"password\">Password</Form.Label>\n                                    <Form.Control\n                                        required\n                                        id=\"password\"\n                                        type=\"password\"\n                                        onChange={this.changeHandler}\n                                    />\n                                    <Form.Control.Feedback className={this.state.passwordError ? \"displayErrors\" : 'noError'}>Password is required</Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Row>\n                                    <Button type=\"submit\" className={\"btn btn-primary\"} disabled={( (!this.state.username || !this.state.password) ? true : false) ? true : false }>Login</Button>\n                                    <Button href=\"/register\" variant=\"link\">Register</Button>\n                                </Form.Row>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </section >\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport './Register.css';\nimport { Form, Button, Container, Col, Row } from 'react-bootstrap';\nimport Parse from \"parse\";\n\nclass Register extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      buttonLoading: false,\n      usernameError: false,\n      passwordError: false,\n      emailError: false,\n      username: '',\n      password: '',\n      email: ''\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  changeHandler = event => {\n    const name = event.target.getAttribute('id');\n    const value = event.target.value;\n    console.log(value)\n    if (!value || value === \"\") {\n      this.setState({\n        [`${name}Error`]: true\n      })\n    } else {\n      this.setState({\n        [`${name}Error`]: false,\n        [name]: value\n      })\n    }\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    let user = new Parse.User();\n    user.set(\"username\", this.state.username);\n    user.set(\"password\", this.state.password);\n    user.set(\"email\", this.state.email);\n\n    try {\n      await user.signUp();\n      alert(\"User created!\");\n      this.props.history.push(\"/\")\n    } catch (error) {\n      // Show the error message somewhere and let the user try again.\n      alert(\"Error: \" + error.code + \" \" + error.message);\n    }\n\n  }\n\n  render() {\n\n    return (\n      <section id=\"register\">\n        <Container>\n          <Row>\n            <h1>Sign Up</h1>\n          </Row>\n          <Row className={\"box-form\"}>\n            <Col>\n              <Form onSubmit={this.handleSubmit} className={\"formLogin\"}>\n                <Form.Group>\n                  <Form.Label htmlFor=\"username\">Username</Form.Label>\n                  <Form.Control\n                    required\n                    id=\"username\"\n                    type=\"text\"\n                    onChange={this.changeHandler}\n                  />\n                  <Form.Control.Feedback className={this.state.usernameError ? \"displayErrors\" : 'noError'}>Username is required</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                  <Form.Label htmlFor=\"email\">Email</Form.Label>\n                  <Form.Control\n                    required\n                    id=\"email\"\n                    type=\"email\"\n                    onChange={this.changeHandler}\n                  />\n                  <Form.Control.Feedback className={this.state.emailError ? \"displayErrors\" : 'noError'}>Email is required</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                  <Form.Label htmlFor=\"password\">Password</Form.Label>\n                  <Form.Control\n                    required\n                    id=\"password\"\n                    type=\"password\"\n                    onChange={this.changeHandler}\n                  />\n                  <Form.Control.Feedback className={this.state.passwordError ? \"displayErrors\" : 'noError'}>Password is required</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Row>\n                  <Button type=\"submit\" className={\"btn btn-primary\"} disabled={( (!this.state.username || !this.state.password || !this.state.email) ? true : false) ? true : false }>Register</Button>\n                  <Button href=\"/\" variant=\"link\">Login</Button>\n                </Form.Row>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </section >\n    );\n  }\n}\n\nexport default Register;\n","import React from 'react';\nimport { BiSort } from \"react-icons/bi\";\nimport '../App.css';\n\nexport default function SortHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <BiSort className='sort-icon clickable' onClick={props.sort}/>\n      </div>\n    </th>\n  );\n}","import React, { useState } from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './FilterBox.css';\nimport '../App.css';\n\nexport default function FilterBox(props) {\n  const [displayBox, setDisplayBox] = useState(false);\n  return (displayBox ? \n    <div className=\"filter-box\">\n      <input className=\"filter-input-box\" placeholder=\"输入......\" type=\"text\" onKeyPress={(e) => {\n        if (e.key === \"Enter\") props.filter(e);\n      }}/>\n      <div className=\"close-button clickable\" onClick={() => {\n        props.clearFilter();\n        setDisplayBox(!displayBox)\n      }}>&times;</div>\n    </div> :\n    <AiOutlineSearch className=\"filter-box clickable\" onClick={() => setDisplayBox(!displayBox)}/>);\n}\n","import React from 'react';\nimport FilterBox from './FilterBox';\nimport './FilterHeader.css';\n\nexport default function FilterHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <FilterBox filter={props.filter} clearFilter={props.clearFilter}/>\n      </div>\n    </th>\n  );\n}","import React from 'react';\n\nexport default function Description(props) {\n  const description = props.description;\n  return description === undefined || description === null ? \n    <p>暂无简介</p> :\n    <div>\n      <h1>{description.name}</h1>\n      <p>豆瓣评分：{description.douban}</p>\n      <p>年份：{description.year}</p>\n      <p>分类：{description.genre}</p>\n      <p>集数：{description.episodes}</p>\n      <p>单集片长：{description.episode_length}</p>\n      <p>简介：{description.description}</p>\n    </div>;\n}","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport './AnimeModal.css';\nimport '../App.css';\n\nexport default function AnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  console.log(oldValue);\n  console.log(props.id);\n  return <Form onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>豆瓣评分</Form.Label><Form.Control defaultValue={oldValue.douban} id=\"douban\" type=\"input\"/></Col>\n        <Col><Form.Label>年份</Form.Label><Form.Control defaultValue={oldValue.year} id=\"year\" type=\"input\"/></Col>\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>TV集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n        <Col><Form.Label>剧场版</Form.Label><Form.Control defaultValue={oldValue.movies} id=\"movies\" type=\"input\"/></Col>\n        <Col><Form.Label>单集片长</Form.Label><Form.Control defaultValue={oldValue.episode_length} id=\"episode_length\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Label>简介</Form.Label>\n      <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>剧情评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"story\" type=\"input\"/></Col>\n        <Col><Form.Label>作画评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"illustration\" type=\"input\"/></Col>\n        <Col><Form.Label>音乐评分</Form.Label><Form.Control defaultValue={oldValue.music} id=\"music\" type=\"input\"/></Col>\n        <Col><Form.Label>情怀评分</Form.Label><Form.Control defaultValue={oldValue.passion} id=\"passion\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>开始观看日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>结束观看日期</Form.Label><Form.Control defaultValue={oldValue.end_date} id=\"end_date\" type=\"input\"/></Col>\n        <Col><Form.Label>观看次数</Form.Label><Form.Control defaultValue={oldValue.times_watched} id=\"times_watched\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Button className=\"pink-button\" type=\"submit\">\n      提交\n    </Button>\n  </Form>\n}\n","import React, { useState, useEffect } from 'react';\nimport Parse from 'parse';\nimport * as Env from \"../environments\";\nimport AnimeDataContext from '../Context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport { BiEditAlt } from \"react-icons/bi\";\nimport SortHeader from './SortHeader';\nimport FilterHeader from './FilterHeader';\nimport Description from './Description';\nimport AnimeModal from './AnimeModal';\nimport '../App.css';\nimport './AnimeList.css';\n\nParse.initialize(Env.APPLICATION_ID, Env.JAVASCRIPT_KEY);\nParse.serverURL = Env.SERVER_URL;\n\nfunction AnimeList(props) {\n  const {ratings, descriptions} = React.useContext(AnimeDataContext);\n\n  const [activeDescription, setActiveDescription] = useState(null);\n  const [showDescription, setShowDescription] = useState(false);\n  const [showAnimeModal, setShowAnimeModal] = useState(false);\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [activeId, setActiveId] = useState();\n  const [displayList, setDisplayList] = useState([]);\n  const [filterList, setFilterList] = useState({});\n  const [sortedCol, setSortedCol] = useState();\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n  const tableHeaders = ['名称', '集数', '状态', '分类', '剧情', '作画', '音乐', '情怀', '评分', '首次观看日期', '观看次数', ''];\n\n  useEffect(() => {setDisplayList(ratings)}, [props.isLoading, ratings]);\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      setDisplayList(ratings.slice().sort((a, b) => {\n        console.log(a[sortedCol]);\n        if (a[sortedCol] > b[sortedCol]) {\n          return -1;\n        } else if (a[sortedCol] < b[sortedCol]) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }));\n      setSortedCol(null);\n    }\n  }, [sortedCol, ratings]);\n\n  useEffect(() => {\n    if (filterList.length !== 0) {\n      for (const [key, value] of Object.entries(filterList)) {\n        setDisplayList(ratings.filter((item) => item[key].includes(value)));\n      }\n      setFilterList([]);\n    }\n  }, [filterList, ratings]);\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      番剧评分加载失败！\n    </Alert>;\n  } else {\n    return (<div id=\"table-wrapper\">\n      <Modal centered size='lg' show={showDescription} onHide={() => setShowDescription(false)}>\n        <Modal.Header>\n          <Modal.Title>简介</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Description description={activeDescription}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button className=\"pink-button\">\n            编辑\n          </Button>\n          <Button className=\"pink-button\" onClick={() => setShowDescription(false)}>\n            关闭\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModal} onHide={() => setShowAnimeModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新番剧\" : \"编辑番剧\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              if (submitNewAnime) {\n                event.preventDefault();\n                props.onAnimeSubmit(event, null, true);\n                setShowAnimeModal(false);\n              } else {\n                event.preventDefault();\n                props.onAnimeSubmit(event, id, false);\n                setShowAnimeModal(false);\n              }\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <div className=\"button-group\">\n        <Button className=\"pink-button\" onClick={() => {\n          setEditAnimeOldValue(null);\n          setActiveId(null);\n          setShowAnimeModal(true);\n          setSubmitNewAnime(true);\n        }}>添加</Button>\n        <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '名称' || header === '分类' || header === '状态') {\n                  return <FilterHeader header={header}\n                    filter={(e) => {\n                      let newFilterList = {};\n                      for (let item in filterList) {\n                        newFilterList[item] = filterList[item];\n                      }\n                      newFilterList[translateHeader(header)] = e.target.value;\n                      setFilterList(newFilterList);\n                    }}\n                    clearFilter={() => {\n                      setFilterList({});\n                      setDisplayList(ratings);\n                    }}\n                  />;\n                } else if (header !== ''){\n                  return <SortHeader header={header} sort={() => setSortedCol(translateHeader(header))}/>;\n                } else {\n                  return <th></th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map(row =>\n                <tr key={row.name}>\n                  <td className='clickable' onClick={(e) => {\n                    setActiveDescription(\n                      {\n                        name: row.name,\n                        douban: row.douban,\n                        year: row.year,\n                        genre: row.genre,\n                        episodes: row.tv_episodes,\n                        episode_length: row.episode_length,\n                        description: row.description,\n                      }\n                    );\n                    setShowDescription(true);\n                  }}>{row.name}</td>\n                  <td>{formatEpisodes(row.tv_episodes, row.movies)}</td>\n                  <td>{row.status}</td>\n                  <td>{row.genre}</td>\n                  <td>{row.story}</td>\n                  <td>{row.illustration}</td>\n                  <td>{row.music}</td>\n                  <td>{row.passion}</td>\n                  <td>{row.rating}</td>\n                  <td>{formatDate(row.start_date, row.end_date)}</td>\n                  <td>{row.times_watched}</td>\n                  <td className=\"clickable\" onClick={() => {\n                    setActiveId(row.id);\n                    setEditAnimeOldValue({\n                      name: row.name,\n                      year: row.year,\n                      douban: row.douban,\n                      tv_episodes: row.tv_episodes,\n                      movies: row.movies,\n                      episode_length: row.episode_length,\n                      status: row.status,\n                      genre: row.genre,\n                      story: row.story,\n                      illustration: row.illustration,\n                      music: row.music,\n                      passion: row.passion,\n                      start_date: row.start_date.format('YYYY-MM-DD'),\n                      end_date: row.end_date.format('YYYY-MM-DD'),\n                      times_watched: row.times_watched,\n                    });\n                    setSubmitNewAnime(false);\n                    setShowAnimeModal(true);\n                  }}><BiEditAlt /></td>\n                </tr>)\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nfunction formatEpisodes(tv_episodes, movies) {\n  if (tv_episodes === undefined || movies === undefined) {\n    return \"\";\n  } else if (tv_episodes === 0) {\n    return `剧场版×${movies}`;\n  } else if (movies === 0) {\n    return `${tv_episodes}集`;\n  } else {\n    return `${tv_episodes}集+剧场版×${movies}`;\n  }\n}\n\nfunction formatDate(start_date, end_date) {\n  if (!start_date.isValid()) {\n    return \"\"\n  } else if (!end_date.isValid()) {\n    return `${start_date.format('YYYY-MM-DD')}至今`;\n  } else {\n    return `${start_date.format('YYYY-MM-DD')} 至 ${end_date.format('YYYY-MM-DD')}`;\n  }\n}\n\nfunction translateHeader(header) {\n  switch(header) {\n    case '名称':\n      return 'name';\n    case '集数':\n      return 'tv_episodes';\n    case '状态':\n      return 'status';\n    case '分类':\n      return 'genre';\n    case '剧情':\n      return 'story';\n    case '作画':\n      return 'illustration';\n    case '音乐':\n      return 'music';\n    case '情怀':\n      return 'passion';\n    case '评分':\n      return 'rating';\n    case '首次观看日期':\n      return 'start_date';\n    case '观看次数':\n      return 'times_watched';\n    default:\n      return 'unknown';\n  }\n}\n\nexport default AnimeList;","import React, { useState, useEffect } from 'react';\nimport Navivation from './components/Navigation';\nimport AnimeDataContext from './Context/AnimeDataContext';\nimport Home from './home/Home';\nimport Register from './register/Register';\nimport AnimeList from './components/AnimeList';\nimport * as Env from \"./environments\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Parse from 'parse';\nimport moment from 'moment';\nimport './App.css';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [ratings, setRatings] = useState([]);\n  const [descriptions, setDescriptions] = useState({\n    \"Anime 1\": {\n      name: \"Anime 1\",\n      episodes: 42,\n      status: \"已看\",\n      genre: \"恋爱\",\n      description: \"This is a description the anime.\"\n    }\n  });\n\n  const fetchRatings = async () => {\n    setIsLoading(true);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server\");\n      if (typeof document !== 'undefined'){\n        setRatings(results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            year: result.get(\"year\"),\n            douban: result.get(\"douban\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            movies: result.get(\"movies\"),\n            episode_length: result.get(\"episode_length\"),\n            status: result.get(\"status\"),\n            genre: result.get(\"genre\"),\n            description: result.get(\"description\"),\n            story: result.get(\"story\"),\n            illustration: result.get(\"illustration\"),\n            music: result.get(\"music\"),\n            passion: result.get(\"passion\"),\n            rating: Number((result.get(\"story\") + result.get(\"illustration\") + result.get(\"music\") + result.get(\"passion\")).toFixed(1)),\n            start_date: moment(result.get(\"start_date\"), 'YYYY-MM-DD'),\n            end_date: moment(result.get(\"end_date\"), 'YYYY-MM-DD'),\n            times_watched: result.get(\"times_watched\"),\n          }}\n        ));\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      if (typeof document !== 'undefined') document.write(`Error while fetching ParseObjects: ${JSON.stringify(error)}`);\n      console.error('Error while fetching ParseObjects', error);\n    });\n  };\n\n  const submitNewRating = async (newRating) => {\n    const RatingsObj = Parse.Object.extend('Ratings');\n    const newRatingObj = new RatingsObj();\n    console.log(newRating);\n    for (const [key, value] of Object.entries(newRating)) {\n      newRatingObj.set(key, value)\n    }\n\n    newRatingObj.save().then(\n      (result) => {\n        console.log(result);\n        alert(\"已提交更新！\");\n        fetchRatings();\n      },\n      (error) => {\n        console.log(error);\n        alert(\"更新失败，请稍后重试。\");\n      }\n    );\n  };\n\n  const updateRating = async (id, newRating) => {\n    console.log(newRating);\n    console.log(id);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newRating)) {\n        console.log(\"here\");\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        console.log(response);\n        alert(\"已提交更新！\");\n        fetchRatings();\n      }, (error) => {\n        console.log(error);\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchRatings();\n  }, []);\n\n  const handleAnimeSubmit = (event, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newRating = {\n      \"name\": formElements.name.value,\n      \"year\": formElements.year.value,\n      \"douban\": Number(formElements.douban.value),\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"movies\": Number(formElements.movies.value),\n      \"episode_length\": Number(formElements.episode_length.value),\n      \"status\": formElements.status.value,\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"story\": Number(formElements.story.value),\n      \"illustration\": Number(formElements.illustration.value),\n      \"music\": Number(formElements.music.value),\n      \"passion\": Number(formElements.passion.value),\n      \"start_date\": formElements.start_date.value,\n      \"end_date\": formElements.end_date.value,\n      \"times_watched\": Number(formElements.times_watched.value),\n    };\n    if (isNew) {\n      submitNewRating(newRating);\n    } else {\n      updateRating(id, newRating);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"App\">\n        <Navivation />\n        <Router basename={process.env.PUBLIC_URL + \"/bangumi-ratings\"}>\n          <Switch>\n            <AnimeDataContext.Provider value={{ratings: ratings, descriptions: descriptions}}>\n              <Route path=\"/\">\n                <AnimeList isLoading={isLoading} loadError={loadError} refresh={fetchRatings} onAnimeSubmit={handleAnimeSubmit}/>\n              </Route>\n              <Route path=\"/today\">\n\n              </Route>\n              <Route path=\"/calendar\">\n\n              </Route>\n            </AnimeDataContext.Provider>\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}