{"version":3,"sources":["environments.js","context/AuthenticationContext.jsx","components/Navigation.js","context/AnimeDataContext.jsx","components/SortHeader.js","components/FilterBox.js","components/FilterHeader.js","components/Description.js","components/AnimeModal.js","utils/utils.js","components/AnimeList.js","components/Rankings.js","components/DailyNewAnimes.js","components/NewAnimeList.js","components/MonthlySummary.js","components/SeasonalSummary.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APPLICATION_ID","JAVASCRIPT_KEY","SERVER_URL","AuthenticationContext","createContext","useAuthenticationContext","useContext","UserManagement","authenticated","setAuthenticating","handleSignOut","id","className","onClick","Navigation","props","Navbar","sticky","expand","Brand","href","Nav","activeKey","window","location","pathname","Item","Link","switchPage","animeData","ratings","newAnimes","monthlySummaries","AnimeDataContext","React","SortHeader","header","sort","FilterBox","useState","displayBox","setDisplayBox","placeholder","type","onKeyPress","e","key","filter","clearFilter","FilterHeader","Description","description","undefined","name","target","rel","douban","year","genre","episodes","episode_length","AnimeModal","oldValue","Form","onSubmit","event","onSubmitOrEdit","Group","controlId","Label","Control","defaultValue","Row","Col","status","tv_episodes","movies","as","rows","story","music","passion","start_date","end_date","times_watched","Button","formatEpisodes","formatTime","time","isNaN","Math","round","calculateDailyTime","row","days","diff","translate","word","sortList","rawList","sortedCol","slice","a","b","aQuantity","bQuantity","isValid","compare","getLatestRankings","currentSeason","rankings","forEach","newAnime","currentSeasonRankings","seasons_ranking","dates","Object","keys","latestRank","length","AnimeList","watchedHeaders","wantToWatchHeaders","activeDescription","setActiveDescription","showDescription","setShowDescription","showAnimeModal","setShowAnimeModal","showAnimeModalAuto","setShowAnimeModalAuto","showDeleteConfirmation","setShowDeleteConfirmation","submitNewAnime","setSubmitNewAnime","submitNewAnimeAuto","setSubmitNewAnimeAuto","animeToDelete","setAnimeToDelete","activeId","setActiveId","displayListStatus","setDisplayListStatus","displayList","setDisplayList","tableHeaders","setTableHeaders","filterList","setFilterList","setSortedCol","editAnimeOldValue","setEditAnimeOldValue","useEffect","rating","isLoading","value","item","includes","entries","changeStatus","newStatus","innerHTML","formatDescription","substring","loadError","Alert","variant","Modal","centered","size","show","onHide","Header","Title","Body","Footer","closeButton","preventDefault","onAnimeSubmit","info","pageSrc","split","parseInt","error","console","trim","parseDoubanPage","elements","html","illustration","deleteAnime","refresh","Table","striped","borderless","hover","map","newFilterList","idx","format","Rankings","res","anime","ranking","push","rankingsDictToArray","changeRanking","DailyNewAnimes","moment","subtract","add","locale","day","ListGroup","isSame","startDate","isAfter","todayAnime","NewAnimeModal","season","next_episode_day","formElements","document","getElementById","handleRateNewAnime","Number","NewAnimeList","seasons","setSeasons","showAddModal","setShowAddModal","showRateModal","setShowRateModal","showRankings","setShowRankings","showToday","setShowToday","setRankings","localRankings","setLocalRankings","displayListSeason","setDisplayListSeason","rateAnimePartialInfo","setRateAnimePartialInfo","changeSeason","sortAnimesByRankings","animes","filteredNewAnimes","d","Date","getFullYear","month","floor","getMonth","preSeason","nextSeason","getSeason","newRanking","max","values","onNewAnimeSubmit","partialInfo","deleteNewAnime","offset","newAnimeName","currentTarget","parentElement","getElementsByClassName","innerText","originRanking","newRankings","possibleToChange","getMaxRanking","updatedIds","dateString","assign","updateNewAnimesRankings","QuoteModificationContext","useQuoteModificationContext","Quote","setQuoteToEdit","setShowQuoteModal","setIsNewQuote","setActiveQuoteId","quote","content","translation","person","bangumi","Summary","addNewQuote","summary","bangumi_num","tv_episode_num","total_time","daysInMonth","quotes","bangumis","bangumi_name","MonthlySummary","isNewQuote","showQuoteModal","activeQuoteId","quoteToEdit","activeMonth","setActiveMonth","onQuoteSubmit","deleteQuote","localeCompare","sortMonthlySummaries","entry","Provider","SeasonalSummary","summaryData","setSummaryData","formatRankingData","data","date","splitted","UTC","tempData","seasonRankings","chart","height","borderRadius","title","text","xAxis","labels","yAxis","tickInterval","min","reversed","series","newSummaryData","Array","from","e1","e2","season1","season2","year1","month1","replace","year2","month2","compareSeason","highcharts","Highcharts","options","Login","username","password","setUsername","setPassword","handleLogin","autoFocus","onChange","disabled","Parse","initialize","Env","serverURL","App","setAuthenticated","authenticating","userStr","sessionStorage","getItem","JSON","parse","getUser","user","setUser","token","setToken","setIsLoading","setLoadError","activePage","setActivePage","setRatings","setNewAnimes","summaries","setSummaries","setQuotes","fetchRatings","ratingsObj","extend","query","Query","limit","find","then","results","log","result","get","toFixed","fetchQuotes","quotesObj","fetchNewAnimes","submitNewEntry","newEntry","databaseName","DataObject","equalTo","alert","newObj","set","save","submitNewQuote","newQuote","QuotesObj","newQuotesObj","updateEntry","obj","object","response","updateQuote","ids","containedIn","saveAll","err","deleteEntry","destroy","tempSummaries","endMonth","movie_num","daily_time","handleAnimeSubmit","isNew","newRating","handleNewAnimeSubmit","latestSeason","newSeasonsRanking","handleQuoteSubmit","User","logIn","setItem","stringify","setUserSession","getSessionToken","getUsername","catch","message","removeItem","mainElement","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee1bce32.chunk.js","sourcesContent":["module.exports = {\n    APPLICATION_ID: '54T0X4tWovUBdnRd6EKdW3BrN4WJrpGBEJdwDk9J',\n    JAVASCRIPT_KEY: 'WREbi60D2GfVknGhH9Je1GJ931oIhIVkHUXD9u5R',\n    SERVER_URL: 'https://parseapi.back4app.com/'\n}","import { useContext, createContext } from \"react\";\n\nexport const AuthenticationContext = createContext(null);\n\nexport function useAuthenticationContext() {\n  return useContext(AuthenticationContext);\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport './Navigation.css';\nimport '../App.css';\n\nfunction UserManagement() {\n  const { authenticated, setAuthenticating, handleSignOut } = useAuthenticationContext();\n  if (authenticated) {\n    return <div id=\"user-management\">\n        <div className=\"text-button clickable\" onClick={handleSignOut}>注销</div>\n      </div>\n  } else {\n    return <div className=\"text-button clickable\" onClick={() => setAuthenticating(true)}>登陆</div>\n  }\n}\n\nfunction Navigation(props) {\n  return (\n    <Navbar sticky=\"top\" expand=\"lg\" id=\"navbar\">\n      <Navbar.Brand href=\"/\">追番补番</Navbar.Brand>\n      <Nav className=\"mr-auto\" activeKey={window.location.pathname}>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"AnimeList\")}>补番列表</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"NewAnimeList\")}>追番列表</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"MonthlySummary\")}>每月总结</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"SeasonalSummary\")}>季度总结</Nav.Link></Nav.Item>\n      </Nav>\n      <UserManagement />\n    </Navbar>\n  );\n}\n\nexport default Navigation;\n","import React from 'react';\n\nconst animeData = {\n  ratings: [],\n  newAnimes: [],\n  monthlySummaries: {}\n}\n\nconst AnimeDataContext = React.createContext(animeData);\n\nexport default AnimeDataContext;","import React from 'react';\nimport { BiSort } from \"react-icons/bi\";\nimport '../App.css';\n\nexport default function SortHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <BiSort className='icon clickable' onClick={props.sort}/>\n      </div>\n    </th>\n  );\n}","import React, { useState } from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './FilterBox.css';\nimport '../App.css';\n\nexport default function FilterBox(props) {\n  const [displayBox, setDisplayBox] = useState(false);\n  return (displayBox ? \n    <div className=\"filter-box\">\n      <input className=\"filter-input-box\" placeholder=\"输入......\" type=\"text\" onKeyPress={(e) => {\n        if (e.key === \"Enter\") props.filter(e);\n      }}/>\n      <div className=\"close-button clickable\" onClick={() => {\n        props.clearFilter();\n        setDisplayBox(!displayBox)\n      }}>&times;</div>\n    </div> :\n    <AiOutlineSearch className=\"filter-box icon clickable\" onClick={() => setDisplayBox(!displayBox)}/>);\n}\n","import React from 'react';\nimport FilterBox from './FilterBox';\nimport './FilterHeader.css';\n\nexport default function FilterHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <FilterBox filter={props.filter} clearFilter={props.clearFilter}/>\n      </div>\n    </th>\n  );\n}","import React from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './Description.css';\n\nexport default function Description(props) {\n  const description = props.description;\n  return description === undefined || description === null ? \n    <p>暂无简介</p> :\n    <div className=\"description\">\n      <div>\n        <h1>\n          {description.name}\n          <a href={\"https://www.douban.com/search?q=\" + description.name} target=\"_blank\" rel=\"noopener noreferrer\">\n            <AiOutlineSearch className=\"icon clickable\" />\n          </a>\n        </h1>\n        <p>豆瓣评分：{description.douban}</p>\n        <p>年份：{description.year}</p>\n        <p>分类：{description.genre}</p>\n        <p>集数：{description.episodes}</p>\n        <p>单集片长：{description.episode_length}</p>\n        <p>简介：{description.description}</p>\n      </div>\n    </div>;\n}","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './AnimeModal.css';\nimport '../App.css';\n\nexport default function AnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  return <Form onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>豆瓣评分<a href={\"https://www.douban.com\"} target=\"_blank\" rel=\"noopener noreferrer\"><AiOutlineSearch className=\"icon clickable\" /></a></Form.Label><Form.Control defaultValue={oldValue.douban} id=\"douban\" type=\"input\"/></Col>\n        <Col><Form.Label>年份</Form.Label><Form.Control defaultValue={oldValue.year} id=\"year\" type=\"input\"/></Col>\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>TV集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n        <Col><Form.Label>剧场版</Form.Label><Form.Control defaultValue={oldValue.movies} id=\"movies\" type=\"input\"/></Col>\n        <Col><Form.Label>单集片长</Form.Label><Form.Control defaultValue={oldValue.episode_length} id=\"episode_length\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Label>简介</Form.Label>\n      <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>剧情评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"story\" type=\"input\"/></Col>\n        <Col><Form.Label>作画评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"illustration\" type=\"input\"/></Col>\n        <Col><Form.Label>音乐评分</Form.Label><Form.Control defaultValue={oldValue.music} id=\"music\" type=\"input\"/></Col>\n        <Col><Form.Label>情怀评分</Form.Label><Form.Control defaultValue={oldValue.passion} id=\"passion\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>开始观看日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>结束观看日期</Form.Label><Form.Control defaultValue={oldValue.end_date} id=\"end_date\" type=\"input\"/></Col>\n        <Col><Form.Label>观看次数</Form.Label><Form.Control defaultValue={oldValue.times_watched} id=\"times_watched\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Button className=\"pink-button\" type=\"submit\">\n      提交\n    </Button>\n\n  </Form>\n}\n","// return the user data from the session storage\nexport const getUser = () => {\n  const userStr = sessionStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  else return null;\n}\n \n// return the token from the session storage\nexport const getToken = () => {\n  return sessionStorage.getItem('token') || null;\n}\n \n// remove the token and user from the session storage\nexport const removeUserSession = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n}\n \n// set the token and user from the session storage\nexport const setUserSession = (user, token) => {\n  sessionStorage.setItem('token', token);\n  sessionStorage.setItem('user', JSON.stringify(user));\n}\n\nexport function formatEpisodes(tv_episodes, movies) {\n  if (tv_episodes === undefined || movies === undefined) {\n    return \"\";\n  } else if (tv_episodes === 0) {\n    return `剧场版×${movies}`;\n  } else if (movies === 0) {\n    return `${tv_episodes}集`;\n  } else {\n    return `${tv_episodes}集+剧场版×${movies}`;\n  }\n}\n\nexport function formatDate(start_date, end_date) {\n  if (!start_date.isValid()) {\n    return \"\"\n  } else if (!end_date.isValid()) {\n    return `${start_date.format('MM/DD/YY')}至今`;\n  } else {\n    return `${start_date.format('MM/DD/YY')} 至 ${end_date.format('MM/DD/YY')}`;\n  }\n}\n\nexport function formatTime(time) {\n  if (isNaN(time)) {\n    return \"-\";\n  }\n  if (time >= 60) {\n    return Math.round(time / 60 * 10) / 10 + \" 小时\";\n  } else {\n    return Math.round(time * 10) / 10 + \" 分钟\";\n  }\n}\n\nexport function calculateDailyTime(row) {\n  const days = row.end_date.diff(row.start_date, 'days') + 1;\n  const episode_length = row.episode_length === undefined || row.episode_length === 0 ? 24 : row.episode_length;\n  const totalTime = row.tv_episodes * episode_length + row.movies * 90;\n  return totalTime / days;\n}\n\nexport function translate(word) {\n  switch(word) {\n    case '名称':\n      return 'name';\n    case '集数':\n    case '预计集数':\n      return 'tv_episodes';\n    case '状态':\n      return 'status';\n    case '分类':\n      return 'genre';\n    case '剧情':\n      return 'story';\n    case '作画':\n      return 'illustration';\n    case '音乐':\n      return 'music';\n    case '情怀':\n      return 'passion';\n    case '评分':\n      return 'rating';\n    case '首次观看日期':\n      return 'end_date';\n    case '观看次数':\n      return 'times_watched';\n    case '年份':\n      return 'year';\n    case '豆瓣评分':\n      return 'douban';\n    case '日均时长':\n      return 'daily_time';\n    case '排名':\n      return 'ranking';\n    case '季度':\n      return 'season';\n    case '开始放送日期':\n      return 'start_date';\n    case '更新日':\n      return 'next_episode_day';\n    default:\n      return 'unknown';\n  }\n}\n\nexport function sortList(rawList, sortedCol) {\n  return rawList.slice().sort((a, b) => {\n    const aQuantity = sortedCol === \"daily_time\" ? calculateDailyTime(a) : a[sortedCol];\n    const bQuantity = sortedCol === \"daily_time\" ? calculateDailyTime(b) : b[sortedCol];\n    if (sortedCol === \"start_date\" && typeof sortedCol !== \"string\") {\n      if (!aQuantity.isValid()) {\n        return 1;\n      } else if (!bQuantity.isValid()) {\n        return -1;\n      } else {\n        return compare(aQuantity, bQuantity);\n      }\n    } else {\n      return compare(aQuantity, bQuantity);\n    }\n  });\n}\n\nfunction compare(a, b) {\n  if (a > b) {\n    return -1;\n  } else if (a < b) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nexport function parseDoubanPage(pageSrc) {\n  const name = pageSrc.split(\"\\n\")[5].split(\" \")[0];\n  const year = pageSrc.split(\"首播: \")[1].split(\"-\")[0];\n  const douban = pageSrc.split(\"豆瓣评分\")[1].split(\"\\n\")[1];\n  let tv_episodes = 12;\n  try {\n    tv_episodes = parseInt(pageSrc.split(\"集数: \")[1].split(\"-\")[0]);\n  } catch (error) {\n    console.error(error);\n  }\n  let episode_length = 24;\n  try {\n    episode_length = parseInt(pageSrc.split(\"单集片长: \")[1].split(\"-\")[0]);\n  } catch (error) {\n    console.error(error);\n  }\n  const description = pageSrc.split(\"的剧情简介 · · · · · ·\")[1].split(\"\\n\\n\")[1].trim();\n  return {\n    name: name,\n    year: year,\n    douban: douban,\n    tv_episodes: isNaN(tv_episodes) ? 0 : tv_episodes,\n    episode_length: isNaN(episode_length) ? 12: episode_length,\n    description: description,\n  }\n}\n\nexport function getSeason() {\n  const d = new Date();\n  const year = d.getFullYear();\n  const month = Math.floor(d.getMonth()/3) * 3 + 1;\n  const curSeason = year + \"年\" + month + \"月\";\n  let preSeason = year + \"年\" + (month - 3) + \"月\";\n  let nextSeason = year + \"年\" + (month + 3) + \"月\";\n  if (month === 1) {\n    preSeason = (year - 1) + \"年10月\";\n  }\n  if (month === 10) {\n    nextSeason = (year + 1) + \"年1月\";\n  }\n  return [preSeason, curSeason, nextSeason];\n}\n\nexport function getLatestRankings(newAnimes, currentSeason) {\n  let rankings = {};\n  newAnimes.forEach(newAnime => {\n    const currentSeasonRankings = newAnime.seasons_ranking[currentSeason];\n    const dates = Object.keys(currentSeasonRankings);\n    const latestRank = currentSeasonRankings[dates.sort()[dates.length - 1]];\n    rankings[newAnime.name] = latestRank;\n  });\n  return rankings;\n}\n\nexport function compareSeason(season1, season2) {\n  const year1 = parseInt(season1.split(\"年\")[0]);\n  const month1 = parseInt(season1.split(\"年\")[1].replace(\"日\", \"\"));\n  const year2 = parseInt(season2.split(\"年\")[0]);\n  const month2 = parseInt(season2.split(\"年\")[1].replace(\"日\", \"\"));\n  if (year1 === year2) {\n    return month1 - month2;\n  } else {\n    return year1 - year2;\n  }\n}","import React, { useState, useEffect } from 'react';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport SortHeader from './SortHeader';\nimport FilterHeader from './FilterHeader';\nimport Description from './Description';\nimport AnimeModal from './AnimeModal';\nimport { sortList, formatEpisodes, formatDate, translate, calculateDailyTime, formatTime, parseDoubanPage } from \"../utils/utils\";\nimport '../App.css';\nimport './AnimeList.css';\n\nfunction AnimeList(props) {\n\n  const { authenticated } = useAuthenticationContext();\n  \n  const { ratings } = React.useContext(AnimeDataContext);\n\n  const watchedHeaders = ['序号', '名称', '集数', '分类', '剧情', '作画', '音乐', '情怀', '评分', '首次观看日期', '日均时长', ''];\n  const wantToWatchHeaders = ['序号', '名称', '集数', '分类', '年份', '豆瓣评分', '简介', ''];\n  const [activeDescription, setActiveDescription] = useState(null);\n  const [showDescription, setShowDescription] = useState(false);\n  const [showAnimeModal, setShowAnimeModal] = useState(false);\n  const [showAnimeModalAuto, setShowAnimeModalAuto] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [submitNewAnimeAuto, setSubmitNewAnimeAuto] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayListStatus, setDisplayListStatus] = useState(\"已看\");\n  const [displayList, setDisplayList] = useState(ratings);\n  const [tableHeaders, setTableHeaders] = useState(watchedHeaders);\n  const [filterList, setFilterList] = useState({});\n  const [sortedCol, setSortedCol] = useState();\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n\n  useEffect(() => {setSortedCol(\"end_date\")}, []);\n\n  useEffect(() => {\n    setFilterList([]);\n    setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"end_date\"));\n  }, [props.isLoading, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      if (displayListStatus === '在看' && sortedCol === \"end_date\") {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"start_date\"));\n      } else {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), sortedCol));\n      }\n      setSortedCol(null);\n    } else {\n      if (displayListStatus === '在看' ) {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"start_date\"));\n      }\n    }\n  }, [sortedCol, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (filterList.length !== 0) {\n      for (const [key, value] of Object.entries(filterList)) {\n        setDisplayList(ratings.filter((item) => {\n          return item[key].includes(value) && item.status === displayListStatus;\n        }));\n      }\n      setFilterList([]);\n    }\n  }, [ratings, filterList, displayListStatus]);\n\n  const changeStatus = (e) => {\n    const newStatus = e.target.innerHTML;\n    if (newStatus === '想看') {\n      setTableHeaders(wantToWatchHeaders);\n    } else {\n      setTableHeaders(watchedHeaders);\n    }\n    setDisplayListStatus(newStatus);\n  }\n\n  const formatDescription = (description) => {\n    if (description !== null && description !== undefined) {\n      return description.substring(0, 20) + '......';\n    }\n  }\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      番剧评分加载失败！\n    </Alert>;\n  } else {\n    return (<div className=\"main-element\">\n      <Modal centered size='lg' show={showDescription} onHide={() => setShowDescription(false)}>\n        <Modal.Header>\n          <Modal.Title>简介</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Description description={activeDescription}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button className=\"pink-button\" onClick={() => setShowDescription(false)}>\n            关闭\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModal} onHide={() => setShowAnimeModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新番剧\" : \"编辑番剧\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              if (submitNewAnime) {\n                props.onAnimeSubmit(event, null, true);\n              } else if (submitNewAnimeAuto) {\n                props.onAnimeSubmit(event, null, true);\n              } else {\n                props.onAnimeSubmit(event, id, false);\n              }\n              setShowAnimeModal(false);\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModalAuto} onHide={() => setShowAnimeModalAuto(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>添加新番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={(event) => {\n            event.preventDefault();\n            const info = parseDoubanPage(event.target.elements.html.value);\n            setEditAnimeOldValue({\n              name: info.name,\n              year: info.year,\n              douban: info.douban,\n              tv_episodes: info.tv_episodes,\n              movies: 0,\n              episode_length: info.episode_length,\n              status: \"想看\",\n              genre: \"\",\n              description: info.description,\n              story: 0,\n              illustration: 0,\n              music: 0,\n              passion: 0,\n              start_date: null,\n              end_date: null,\n              times_watched: 0,\n            });\n            setSubmitNewAnimeAuto(true);\n            setShowAnimeModalAuto(false);\n            setActiveId(null);\n            setShowAnimeModal(true);\n          }}>\n            <Form.Group>\n              <Form.Label>豆瓣页面源</Form.Label>\n              <Form.Control id=\"html\" as=\"textarea\" rows=\"10\" />\n            </Form.Group>\n            <Button className=\"pink-button\" type=\"submit\">\n              提交\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteAnime(animeToDelete.id, \"Ratings\");\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          <Button className=\"pink-button\" onClick={changeStatus}>已看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>在看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>想看</Button>\n        </div>\n        <div>\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModal(true);\n            setSubmitNewAnime(true);\n          }}>手动添加</Button> : <></>}\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModalAuto(true);\n            setSubmitNewAnime(true);\n          }}>自动添加</Button> : <></>}\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '名称' || header === '分类') {\n                  return <FilterHeader key={header} header={header}\n                    filter={(e) => {\n                      let newFilterList = {};\n                      for (let item in filterList) {\n                        newFilterList[item] = filterList[item];\n                      }\n                      newFilterList[translate(header)] = e.target.value;\n                      setFilterList(newFilterList);\n                    }}\n                    clearFilter={() => {\n                      setFilterList([]);\n                      setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"end_date\"));\n                    }}\n                  />;\n                } else if (header === '序号') {\n                  return <th key={header} >序号</th>\n                } else if (header !== ''){\n                  return <SortHeader key={header} header={header} sort={() => setSortedCol(translate(header))}/>;\n                } else {\n                  return <th key={header} ></th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map((row, idx) =>\n                <tr key={row.name}>\n                  <td>{idx + 1}</td>\n                  <td className='anime-name clickable' onClick={(e) => {\n                    setActiveDescription(\n                      {\n                        name: row.name,\n                        douban: row.douban,\n                        year: row.year,\n                        genre: row.genre,\n                        episodes: row.tv_episodes,\n                        episode_length: row.episode_length,\n                        description: row.description,\n                      }\n                    );\n                    setShowDescription(true);\n                  }}>{row.name}</td>\n                  <td>{formatEpisodes(row.tv_episodes, row.movies)}</td>\n                  <td>{row.genre}</td>\n                  <td>{displayListStatus === '想看' ? row.year : row.story}</td>\n                  <td>{displayListStatus === '想看' ? row.douban : row.illustration}</td>\n                  <td>{displayListStatus === '想看' ? formatDescription(row.description) : row.music}</td>\n                  {displayListStatus === '想看' ? \"\" : <td>{row.passion}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{row.rating}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatDate(row.start_date, row.end_date)}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatTime(calculateDailyTime(row))}</td>}\n                  <td> {authenticated ?\n                      <>\n                        <BiEditAlt className=\"clickable\" onClick={() => {\n                          setActiveId(row.id);\n                          setEditAnimeOldValue({\n                            name: row.name,\n                            year: row.year,\n                            douban: row.douban,\n                            tv_episodes: row.tv_episodes,\n                            movies: row.movies,\n                            episode_length: row.episode_length,\n                            status: row.status,\n                            genre: row.genre,\n                            description: row.description,\n                            story: row.story,\n                            illustration: row.illustration,\n                            music: row.music,\n                            passion: row.passion,\n                            start_date: row.start_date.format('YYYY-MM-DD'),\n                            end_date: row.end_date.format('YYYY-MM-DD'),\n                            times_watched: row.times_watched,\n                          });\n                          setSubmitNewAnime(false);\n                          setShowAnimeModal(true);\n                        }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                          setAnimeToDelete({\n                            name: row.name,\n                            id: row.id,\n                          });\n                          setShowDeleteConfirmation(true);\n                        }}/>\n                      </> : <></>\n                    }\n                    </td>\n                </tr>)\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nexport default AnimeList;","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport { BsFileArrowUp, BsFileArrowDown } from \"react-icons/bs\";\nimport './Rankings.css'\nimport '../App.css';\n\nexport default function Rankings(props) {\n  const rankingsDictToArray = (rankings) => {\n    let res = [];\n    for (const [anime, ranking] of Object.entries(rankings)) {\n      res.push([anime, ranking]);\n    }\n    res.sort(function(a, b) {\n        return a[1] - b[1];\n    });\n    return res;\n  }\n\n  return <div>\n    <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n      <thead>\n        <tr className='table-headers'>\n          <th>排名</th>\n          <th>名称</th>\n          <th>调整排名</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n        rankingsDictToArray(props.rankings).map(row => \n          <tr key={row[0]}>\n            <td>{row[1]}</td>\n            <td className='new-anime-name'>{row[0]}</td>\n            <td className=\"update-ranking-buttons\">\n              <>\n                <Button className=\"pink-button\" onClick={(e) => props.changeRanking(e, -1)}><BsFileArrowUp/></Button>\n                <Button className=\"pink-button\" onClick={(e) => props.changeRanking(e, 1)}><BsFileArrowDown/></Button>\n              </>\n            </td>\n          </tr>\n        )\n      }\n      </tbody>\n    </Table>\n  </div>\n}","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport './DailyNewAnimes.css';\n\nexport default function DailyNewAnimes(props) {\n\n  const days = [moment().subtract(1,'days'), moment(), moment().add(1, 'days')];\n\n  moment.locale('zh-cn');\n\n  return <div id=\"daily-new-animes\">\n            {days.map(day => \n              <ListGroup>\n                <ListGroup.Item variant={day.isSame(moment(), 'day') ? 'primary' : 'dark'}>{day.format('dddd[，]YYYY[年]MMMDo ')}</ListGroup.Item>\n                {props.displayList.filter(newAnime => {\n                  const startDate = moment(newAnime.start_date);\n                  return day.isAfter(startDate) && day.diff(startDate, 'days') % 7 === 0;\n                }).map(todayAnime => <ListGroup.Item key={todayAnime.name}>{todayAnime.name}</ListGroup.Item>)}\n              </ListGroup>\n            )}\n          </div>\n}","import React, { useState, useEffect } from 'react';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Alert from 'react-bootstrap/Alert';\nimport moment from 'moment';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport SortHeader from './SortHeader';\nimport AnimeModal from './AnimeModal';\nimport Rankings from './Rankings';\nimport DailyNewAnimes from './DailyNewAnimes';\nimport { getSeason, formatEpisodes, translate, sortList, getLatestRankings } from \"../utils/utils\";\nimport '../App.css';\nimport './NewAnimeList.css';\n\nfunction NewAnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  return <Form id=\"new-anime-modal\" onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Row className=\"input-row\">\n        <Col><Form.Label>季度</Form.Label><Form.Control defaultValue={oldValue.season} id=\"season\" type=\"input\"/></Col>\n        <Col><Form.Label>开始放送日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>更新日</Form.Label><Form.Control defaultValue={oldValue.next_episode_day} id=\"next_episode_day\" type=\"input\"/></Col>\n      </Form.Row>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>预计集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Group>\n      <Form.Label>简介</Form.Label>\n        <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n      </Form.Group>\n    </Form.Group>\n    <div>\n      <Button className=\"pink-button\" type=\"submit\">\n        提交\n      </Button>\n      {props.submitNewAnime ? <></> : <Button onClick={() => {\n        const formElements = document.getElementById(\"new-anime-modal\").elements;\n        props.handleRateNewAnime({\n          \"name\": formElements.name.value,\n          \"tv_episodes\": Number(formElements.tv_episodes.value),\n          \"genre\": formElements.genre.value,\n          \"description\": formElements.description.value,\n          \"start_date\": formElements.start_date.value,\n          \"status\": formElements.status.value\n        });\n      }}>已追完</Button>}\n    </div>\n\n  </Form>\n}\n\nfunction NewAnimeList(props) {\n\n  const { authenticated } = useAuthenticationContext();\n  const { newAnimes } = React.useContext(AnimeDataContext);\n\n  const tableHeaders = ['排名', '名称', '分类', '季度', '开始放送日期', '更新日', '预计集数', '状态', '']\n\n  const [seasons, setSeasons] = useState([])\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showRateModal, setShowRateModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [showRankings, setShowRankings] = useState(false);\n  const [showToday, setShowToday] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [localRankings, setLocalRankings] = useState({});\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayList, setDisplayList] = useState(newAnimes);\n  const [displayListSeason, setDisplayListSeason] = useState(null);\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n  const [sortedCol, setSortedCol] = useState(null);\n  const [rateAnimePartialInfo, setRateAnimePartialInfo] = useState(null);\n\n  useEffect(() => {setSortedCol(\"ranking\")}, []);\n\n  const handleRateNewAnime = (partialInfo) => {\n    partialInfo.status = \"已看\";\n    setRateAnimePartialInfo(partialInfo);\n    setShowAddModal(false);\n    setShowRateModal(true);\n  }\n\n  const changeSeason = (e) => {\n    setDisplayListSeason(e.target.innerHTML);\n  }\n\n  const sortAnimesByRankings = (animes, rankings) => {\n    animes.sort((a, b) => {\n      if (rankings[a.name] > rankings[b.name]) return 1;\n      if (rankings[a.name] < rankings[b.name]) return -1;\n      return 0;\n    })\n  }\n\n  const getMaxRanking = (rankings) => {\n    let max = -1;\n    for (const anime of Object.keys(rankings)) {\n      if (rankings[anime] > max) {\n        max = rankings[anime];\n      }\n    }\n    return max;\n  }\n\n  const changeRanking = (e, offset) => {\n    const newAnimeName = e.currentTarget.parentElement.parentElement.getElementsByClassName('new-anime-name')[0].innerText;\n    const originRanking = localRankings[newAnimeName];\n    const newRankings = {};\n    let possibleToChange = false;\n    if (offset === 1) {\n      possibleToChange = originRanking !== getMaxRanking(localRankings);\n    } else if (offset === -1) {\n      possibleToChange = originRanking !== 1;\n    }\n    if (possibleToChange) {\n      for (const [anime, ranking] of Object.entries(localRankings)) {\n        if (anime === newAnimeName) {\n          newRankings[anime] = originRanking + offset;\n        } else if (ranking === originRanking + offset) {\n          newRankings[anime] = originRanking;\n        } else {\n          newRankings[anime] = ranking;\n        }\n      }\n      setLocalRankings(newRankings);\n    }\n  }\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      const filteredNewAnimes = newAnimes.filter((newAnime) => newAnime.season.includes(displayListSeason));\n      if (sortedCol === 'ranking') {\n        sortAnimesByRankings(filteredNewAnimes, rankings);\n        setDisplayList(filteredNewAnimes);\n      } else {\n        setDisplayList(sortList(filteredNewAnimes, sortedCol));\n      }\n      setSortedCol(null);\n    }\n  }, [sortedCol, newAnimes, displayListSeason, rankings]);\n\n  useEffect(() => {\n    const seasons = getSeason();\n    setSeasons(seasons);\n    setDisplayListSeason(seasons[1]);\n  }, [])\n\n  useEffect(() => {\n    const filteredNewAnimes = newAnimes.filter((newAnime) => newAnime.season.includes(displayListSeason));\n    const rankings = getLatestRankings(filteredNewAnimes, displayListSeason);\n    sortAnimesByRankings(filteredNewAnimes, rankings);\n    setDisplayList(filteredNewAnimes);\n    setRankings(rankings);\n    setLocalRankings(rankings);\n  }, [props.isLoading, newAnimes, displayListSeason])\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      追番列表加载失败！\n    </Alert>;\n  } else {\n    return (<div className=\"main-element\">\n      <Modal centered size='lg' show={showAddModal} onHide={() => setShowAddModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新追番\" : \"编辑追番\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <NewAnimeModal\n            submitNewAnime={submitNewAnime}\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              if (submitNewAnime) {\n                const newRanking = Math.max(...Object.values(getLatestRankings(displayList, displayListSeason))) + 1;\n                props.onNewAnimeSubmit(event, null, true, newRanking);\n              } else {\n                props.onNewAnimeSubmit(event, id, false);\n              }\n              setShowAddModal(false);\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n            handleRateNewAnime={handleRateNewAnime}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size='lg' show={showRateModal} onHide={() => setShowRateModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>评价番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              props.onAnimeSubmit(event, id, true);\n              setShowRateModal(false);\n            }}\n            oldValue={rateAnimePartialInfo}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteNewAnime(animeToDelete.id, \"NewAnimes\");\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showRankings} onHide={() => setShowRankings(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>番剧排名</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Rankings rankings={localRankings} changeRanking={changeRanking}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            const updatedIds = [];\n            const newRankings = {};\n            const dateString = moment().format(\"YYYY-MM-DD\");\n            displayList.forEach(row => {\n              updatedIds.push(row.id);\n              const newRanking = Object.assign({}, row.seasons_ranking);\n              newRanking[displayListSeason][dateString] = localRankings[row.name];\n              newRankings[row.id] = newRanking;\n            })\n            props.updateNewAnimesRankings(updatedIds, newRankings, displayListSeason);\n            setShowRankings(false)\n          }}>提交</Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showToday} onHide={() => setShowToday(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>近期更新</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <DailyNewAnimes displayList={displayList}/>\n        </Modal.Body>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          {seasons.map(season => <Button key={season} className=\"pink-button\" onClick={changeSeason}>\n            {season}\n          </Button>)}\n        </div>\n        <div>\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setSubmitNewAnime(true);\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAddModal(true);\n          }}>添加追番</Button> : <></>}\n          {authenticated ? <Button className=\"pink-button\" onClick={() => setShowRankings(true)}>排名</Button> : <></>}\n          <Button className=\"pink-button\" onClick={() => setShowToday(true)}>近期更新</Button>\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '更新日' || header === '排名' || header === '开始放送日期'){\n                  return <SortHeader key={header} header={header} sort={() => setSortedCol(translate(header))}/>;\n                } else {\n                  return <th key={header} >{header}</th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map(row => \n                <tr key={row.name}>\n                  <td>{rankings[row.name]}</td>\n                  <td className='anime-name'>{row.name}</td>\n                  <td>{row.genre}</td>\n                  <td>{row.season}</td>\n                  <td>{row.start_date}</td>\n                  <td>{row.next_episode_day}</td>\n                  <td>{formatEpisodes(row.tv_episodes, 0)}</td>\n                  <td>{row.status}</td>\n                  <td> {authenticated ?\n                    <>\n                      <BiEditAlt className=\"clickable\" onClick={() => {\n                        setActiveId(row.id);\n                        setEditAnimeOldValue({\n                          name: row.name,\n                          tv_episodes: row.tv_episodes,\n                          genre: row.genre,\n                          description: row.description,\n                          start_date: row.start_date,\n                          next_episode_day: row.next_episode_day,\n                          season: row.season,\n                          status: row.status\n                        });\n                        setSubmitNewAnime(false);\n                        setShowAddModal(true);\n                      }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                        setAnimeToDelete({\n                          name: row.name,\n                          id: row.id,\n                        });\n                        setShowDeleteConfirmation(true);\n                      }}/>\n                    </> : <></>\n                  }</td>\n                </tr>  \n              )\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nexport default NewAnimeList;","import React, { useState, useContext, createContext } from 'react';\nimport moment from 'moment';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport { FiPlusCircle } from \"react-icons/fi\";\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport { formatTime } from \"../utils/utils\";\nimport './MonthlySummary.css';\nimport '../App.css';\n\nconst QuoteModificationContext = createContext(null);\n\nfunction useQuoteModificationContext() {\n  return useContext(QuoteModificationContext);\n}\n\nfunction Quote(props) {\n  const { authenticated } = useAuthenticationContext();\n  const { setQuoteToEdit, setShowQuoteModal, setIsNewQuote, setActiveQuoteId, setShowDeleteConfirmation } = useQuoteModificationContext();\n  return <blockquote>\n    <div className=\"quote-content\">{props.quote.content}</div>\n    <div className=\"quote-translation\">{props.quote.translation}</div>\n    <cite>\n      {props.quote.person + \"《\" + props.quote.bangumi + \"》\"}\n      {authenticated ? <BiEditAlt className=\"icon clickable\"\n        onClick={() => {\n          setIsNewQuote(false);\n          setQuoteToEdit(props.quote);\n          setShowQuoteModal(true);\n        }}/> : <></>}\n      {authenticated ? <BiTrash className=\"icon clickable\"\n        onClick={() => {\n          setActiveQuoteId(props.quote.id);\n          setShowDeleteConfirmation(true);\n        }}/> : <></>}\n    </cite>\n  </blockquote>\n}\n\nfunction Summary(props) {\n  const { authenticated } = useAuthenticationContext();\n  const { setIsNewQuote, setQuoteToEdit, addNewQuote } = useQuoteModificationContext();\n  return <div className=\"summary\">\n    <div className=\"summary-title\">\n      <div className=\"summary-info\">\n        <div className=\"year-month\">\n          <div className=\"month\">{moment(props.month).format(\"MM\")}</div>\n          <div className=\"year\">{moment(props.month).format(\"YYYY\")}</div>\n          <div className=\"yue\">月</div>\n        </div>\n        <div className=\"summary-info-pieces\">\n          <div className=\"summary-info-piece\">{\"番剧总数：\" + props.summary.bangumi_num}</div>\n          <div className=\"summary-info-piece\">{\"总集数：\" + props.summary.tv_episode_num}</div>\n          <div className=\"summary-info-piece\">{\"总时长：\" + formatTime(props.summary.total_time)}</div>\n          <div className=\"summary-info-piece\">{\"每日时长：\" + formatTime(props.summary.total_time / moment(props.month).daysInMonth())}</div>\n        </div>\n      </div>\n      <div className=\"summary-quotes\">\n        {\n          props.summary.quotes.length !== 0 ?\n          <>\n            {props.summary.quotes.map((quote) => <Quote quote={quote} setActiveQuoteId={props.setActiveQuoteId}/>)}\n            {authenticated ? <FiPlusCircle \n              className=\"clickable add-more-quote-button\"\n              onClick={() => {\n                addNewQuote(props.month);\n                setIsNewQuote(true);\n                setQuoteToEdit({});\n              }}\n            /> : <></>}\n          </> :\n          (authenticated ? <Button \n            className=\"pink-button add-quote-button\"\n            onClick={() => {\n              addNewQuote(props.month);\n              setQuoteToEdit({});\n            }}\n          >\n          添加语录\n          </Button> : <div className=\"add-quote-button\">暂无语录</div>)\n        }\n      </div>\n    </div>\n    <div className=\"summary-names\">\n      {props.summary.bangumis.map((bangumi_name) => \n        <div className=\"bangumi-name\">{\"• \" + bangumi_name}</div>)}\n    </div>\n  </div>\n}\n\nfunction MonthlySummary(props) {\n  const { monthlySummaries } = useContext(AnimeDataContext);\n\n  const [isNewQuote, setIsNewQuote] = useState(true);\n  const [showQuoteModal, setShowQuoteModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [activeQuoteId, setActiveQuoteId] = useState();\n  const [quoteToEdit, setQuoteToEdit] = useState({});\n  const [activeMonth, setActiveMonth] = useState(\"\");\n\n  const addNewQuote = (month) => {\n    setShowQuoteModal(true);\n    setActiveMonth(month);\n  };\n\n  const sortMonthlySummaries = (monthlySummaries) => {\n    const res = [];\n    for (const [month, summary] of Object.entries(monthlySummaries)) {\n      res.push([month, summary]);\n    }\n    res.sort((a, b) => a[0].localeCompare(b[0]) * -1);\n    return res;\n  }\n\n  return <div className=\"summaries\">\n      <Modal centered size='lg' show={showQuoteModal} onHide={() => setShowQuoteModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{isNewQuote ? \"添加新语录\" : \"编辑语录\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <Form onSubmit={(event) => {\n            if (isNewQuote) {\n              event.preventDefault();\n              props.onQuoteSubmit(event, activeMonth, quoteToEdit.id, true);\n            } else {\n              event.preventDefault();\n              props.onQuoteSubmit(event, quoteToEdit.month, quoteToEdit.id, false)\n            }\n            setShowQuoteModal(false);\n          }}>\n          <Form.Group controlId=\"content\">\n            <Form.Label>语录原文</Form.Label>\n            <Form.Control defaultValue={quoteToEdit.content} type=\"input\" as=\"textarea\" rows=\"3\"/>\n          </Form.Group>\n          <Form.Group controlId=\"translation\">\n            <Form.Label>中文翻译</Form.Label>\n            <Form.Control defaultValue={quoteToEdit.translation} type=\"input\" as=\"textarea\" rows=\"3\"/>\n          </Form.Group>\n          <Form.Row className=\"input-row\">\n            <Col><Form.Label>人物</Form.Label><Form.Control defaultValue={quoteToEdit.person} id=\"person\" type=\"input\"/></Col>\n            <Col><Form.Label>作品</Form.Label><Form.Control defaultValue={quoteToEdit.bangumi} id=\"bangumi\" type=\"input\"/></Col>\n          </Form.Row>\n          <Button className=\"pink-button\" type=\"submit\">\n            提交\n          </Button>\n        </Form>\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除语录</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除此语录吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setActiveQuoteId(null);\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteQuote(activeQuoteId);\n            setActiveQuoteId(null);\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n    {\n      sortMonthlySummaries(monthlySummaries).map((entry) => \n      <QuoteModificationContext.Provider value={{ setIsNewQuote, setShowQuoteModal, addNewQuote, setQuoteToEdit, setActiveQuoteId, setShowDeleteConfirmation }}>\n        <Summary month={entry[0]} summary={entry[1]} />\n      </QuoteModificationContext.Provider>)\n    }\n  </div>;\n}\n\nexport default MonthlySummary;","import React, { useState, useContext, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport { compareSeason } from '../utils/utils';\nimport '../App.css';\nimport './SeasonalSummary.css';\n\nexport default function SeasonalSummary(props) {\n  const { newAnimes } = useContext(AnimeDataContext);\n\n  const [summaryData, setSummaryData] = useState([]);\n\n\n  const formatRankingData = (data) => {\n    const res = [];\n    for (const [date, ranking] of Object.entries(data)) {\n      const splitted = date.split(\"-\");\n      res.push([Date.UTC(splitted[0], splitted[1], splitted[2]), ranking]);\n    }\n    return res;\n  }\n  \n  useEffect(() => {\n    const tempData = {};\n    newAnimes.forEach(newAnime => {\n      const rankings = newAnime[\"seasons_ranking\"];\n\n      for (const [season, seasonRankings] of Object.entries(rankings)) {\n        if (tempData[season] === undefined) {\n          tempData[season] = {\n            chart: {\n              height: 600,\n              borderRadius: 10\n            },\n            title: {\n              text: season\n            },\n            xAxis: {\n              type: 'datetime',\n              labels: {\n                format: '{value:%Y-%b-%e}'\n              },\n              title: {\n                text: '日期'\n              }\n            },\n            yAxis: {\n              title: {\n                text: '排名'\n              },\n              tickInterval: 1,\n              min: 1,\n              reversed: true\n            },\n            series: []\n          };\n        }\n        tempData[season].series.push({\n          name: newAnime.name,\n          data: formatRankingData(seasonRankings)\n        })\n      }\n    });\n    const newSummaryData = Array.from(Object.values(tempData));\n    newSummaryData.sort((e1, e2) => { return -compareSeason(e1.title.text, e2.title.text)});\n    setSummaryData(newSummaryData);\n  }, [newAnimes]);\n\n  return <div className=\"summaries seasonal-summaries\">\n    {summaryData.map((data) =>\n      <div className=\"summary-chart\">\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={data}\n      />\n    </div>\n    )}\n  </div>\n}","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport \"./Login.css\";\nimport \"../App.css\";\n\nexport default function Login() {\n  const { username, password, setAuthenticating, setUsername, setPassword, handleLogin } = useAuthenticationContext();\n\n  const validateForm = () => {\n    return username.length > 0 && password.length > 0;\n  }\n\n  return (\n    <div className=\"Login\">\n      <Form onSubmit={handleLogin}>\n        <Form.Group size=\"lg\" controlId=\"username\">\n          <Form.Label>用户名</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"password\">\n          <Form.Label>密码</Form.Label>\n          <Form.Control\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"button-group\">\n          <Button className=\"pink-button\" size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n            登陆\n          </Button>\n          <Button className=\"pink-button\" size=\"lg\" type=\"submit\" onClick={() => setAuthenticating(false)}>\n            取消\n          </Button>\n        </div>\n      </Form>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport * as Env from \"./environments\";\nimport Navivation from './components/Navigation';\nimport AnimeDataContext from './context/AnimeDataContext';\nimport AnimeList from './components/AnimeList';\nimport NewAnimeList from './components/NewAnimeList';\nimport MonthlySummary from './components/MonthlySummary';\nimport SeasonalSummary from './components/SeasonalSummary';\nimport Login from \"./components/Login\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { AuthenticationContext } from \"./context/AuthenticationContext\";\nimport { sortList, getUser, getToken, setUserSession, removeUserSession } from \"./utils/utils\";\nimport Parse from 'parse';\nimport moment from 'moment';\nimport './App.css';\n\nParse.initialize(Env.APPLICATION_ID, Env.JAVASCRIPT_KEY);\nParse.serverURL = Env.SERVER_URL;\n\nfunction App() {\n  // authentication related states\n  const [authenticated, setAuthenticated] = useState(false);\n  const [authenticating, setAuthenticating] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(getUser());\n  const [token, setToken] = useState(getToken());\n  // page status related states\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [activePage, setActivePage] = useState(\"AnimeList\")\n\n  // data related states\n  const [ratings, setRatings] = useState([]);\n  const [newAnimes, setNewAnimes] = useState([]);\n  const [summaries, setSummaries] = useState({});\n  const [quotes, setQuotes] = useState([]);\n\n  const fetchRatings = async () => {\n    setIsLoading(true);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for ratings\");\n      if (typeof document !== 'undefined'){\n        const ratings = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            year: result.get(\"year\"),\n            douban: result.get(\"douban\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            movies: result.get(\"movies\"),\n            episode_length: result.get(\"episode_length\"),\n            status: result.get(\"status\"),\n            genre: result.get(\"genre\"),\n            description: result.get(\"description\"),\n            story: result.get(\"story\"),\n            illustration: result.get(\"illustration\"),\n            music: result.get(\"music\"),\n            passion: result.get(\"passion\"),\n            rating: Number((result.get(\"story\") + result.get(\"illustration\") + result.get(\"music\") + result.get(\"passion\")).toFixed(1)),\n            start_date: moment(result.get(\"start_date\"), 'YYYY-MM-DD'),\n            end_date: moment(result.get(\"end_date\"), 'YYYY-MM-DD'),\n            times_watched: result.get(\"times_watched\"),\n          }}\n        );\n        setRatings(sortList(ratings, \"start_date\"));\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      console.error('Error while fetching ratings', error);\n    });\n  };\n\n  const fetchQuotes = async () => {\n    const quotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(quotesObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for quotes\");\n      if (typeof document !== 'undefined'){\n        const quotes = results.map((result) => {\n          return {\n            id: result.id,\n            month: result.get(\"month\"),\n            content: result.get(\"content\"),\n            translation: result.get(\"translation\"),\n            person: result.get(\"person\"),\n            bangumi: result.get(\"bangumi\"),\n          }}\n        );\n        setQuotes(quotes);\n      }\n    }, (error) => {\n      setLoadError(true);\n      console.error('Error while fetching quotes', error);\n    });\n  }\n\n  const fetchNewAnimes = async () => {\n    setIsLoading(true);\n    const quotesObj = Parse.Object.extend('NewAnimes');\n    const query = new Parse.Query(quotesObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for new animes\");\n      if (typeof document !== 'undefined'){\n        const newAnimes = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            genre: result.get(\"genre\"),\n            seasons_ranking: result.get(\"seasons_ranking\"),\n            start_date: result.get(\"start_date\"),\n            next_episode_day: result.get(\"next_episode_day\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            description: result.get(\"description\"),\n            season: result.get(\"season\"),\n            status: result.get(\"status\"),\n          }}\n        );\n        setNewAnimes(newAnimes);\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      console.error('Error while fetching new animes', error);\n    });\n  }\n\n  const submitNewEntry = async (newEntry, databaseName) => {\n    const DataObject = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(DataObject);\n    query.equalTo(\"name\", newEntry.name);\n    const results = await query.find();\n    if (results.length > 0) {\n      alert(\"番剧《\" + newEntry.name + \"》已存在！请勿重复添加番剧！\")\n    } else {\n      const newObj = new DataObject();\n      for (const [key, value] of Object.entries(newEntry)) {\n        newObj.set(key, value)\n      }\n      newObj.save().then(\n        (result) => {\n          alert(\"已提交番剧信息！\");\n          if (databaseName === \"Ratings\") {\n            fetchRatings();\n          } else if (databaseName === \"NewAnimes\") {\n            fetchNewAnimes();\n          }\n        },\n        (error) => {\n          alert(\"更新失败，请稍后重试。\");\n        }\n      );\n    }\n  };\n\n  const submitNewQuote = async (newQuote) => {\n    const QuotesObj = Parse.Object.extend('Quotes');\n    const newQuotesObj = new QuotesObj();\n    for (const [key, value] of Object.entries(newQuote)) {\n      newQuotesObj.set(key, value)\n    }\n    newQuotesObj.save().then(\n      (result) => {\n        alert(\"已添加语录！\");\n        fetchQuotes();\n      },\n      (error) => {\n        alert(\"添加失败，请稍后重试。\");\n      }\n    );\n  };\n\n  const updateEntry = async (id, newEntry, databaseName) => {\n    const obj = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(obj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newEntry)) {\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        alert(\"已更新番剧信息！\");\n        if (databaseName === \"Ratings\") {\n          fetchRatings();\n        } else if (databaseName === \"NewAnimes\") {\n          fetchNewAnimes();\n        }\n      }, (error) => {\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n  const updateQuote = async (id, newQuote) => {\n    const QuotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(QuotesObj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newQuote)) {\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        alert(\"已更新语录！\");\n        fetchQuotes();\n      }, (error) => {\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n\n  const updateNewAnimesRankings = async (ids, newRankings, season) => {\n    const obj = Parse.Object.extend(\"NewAnimes\");\n    const query = new Parse.Query(obj);\n    query.containedIn(\"objectId\", ids);\n    query.find().then((results) => {\n      results.forEach((result) => {\n        result.set(\"seasons_ranking\", newRankings[result.id]);\n      })\n      Parse.Object.saveAll(results).then((response) => {\n        alert(\"已更新排名！\");\n        fetchNewAnimes();\n      }, (err) => {\n        alert(\"更新排名失败。\");\n      })\n    }, (error) => {\n      alert(\"更新排名失败。\");\n    });\n  }\n\n  const deleteEntry = async (id, databaseName) => {\n    const obj = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(obj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        alert(\"已删除番剧！\");\n        if (databaseName === \"Ratings\") {\n          fetchRatings();\n        } else if (databaseName === \"NewAnimes\") {\n          fetchNewAnimes();\n        }\n      }, (error) => {\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  const deleteQuote = async (id) => {\n    const quotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(quotesObj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        alert(\"已删除语录！\");\n        fetchQuotes();\n      }, (error) => {\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchRatings();\n    fetchNewAnimes();\n    fetchQuotes();\n  }, [])\n\n  useEffect(() => {\n    const tempSummaries = {};\n    ratings.filter((rating) => rating.status === \"已看\").forEach((bangumi) => {\n      let endMonth = moment(bangumi.end_date).format('YYYY-MM');\n      if (!(endMonth in tempSummaries)) {\n        tempSummaries[endMonth] = {\n          bangumi_num: 0,\n          tv_episode_num: 0,\n          movie_num: 0,\n          total_time: 0,\n          daily_time: 0,\n          bangumis: [],\n          quotes: [],\n        };\n      }\n      tempSummaries[endMonth].bangumi_num += 1;\n      tempSummaries[endMonth].bangumis.push(bangumi.name);\n      tempSummaries[endMonth].tv_episode_num += bangumi.tv_episodes;\n      tempSummaries[endMonth].movie_num += bangumi.movies;\n      tempSummaries[endMonth].total_time += bangumi.tv_episodes * bangumi.episode_length + bangumi.movies * 90;\n    });\n    quotes.forEach((quote) => {\n      let month = moment(quote.month).format('YYYY-MM');\n      if (month in tempSummaries) {\n        tempSummaries[month].quotes.push(quote);\n      }\n    });\n    setSummaries(tempSummaries);\n  }, [ratings, quotes])\n\n  useEffect(() => {\n    if (user != null && token != null) {\n      setAuthenticated(true);\n    }\n  }, [user, token])\n\n  const handleAnimeSubmit = (event, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newRating = {\n      \"name\": formElements.name.value,\n      \"year\": formElements.year.value,\n      \"douban\": Number(formElements.douban.value),\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"movies\": Number(formElements.movies.value),\n      \"episode_length\": Number(formElements.episode_length.value),\n      \"status\": formElements.status.value,\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"story\": Number(formElements.story.value),\n      \"illustration\": Number(formElements.illustration.value),\n      \"music\": Number(formElements.music.value),\n      \"passion\": Number(formElements.passion.value),\n      \"start_date\": formElements.start_date.value,\n      \"end_date\": formElements.end_date.value,\n      \"times_watched\": Number(formElements.times_watched.value),\n    };\n    if (isNew) {\n      submitNewEntry(newRating, 'Ratings');\n    } else {\n      updateEntry(id, newRating, 'Ratings');\n    }\n  };\n\n  const handleNewAnimeSubmit = (event, id, isNew, newRanking) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newAnime = {\n      \"name\": formElements.name.value,\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"start_date\": formElements.start_date.value,\n      \"next_episode_day\": formElements.next_episode_day.value,\n      \"season\": formElements.season.value,\n      \"status\": formElements.status.value,\n    };\n    if (isNew) {\n      let latestSeason = formElements.season.value.split(\"，\");\n      latestSeason = latestSeason[latestSeason.length - 1];\n      let newSeasonsRanking = {}\n      newSeasonsRanking[latestSeason] = {}\n      newSeasonsRanking[latestSeason][moment().format(\"YYYY-MM-DD\")] = newRanking;\n      newAnime[\"seasons_ranking\"] = newSeasonsRanking;\n      submitNewEntry(newAnime, 'NewAnimes');\n    } else {\n      updateEntry(id, newAnime, 'NewAnimes');\n    }\n  };\n\n  const handleQuoteSubmit = (event, month, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newQuote = {\n      \"month\": month,\n      \"content\": formElements.content.value,\n      \"translation\": formElements.translation.value,\n      \"person\": formElements.person.value,\n      \"bangumi\": formElements.bangumi.value,\n    };\n    if (isNew) {\n      submitNewQuote(newQuote);\n    } else {\n      updateQuote(id, newQuote);\n    }\n  }\n\n  const handleLogin = (event) => {\n    event.preventDefault();\n    // Create a new instance of the user class\n    Parse.User.logIn(username, password).then((user) => {\n        setUserSession(user, user.getSessionToken());\n        alert(\"欢迎，\" + user.getUsername());\n        setAuthenticating(false);\n        setAuthenticated(true);\n    }).catch(function(error){\n        alert(error.message);\n    });\n  }\n\n  const handleSignOut = () => {\n    setUser(null);\n    setToken(null);\n    removeUserSession();\n    setAuthenticated(false);\n  }\n\n  const mainElement = (activePage) => {\n    switch (activePage) {\n      case 'AnimeList':\n        return <AnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchRatings}\n          onAnimeSubmit={handleAnimeSubmit}\n          deleteAnime={deleteEntry}\n        />;\n      case 'NewAnimeList':\n        return <NewAnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchNewAnimes}\n          onAnimeSubmit={handleAnimeSubmit}\n          onNewAnimeSubmit={handleNewAnimeSubmit}\n          updateEntry={updateEntry}\n          deleteNewAnime={deleteEntry}\n          updateNewAnimesRankings={updateNewAnimesRankings}\n        />\n      case 'MonthlySummary':\n        return <MonthlySummary\n          onQuoteSubmit={handleQuoteSubmit}\n          deleteQuote={deleteQuote}\n        />;\n      case 'SeasonalSummary':\n        return <SeasonalSummary />\n      default:\n        return <AnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchRatings}\n          onAnimeSubmit={handleAnimeSubmit}\n          deleteAnime={deleteEntry}\n        />;\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"App\">\n        <AuthenticationContext.Provider value={{ username, password, authenticated, setAuthenticating, handleLogin, handleSignOut, setUsername, setPassword }}>\n          <Navivation switchPage={setActivePage}/>\n          {authenticating ? <Login /> :\n            <AnimeDataContext.Provider value={{ ratings: ratings, monthlySummaries: summaries, newAnimes: newAnimes }}>\n              {mainElement(activePage)}\n            </AnimeDataContext.Provider>\n          }\n        </AuthenticationContext.Provider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}