{"version":3,"sources":["environments.js","components/Navigation.js","Context/AnimeDataContext.jsx","home/Home.js","register/Register.js","components/SortHeader.js","components/FilterBox.js","components/FilterHeader.js","components/DropdownHeader.js","components/Description.js","components/AnimeModal.js","utils.js","components/AnimeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APPLICATION_ID","JAVASCRIPT_KEY","SERVER_URL","Navigation","Navbar","sticky","expand","id","Brand","href","Nav","className","activeKey","window","location","pathname","Item","Link","AnimeDataContext","React","createContext","ratings","descriptions","Component","SortHeader","props","key","header","onClick","sort","FilterBox","useState","displayBox","setDisplayBox","placeholder","type","onKeyPress","e","filter","clearFilter","FilterHeader","DropdownHeader","name","onChange","event","filterStatus","value","selected","Description","description","undefined","src","process","alt","douban","year","genre","episodes","episode_length","AnimeModal","oldValue","console","log","Form","onSubmit","onSubmitOrEdit","Group","controlId","Label","Control","defaultValue","Row","Col","status","tv_episodes","movies","as","rows","story","music","passion","start_date","end_date","times_watched","Button","translateHeader","sortList","rawList","sortedCol","slice","a","b","isValid","compare","Parse","initialize","Env","serverURL","AnimeList","useContext","activeDescription","setActiveDescription","showDescription","setShowDescription","showAnimeModal","setShowAnimeModal","showDeleteConfirmation","setShowDeleteConfirmation","submitNewAnime","setSubmitNewAnime","animeToDelete","setAnimeToDelete","activeId","setActiveId","displayList","setDisplayList","filterList","setFilterList","setSortedCol","editAnimeOldValue","setEditAnimeOldValue","useEffect","isLoading","length","item","includes","Object","entries","loadError","Alert","variant","Modal","centered","size","show","onHide","Header","Title","Body","Footer","closeButton","preventDefault","onAnimeSubmit","deleteAnime","refresh","Table","striped","borderless","hover","map","newFilterList","target","row","illustration","rating","format","App","setIsLoading","setLoadError","setRatings","fetchRatings","ratingsObj","extend","query","Query","limit","find","then","results","document","result","get","Number","toFixed","moment","error","write","JSON","stringify","submitNewRating","newRating","RatingsObj","newRatingObj","set","save","alert","updateRating","object","response","destroy","basename","Provider","path","isNew","formElements","elements","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6d0eed11.chunk.js","sourcesContent":["module.exports = {\n    APPLICATION_ID: '54T0X4tWovUBdnRd6EKdW3BrN4WJrpGBEJdwDk9J',\n    JAVASCRIPT_KEY: 'WREbi60D2GfVknGhH9Je1GJ931oIhIVkHUXD9u5R',\n    SERVER_URL: 'https://parseapi.back4app.com/'\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport './Navigation.css';\n\nfunction Navigation() {\n    return (\n      <Navbar sticky=\"top\" expand=\"lg\" id=\"navbar\">\n        <Navbar.Brand href=\"/\">追番补番</Navbar.Brand>\n        <Nav className=\"mr-auto\" activeKey={window.location.pathname}>\n          <Nav.Item><Nav.Link href=\"/\">我的列表</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"/today\">今日更新</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"/calendar\">看番日历</Nav.Link></Nav.Item>\n      </Nav>\n      </Navbar>\n    );\n}\n\nexport default Navigation;\n","import React from 'react';\n\nconst animeData = {\n  ratings: [],\n  descriptions: {}\n}\n\nconst AnimeDataContext = React.createContext(animeData);\n\nexport default AnimeDataContext;","import React from 'react';\nimport './Home.css';\nimport Parse from \"parse\";\nimport { Form, Button, Container, Col, Row } from 'react-bootstrap';\n\nclass Home extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            buttonLoading: false,\n            usernameError: false,\n            passwordError: false,\n            username: '',\n            password: ''\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    changeHandler = event => {\n        const name = event.target.getAttribute('id');\n        const value = event.target.value;\n        if (!value || value === \"\") {            \n            this.setState({\n                [`${name}Error`]: true\n            })\n        } else { \n            this.setState({\n                [`${name}Error`]: false,\n                [name]: value\n            })\n        }\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        try{\n            await Parse.User.logIn(this.state.username, this.state.password);\n            alert(\"Logged in!\");\n        } catch (e){\n            alert(e.message); \n        }\n        \n    }\n\n    render() {\n\n        return (\n            <section id=\"home\">\n                <Container>\n                    <Row className={\"box-form\"}>\n                        <Col>\n                            <Form onSubmit={this.handleSubmit} className={\"formLogin\"}>\n                                <Form.Group>\n                                    <Form.Label htmlFor=\"username\">Username</Form.Label>\n                                    <Form.Control\n                                        required\n                                        id=\"username\"\n                                        type=\"text\"\n                                        onChange={this.changeHandler}\n                                    />\n                                    <Form.Control.Feedback className={this.state.usernameError ? \"displayErrors\" : 'noError'}>Username is required</Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label htmlFor=\"password\">Password</Form.Label>\n                                    <Form.Control\n                                        required\n                                        id=\"password\"\n                                        type=\"password\"\n                                        onChange={this.changeHandler}\n                                    />\n                                    <Form.Control.Feedback className={this.state.passwordError ? \"displayErrors\" : 'noError'}>Password is required</Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Row>\n                                    <Button type=\"submit\" className={\"btn btn-primary\"} disabled={( (!this.state.username || !this.state.password) ? true : false) ? true : false }>Login</Button>\n                                    <Button href=\"/register\" variant=\"link\">Register</Button>\n                                </Form.Row>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </section >\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport './Register.css';\nimport { Form, Button, Container, Col, Row } from 'react-bootstrap';\nimport Parse from \"parse\";\n\nclass Register extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      buttonLoading: false,\n      usernameError: false,\n      passwordError: false,\n      emailError: false,\n      username: '',\n      password: '',\n      email: ''\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  changeHandler = event => {\n    const name = event.target.getAttribute('id');\n    const value = event.target.value;\n    console.log(value)\n    if (!value || value === \"\") {\n      this.setState({\n        [`${name}Error`]: true\n      })\n    } else {\n      this.setState({\n        [`${name}Error`]: false,\n        [name]: value\n      })\n    }\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    let user = new Parse.User();\n    user.set(\"username\", this.state.username);\n    user.set(\"password\", this.state.password);\n    user.set(\"email\", this.state.email);\n\n    try {\n      await user.signUp();\n      alert(\"User created!\");\n      this.props.history.push(\"/\")\n    } catch (error) {\n      // Show the error message somewhere and let the user try again.\n      alert(\"Error: \" + error.code + \" \" + error.message);\n    }\n\n  }\n\n  render() {\n\n    return (\n      <section id=\"register\">\n        <Container>\n          <Row>\n            <h1>Sign Up</h1>\n          </Row>\n          <Row className={\"box-form\"}>\n            <Col>\n              <Form onSubmit={this.handleSubmit} className={\"formLogin\"}>\n                <Form.Group>\n                  <Form.Label htmlFor=\"username\">Username</Form.Label>\n                  <Form.Control\n                    required\n                    id=\"username\"\n                    type=\"text\"\n                    onChange={this.changeHandler}\n                  />\n                  <Form.Control.Feedback className={this.state.usernameError ? \"displayErrors\" : 'noError'}>Username is required</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                  <Form.Label htmlFor=\"email\">Email</Form.Label>\n                  <Form.Control\n                    required\n                    id=\"email\"\n                    type=\"email\"\n                    onChange={this.changeHandler}\n                  />\n                  <Form.Control.Feedback className={this.state.emailError ? \"displayErrors\" : 'noError'}>Email is required</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                  <Form.Label htmlFor=\"password\">Password</Form.Label>\n                  <Form.Control\n                    required\n                    id=\"password\"\n                    type=\"password\"\n                    onChange={this.changeHandler}\n                  />\n                  <Form.Control.Feedback className={this.state.passwordError ? \"displayErrors\" : 'noError'}>Password is required</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Row>\n                  <Button type=\"submit\" className={\"btn btn-primary\"} disabled={( (!this.state.username || !this.state.password || !this.state.email) ? true : false) ? true : false }>Register</Button>\n                  <Button href=\"/\" variant=\"link\">Login</Button>\n                </Form.Row>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </section >\n    );\n  }\n}\n\nexport default Register;\n","import React from 'react';\nimport { BiSort } from \"react-icons/bi\";\nimport '../App.css';\n\nexport default function SortHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <BiSort className='icon clickable' onClick={props.sort}/>\n      </div>\n    </th>\n  );\n}","import React, { useState } from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './FilterBox.css';\nimport '../App.css';\n\nexport default function FilterBox(props) {\n  const [displayBox, setDisplayBox] = useState(false);\n  return (displayBox ? \n    <div className=\"filter-box\">\n      <input className=\"filter-input-box\" placeholder=\"输入......\" type=\"text\" onKeyPress={(e) => {\n        if (e.key === \"Enter\") props.filter(e);\n      }}/>\n      <div className=\"close-button clickable\" onClick={() => {\n        props.clearFilter();\n        setDisplayBox(!displayBox)\n      }}>&times;</div>\n    </div> :\n    <AiOutlineSearch className=\"filter-box icon clickable\" onClick={() => setDisplayBox(!displayBox)}/>);\n}\n","import React from 'react';\nimport FilterBox from './FilterBox';\nimport './FilterHeader.css';\n\nexport default function FilterHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <FilterBox filter={props.filter} clearFilter={props.clearFilter}/>\n      </div>\n    </th>\n  );\n}","import React from 'react';\nimport './DropdownHeader.css';\n\nexport default function DropdownHeader(props) {\n  return <th key={props.header}>\n    <select id=\"status\" className=\"dropdown-header\" name=\"status\" onChange={(event) => props.filterStatus(event)}>\n      <option value=\"\" selected>状态</option>\n      <option value=\"想看\">想看</option>\n      <option value=\"在看\">在看</option>\n      <option value=\"已看\">已看</option>\n    </select>\n  </th>\n};","import React from 'react';\nimport './Description.css';\n\nexport default function Description(props) {\n  const description = props.description;\n  return description === undefined || description === null ? \n    <p>暂无简介</p> :\n    <div className=\"description\">\n      <img className=\"cover\" src={`${process.env.PUBLIC_URL}/covers/${description.name}.jpg`} alt={description.name} />\n      <div>\n        <h1>{description.name}</h1>\n        <p>豆瓣评分：{description.douban}</p>\n        <p>年份：{description.year}</p>\n        <p>分类：{description.genre}</p>\n        <p>集数：{description.episodes}</p>\n        <p>单集片长：{description.episode_length}</p>\n        <p>简介：{description.description}</p>\n      </div>\n    </div>;\n}","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './AnimeModal.css';\nimport '../App.css';\n\nexport default function AnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  console.log(oldValue);\n  return <Form onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>豆瓣评分<AiOutlineSearch className=\"icon clickable\" onClick={() => window.location.href=\"www.douban.com\"}/></Form.Label><Form.Control defaultValue={oldValue.douban} id=\"douban\" type=\"input\"/></Col>\n        <Col><Form.Label>年份</Form.Label><Form.Control defaultValue={oldValue.year} id=\"year\" type=\"input\"/></Col>\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>TV集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n        <Col><Form.Label>剧场版</Form.Label><Form.Control defaultValue={oldValue.movies} id=\"movies\" type=\"input\"/></Col>\n        <Col><Form.Label>单集片长</Form.Label><Form.Control defaultValue={oldValue.episode_length} id=\"episode_length\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Label>简介</Form.Label>\n      <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>剧情评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"story\" type=\"input\"/></Col>\n        <Col><Form.Label>作画评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"illustration\" type=\"input\"/></Col>\n        <Col><Form.Label>音乐评分</Form.Label><Form.Control defaultValue={oldValue.music} id=\"music\" type=\"input\"/></Col>\n        <Col><Form.Label>情怀评分</Form.Label><Form.Control defaultValue={oldValue.passion} id=\"passion\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>开始观看日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>结束观看日期</Form.Label><Form.Control defaultValue={oldValue.end_date} id=\"end_date\" type=\"input\"/></Col>\n        <Col><Form.Label>观看次数</Form.Label><Form.Control defaultValue={oldValue.times_watched} id=\"times_watched\" type=\"input\"/></Col>\n      </Form.Row>\n    </Form.Group>\n    <Button className=\"pink-button\" type=\"submit\">\n      提交\n    </Button>\n\n  </Form>\n}\n","export function formatEpisodes(tv_episodes, movies) {\n  if (tv_episodes === undefined || movies === undefined) {\n    return \"\";\n  } else if (tv_episodes === 0) {\n    return `剧场版×${movies}`;\n  } else if (movies === 0) {\n    return `${tv_episodes}集`;\n  } else {\n    return `${tv_episodes}集+剧场版×${movies}`;\n  }\n}\n\nexport function formatDate(start_date, end_date) {\n  if (!start_date.isValid()) {\n    return \"\"\n  } else if (!end_date.isValid()) {\n    return `${start_date.format('YYYY-MM-DD')}至今`;\n  } else {\n    return `${start_date.format('YYYY-MM-DD')} 至 ${end_date.format('YYYY-MM-DD')}`;\n  }\n}\n\nexport function translateHeader(header) {\n  switch(header) {\n    case '名称':\n      return 'name';\n    case '集数':\n      return 'tv_episodes';\n    case '状态':\n      return 'status';\n    case '分类':\n      return 'genre';\n    case '剧情':\n      return 'story';\n    case '作画':\n      return 'illustration';\n    case '音乐':\n      return 'music';\n    case '情怀':\n      return 'passion';\n    case '评分':\n      return 'rating';\n    case '首次观看日期':\n      return 'start_date';\n    case '观看次数':\n      return 'times_watched';\n    default:\n      return 'unknown';\n  }\n}\n\nexport function sortList(rawList, sortedCol) {\n  return rawList.slice().sort((a, b) => {\n    if (sortedCol === \"start_date\") {\n      if (!a[sortedCol].isValid()) {\n        return 1;\n      } else if (!b[sortedCol].isValid()) {\n        return -1;\n      } else {\n        return compare(a[sortedCol], b[sortedCol]);\n      }\n    } else {\n      return compare(a[sortedCol], b[sortedCol]);\n    }\n  });\n}\n\nfunction compare(a, b) {\n  if (a > b) {\n    return -1;\n  } else if (a < b) {\n    return 1;\n  } else {\n    return 0;\n  }\n}","import React, { useState, useEffect } from 'react';\nimport Parse from 'parse';\nimport * as Env from \"../environments\";\nimport AnimeDataContext from '../Context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport SortHeader from './SortHeader';\nimport FilterHeader from './FilterHeader';\nimport DropdownHeader from './DropdownHeader';\nimport Description from './Description';\nimport AnimeModal from './AnimeModal';\nimport { sortList, formatEpisodes, formatDate, translateHeader } from \"../utils\";\nimport '../App.css';\nimport './AnimeList.css';\n\nParse.initialize(Env.APPLICATION_ID, Env.JAVASCRIPT_KEY);\nParse.serverURL = Env.SERVER_URL;\n\nfunction AnimeList(props) {\n  const {ratings, descriptions} = React.useContext(AnimeDataContext);\n\n  const [activeDescription, setActiveDescription] = useState(null);\n  const [showDescription, setShowDescription] = useState(false);\n  const [showAnimeModal, setShowAnimeModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayList, setDisplayList] = useState(sortList(ratings, \"start_date\"));\n  const [filterList, setFilterList] = useState({});\n  const [sortedCol, setSortedCol] = useState();\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n  const tableHeaders = ['名称', '集数', '状态', '分类', '剧情', '作画', '音乐', '情怀', '评分', '首次观看日期', '观看次数', ''];\n\n  useEffect(() => {setSortedCol(\"start_date\")}, []);\n\n  useEffect(() => {setDisplayList(ratings)}, [props.isLoading, ratings]);\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      setDisplayList(sortList(ratings, sortedCol));\n      setSortedCol(null);\n    }\n  }, [sortedCol, ratings]);\n\n  useEffect(() => {\n    if (filterList.length !== 0) {\n      for (const [key, value] of Object.entries(filterList)) {\n        setDisplayList(ratings.filter((item) => {\n          return item[key].includes(value);\n        }));\n      }\n      setFilterList([]);\n    }\n  }, [filterList]);\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      番剧评分加载失败！\n    </Alert>;\n  } else {\n    return (<div id=\"table-wrapper\">\n      <Modal centered size='lg' show={showDescription} onHide={() => setShowDescription(false)}>\n        <Modal.Header>\n          <Modal.Title>简介</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Description description={activeDescription}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button className=\"pink-button\" onClick={() => setShowDescription(false)}>\n            关闭\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModal} onHide={() => setShowAnimeModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新番剧\" : \"编辑番剧\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              if (submitNewAnime) {\n                event.preventDefault();\n                props.onAnimeSubmit(event, null, true);\n                setShowAnimeModal(false);\n              } else {\n                event.preventDefault();\n                props.onAnimeSubmit(event, id, false);\n                setShowAnimeModal(false);\n              }\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteAnime(animeToDelete.id);\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <div className=\"button-group\">\n        <Button className=\"pink-button\" onClick={() => {\n          setEditAnimeOldValue(null);\n          setActiveId(null);\n          setShowAnimeModal(true);\n          setSubmitNewAnime(true);\n        }}>添加</Button>\n        <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '名称' || header === '分类') {\n                  return <FilterHeader header={header}\n                    filter={(e) => {\n                      let newFilterList = {};\n                      for (let item in filterList) {\n                        newFilterList[item] = filterList[item];\n                      }\n                      newFilterList[translateHeader(header)] = e.target.value;\n                      setFilterList(newFilterList);\n                    }}\n                    clearFilter={() => {\n                      setFilterList({});\n                      setDisplayList(ratings);\n                    }}\n                  />;\n                } else if (header === '状态') {\n                  return <DropdownHeader header={header} filterStatus={(event) => {\n                    setFilterList({\"status\": event.target.value});\n                  }}/>\n                } else if (header !== ''){\n                  return <SortHeader header={header} sort={() => setSortedCol(translateHeader(header))}/>;\n                } else {\n                  return <th></th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map(row =>\n                <tr key={row.name}>\n                  <td className='anime-name clickable' onClick={(e) => {\n                    setActiveDescription(\n                      {\n                        name: row.name,\n                        douban: row.douban,\n                        year: row.year,\n                        genre: row.genre,\n                        episodes: row.tv_episodes,\n                        episode_length: row.episode_length,\n                        description: row.description,\n                      }\n                    );\n                    setShowDescription(true);\n                  }}>{row.name}</td>\n                  <td>{formatEpisodes(row.tv_episodes, row.movies)}</td>\n                  <td>{row.status}</td>\n                  <td>{row.genre}</td>\n                  <td>{row.story}</td>\n                  <td>{row.illustration}</td>\n                  <td>{row.music}</td>\n                  <td>{row.passion}</td>\n                  <td>{row.rating}</td>\n                  <td>{formatDate(row.start_date, row.end_date)}</td>\n                  <td>{row.times_watched}</td>\n                  <td><BiEditAlt className=\"clickable\" onClick={() => {\n                    setActiveId(row.id);\n                    setEditAnimeOldValue({\n                      name: row.name,\n                      year: row.year,\n                      douban: row.douban,\n                      tv_episodes: row.tv_episodes,\n                      movies: row.movies,\n                      episode_length: row.episode_length,\n                      status: row.status,\n                      genre: row.genre,\n                      description: row.description,\n                      story: row.story,\n                      illustration: row.illustration,\n                      music: row.music,\n                      passion: row.passion,\n                      start_date: row.start_date.format('YYYY-MM-DD'),\n                      end_date: row.end_date.format('YYYY-MM-DD'),\n                      times_watched: row.times_watched,\n                    });\n                    setSubmitNewAnime(false);\n                    setShowAnimeModal(true);\n                  }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                    setAnimeToDelete({\n                      name: row.name,\n                      id: row.id,\n                    });\n                    setShowDeleteConfirmation(true);\n                  }}/></td>\n                </tr>)\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\n\nexport default AnimeList;","import React, { useState, useEffect } from 'react';\nimport Navivation from './components/Navigation';\nimport AnimeDataContext from './Context/AnimeDataContext';\nimport Home from './home/Home';\nimport Register from './register/Register';\nimport AnimeList from './components/AnimeList';\nimport * as Env from \"./environments\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { sortList } from \"./utils\";\nimport Parse from 'parse';\nimport moment from 'moment';\nimport './App.css';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [ratings, setRatings] = useState([]);\n  const [descriptions, setDescriptions] = useState({\n    \"Anime 1\": {\n      name: \"Anime 1\",\n      episodes: 42,\n      status: \"已看\",\n      genre: \"恋爱\",\n      description: \"This is a description the anime.\"\n    }\n  });\n\n  const fetchRatings = async () => {\n    setIsLoading(true);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server\");\n      if (typeof document !== 'undefined'){\n        const ratings = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            year: result.get(\"year\"),\n            douban: result.get(\"douban\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            movies: result.get(\"movies\"),\n            episode_length: result.get(\"episode_length\"),\n            status: result.get(\"status\"),\n            genre: result.get(\"genre\"),\n            description: result.get(\"description\"),\n            story: result.get(\"story\"),\n            illustration: result.get(\"illustration\"),\n            music: result.get(\"music\"),\n            passion: result.get(\"passion\"),\n            rating: Number((result.get(\"story\") + result.get(\"illustration\") + result.get(\"music\") + result.get(\"passion\")).toFixed(1)),\n            start_date: moment(result.get(\"start_date\"), 'YYYY-MM-DD'),\n            end_date: moment(result.get(\"end_date\"), 'YYYY-MM-DD'),\n            times_watched: result.get(\"times_watched\"),\n          }}\n        );\n        setRatings(sortList(ratings, \"start_date\"));\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      if (typeof document !== 'undefined') document.write(`Error while fetching ParseObjects: ${JSON.stringify(error)}`);\n      console.error('Error while fetching ParseObjects', error);\n    });\n  };\n\n  const submitNewRating = async (newRating) => {\n    const RatingsObj = Parse.Object.extend('Ratings');\n    const newRatingObj = new RatingsObj();\n    console.log(newRating);\n    for (const [key, value] of Object.entries(newRating)) {\n      newRatingObj.set(key, value)\n    }\n\n    newRatingObj.save().then(\n      (result) => {\n        console.log(result);\n        alert(\"已提交更新！\");\n        fetchRatings();\n      },\n      (error) => {\n        console.log(error);\n        alert(\"更新失败，请稍后重试。\");\n      }\n    );\n  };\n\n  const updateRating = async (id, newRating) => {\n    console.log(newRating);\n    console.log(id);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newRating)) {\n        console.log(\"here\");\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        console.log(response);\n        alert(\"已提交更新！\");\n        fetchRatings();\n      }, (error) => {\n        console.log(error);\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n  \n  const deleteAnime = async (id) => {\n    console.log(id);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        console.log(response);\n        alert(\"已删除番剧！\");\n        fetchRatings();\n      }, (error) => {\n        console.log(error);\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchRatings();\n  }, []);\n\n  const handleAnimeSubmit = (event, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newRating = {\n      \"name\": formElements.name.value,\n      \"year\": formElements.year.value,\n      \"douban\": Number(formElements.douban.value),\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"movies\": Number(formElements.movies.value),\n      \"episode_length\": Number(formElements.episode_length.value),\n      \"status\": formElements.status.value,\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"story\": Number(formElements.story.value),\n      \"illustration\": Number(formElements.illustration.value),\n      \"music\": Number(formElements.music.value),\n      \"passion\": Number(formElements.passion.value),\n      \"start_date\": formElements.start_date.value,\n      \"end_date\": formElements.end_date.value,\n      \"times_watched\": Number(formElements.times_watched.value),\n    };\n    if (isNew) {\n      submitNewRating(newRating);\n    } else {\n      updateRating(id, newRating);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"App\">\n        <Navivation />\n        <Router basename={process.env.PUBLIC_URL + \"/bangumi-ratings\"}>\n          <Switch>\n            <AnimeDataContext.Provider value={{ratings: ratings, descriptions: descriptions}}>\n              <Route path=\"/\">\n                <AnimeList isLoading={isLoading} loadError={loadError} refresh={fetchRatings} onAnimeSubmit={handleAnimeSubmit} deleteAnime={deleteAnime}/>\n              </Route>\n              <Route path=\"/today\">\n\n              </Route>\n              <Route path=\"/calendar\">\n\n              </Route>\n            </AnimeDataContext.Provider>\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}