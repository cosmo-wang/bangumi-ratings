{"version":3,"sources":["environments.js","context/AuthenticationContext.jsx","components/Navigation.js","context/AnimeDataContext.jsx","components/SortHeader.js","components/FilterBox.js","components/FilterHeader.js","components/Description.js","components/AnimeModal.js","utils/utils.js","components/AnimeList.js","components/Rankings.js","components/DailyNewAnimes.js","components/NewAnimeList.js","components/MonthlySummary.js","components/SeasonalSummary.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APPLICATION_ID","JAVASCRIPT_KEY","SERVER_URL","AuthenticationContext","createContext","useAuthenticationContext","useContext","UserManagement","authenticated","setAuthenticating","handleSignOut","id","className","onClick","Navigation","props","Navbar","sticky","expand","Brand","href","Nav","activeKey","window","location","pathname","Item","Link","switchPage","animeData","ratings","newAnimes","monthlySummaries","AnimeDataContext","React","SortHeader","header","sort","FilterBox","useState","displayBox","setDisplayBox","placeholder","type","onKeyPress","e","key","filter","clearFilter","FilterHeader","Description","description","undefined","name","target","rel","douban","year","genre","episodes","episode_length","AnimeModal","oldValue","setOldValue","useEffect","Form","onSubmit","event","onSubmitOrEdit","Group","controlId","Label","Control","defaultValue","Row","Col","status","tv_episodes","movies","as","rows","story","music","passion","start_date","todayDate","moment","Date","format","newOldValue","JSON","parse","stringify","end_date","times_watched","Button","formatEpisodes","formatTime","time","isNaN","Math","round","calculateDailyTime","row","days","diff","translate","word","sortList","rawList","sortedCol","slice","a","b","aQuantity","bQuantity","isValid","compare","getLatestRankings","currentSeason","rankings","forEach","newAnime","currentSeasonRankings","seasons_ranking","dates","Object","keys","latestRank","length","AnimeList","watchedHeaders","wantToWatchHeaders","activeDescription","setActiveDescription","showDescription","setShowDescription","showAnimeModal","setShowAnimeModal","showAnimeModalAuto","setShowAnimeModalAuto","showDeleteConfirmation","setShowDeleteConfirmation","submitNewAnime","setSubmitNewAnime","submitNewAnimeAuto","setSubmitNewAnimeAuto","animeToDelete","setAnimeToDelete","activeId","setActiveId","displayListStatus","setDisplayListStatus","displayList","setDisplayList","tableHeaders","setTableHeaders","filterList","setFilterList","setSortedCol","editAnimeOldValue","setEditAnimeOldValue","rating","isLoading","value","item","includes","entries","changeStatus","newStatus","innerHTML","formatDescription","substring","loadError","Alert","variant","Modal","centered","size","show","onHide","Header","Title","Body","Footer","closeButton","preventDefault","onAnimeSubmit","info","pageSrc","split","parseInt","error","console","trim","parseDoubanPage","elements","html","illustration","deleteAnime","refresh","Table","striped","borderless","hover","map","newFilterList","idx","DraggableRankingEntry","draggableId","index","toString","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","isDragging","draggableStyle","background","anime","Rankings","onDragEnd","droppableId","droppableProps","DailyNewAnimes","subtract","add","locale","day","ListGroup","isSame","startDate","isAfter","todayAnime","NewAnimeModal","season","next_episode_day","formElements","document","getElementById","handleRateNewAnime","Number","NewAnimeList","seasons","setSeasons","showAddModal","setShowAddModal","showRateModal","setShowRateModal","showRankings","setShowRankings","showToday","setShowToday","setRankings","localRankings","setLocalRankings","displayListSeason","setDisplayListSeason","rateAnimePartialInfo","setRateAnimePartialInfo","changeSeason","sortAnimesByRankings","animes","rankingsDictToArray","rankingsArray","Array","filteredNewAnimes","d","getFullYear","month","floor","getMonth","preSeason","nextSeason","getSeason","newRanking","max","values","onNewAnimeSubmit","partialInfo","deleteNewAnime","result","destination","newRankingsArray","list","startIndex","endIndex","from","splice","removed","reorder","source","newRankings","ranking","updatedIds","dateString","push","assign","updateNewAnimesRankings","QuoteModificationContext","useQuoteModificationContext","Quote","setQuoteToEdit","setShowQuoteModal","setIsNewQuote","setActiveQuoteId","quote","content","translation","person","bangumi","Summary","addNewQuote","summary","bangumi_num","tv_episode_num","total_time","daysInMonth","quotes","bangumis","bangumi_name","MonthlySummary","isNewQuote","showQuoteModal","activeQuoteId","quoteToEdit","activeMonth","setActiveMonth","onQuoteSubmit","deleteQuote","res","localeCompare","sortMonthlySummaries","entry","Provider","SeasonalSummary","summaryData","setSummaryData","formatRankingData","data","date","valueOf","tempData","seasonRankings","chart","height","borderRadius","title","text","xAxis","labels","yAxis","tickInterval","min","reversed","series","newSummaryData","e1","e2","season1","season2","year1","month1","replace","year2","month2","compareSeason","highcharts","Highcharts","options","Login","username","password","setUsername","setPassword","handleLogin","autoFocus","onChange","disabled","Parse","initialize","Env","serverURL","App","setAuthenticated","authenticating","userStr","sessionStorage","getItem","getUser","user","setUser","token","setToken","setIsLoading","setLoadError","activePage","setActivePage","setRatings","setNewAnimes","summaries","setSummaries","setQuotes","fetchRatings","ratingsObj","extend","query","Query","limit","find","then","results","log","get","toFixed","fetchQuotes","quotesObj","fetchNewAnimes","submitNewEntry","newEntry","databaseName","DataObject","equalTo","alert","newObj","set","save","submitNewQuote","newQuote","QuotesObj","newQuotesObj","updateEntry","obj","object","response","updateQuote","ids","containedIn","saveAll","err","deleteEntry","destroy","tempSummaries","endMonth","movie_num","daily_time","handleAnimeSubmit","isNew","newRating","handleNewAnimeSubmit","latestSeason","newSeasonsRanking","handleQuoteSubmit","User","logIn","setItem","setUserSession","getSessionToken","getUsername","catch","message","removeItem","mainElement","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3bf75c8.chunk.js","sourcesContent":["module.exports = {\n    APPLICATION_ID: '54T0X4tWovUBdnRd6EKdW3BrN4WJrpGBEJdwDk9J',\n    JAVASCRIPT_KEY: 'WREbi60D2GfVknGhH9Je1GJ931oIhIVkHUXD9u5R',\n    SERVER_URL: 'https://parseapi.back4app.com/'\n}","import { useContext, createContext } from \"react\";\n\nexport const AuthenticationContext = createContext(null);\n\nexport function useAuthenticationContext() {\n  return useContext(AuthenticationContext);\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport './Navigation.css';\nimport '../App.css';\n\nfunction UserManagement() {\n  const { authenticated, setAuthenticating, handleSignOut } = useAuthenticationContext();\n  if (authenticated) {\n    return <div id=\"user-management\">\n        <div className=\"text-button clickable\" onClick={handleSignOut}>注销</div>\n      </div>\n  } else {\n    return <div className=\"text-button clickable\" onClick={() => setAuthenticating(true)}>登陆</div>\n  }\n}\n\nfunction Navigation(props) {\n  return (\n    <Navbar sticky=\"top\" expand=\"lg\" id=\"navbar\">\n      <Navbar.Brand href=\"/\">追番补番</Navbar.Brand>\n      <Nav className=\"mr-auto\" activeKey={window.location.pathname}>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"AnimeList\")}>补番列表</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"NewAnimeList\")}>追番列表</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"MonthlySummary\")}>每月总结</Nav.Link></Nav.Item>\n        <Nav.Item><Nav.Link onClick={() => props.switchPage(\"SeasonalSummary\")}>季度总结</Nav.Link></Nav.Item>\n      </Nav>\n      <UserManagement />\n    </Navbar>\n  );\n}\n\nexport default Navigation;\n","import React from 'react';\n\nconst animeData = {\n  ratings: [],\n  newAnimes: [],\n  monthlySummaries: {}\n}\n\nconst AnimeDataContext = React.createContext(animeData);\n\nexport default AnimeDataContext;","import React from 'react';\nimport { BiSort } from \"react-icons/bi\";\nimport '../App.css';\n\nexport default function SortHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <BiSort className='icon clickable' onClick={props.sort}/>\n      </div>\n    </th>\n  );\n}","import React, { useState } from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './FilterBox.css';\nimport '../App.css';\n\nexport default function FilterBox(props) {\n  const [displayBox, setDisplayBox] = useState(false);\n  return (displayBox ? \n    <div className=\"filter-box\">\n      <input className=\"filter-input-box\" placeholder=\"输入......\" type=\"text\" onKeyPress={(e) => {\n        if (e.key === \"Enter\") props.filter(e);\n      }}/>\n      <div className=\"close-button clickable\" onClick={() => {\n        props.clearFilter();\n        setDisplayBox(!displayBox)\n      }}>&times;</div>\n    </div> :\n    <AiOutlineSearch className=\"filter-box icon clickable\" onClick={() => setDisplayBox(!displayBox)}/>);\n}\n","import React from 'react';\nimport FilterBox from './FilterBox';\nimport './FilterHeader.css';\n\nexport default function FilterHeader(props) {\n  return (\n    <th key={props.header}>\n      <div className='table-header'>\n        <div>{props.header}</div>\n        <FilterBox filter={props.filter} clearFilter={props.clearFilter}/>\n      </div>\n    </th>\n  );\n}","import React from 'react';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport './Description.css';\n\nexport default function Description(props) {\n  const description = props.description;\n  return description === undefined || description === null ? \n    <p>暂无简介</p> :\n    <div className=\"description\">\n      <div>\n        <h1>\n          {description.name}\n          <a href={\"https://www.douban.com/search?q=\" + description.name} target=\"_blank\" rel=\"noopener noreferrer\">\n            <AiOutlineSearch className=\"icon clickable\" />\n          </a>\n        </h1>\n        <p>豆瓣评分：{description.douban}</p>\n        <p>年份：{description.year}</p>\n        <p>分类：{description.genre}</p>\n        <p>集数：{description.episodes}</p>\n        <p>单集片长：{description.episode_length}</p>\n        <p>简介：{description.description}</p>\n      </div>\n    </div>;\n}","import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport moment from 'moment';\nimport './AnimeModal.css';\nimport '../App.css';\n\nexport default function AnimeModal(props) {\n\n  const [oldValue, setOldValue] = useState({});\n\n  useEffect(() => { setOldValue(props.oldValue == null || props.oldValue === undefined ? {} : props.oldValue) }, [props.oldValue])\n\n  const handleFillTodayDate = () => {\n    const todayDate = moment(new Date()).format(\"YYYY-MM-DD\");\n    const newOldValue = JSON.parse(JSON.stringify(oldValue));\n    newOldValue.end_date = todayDate;\n    setOldValue(newOldValue);\n  }\n\n  return <Form onSubmit={(event) => { props.onSubmitOrEdit(event, props.id) }}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>豆瓣评分<a href={\"https://www.douban.com\"} target=\"_blank\" rel=\"noopener noreferrer\"><AiOutlineSearch className=\"icon clickable\" /></a></Form.Label><Form.Control defaultValue={oldValue.douban} id=\"douban\" type=\"input\" /></Col>\n        <Col><Form.Label>年份</Form.Label><Form.Control defaultValue={oldValue.year} id=\"year\" type=\"input\" /></Col>\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\" /></Col>\n      </Form.Row>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\" /></Col>\n        <Col><Form.Label>TV集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\" /></Col>\n        <Col><Form.Label>剧场版</Form.Label><Form.Control defaultValue={oldValue.movies} id=\"movies\" type=\"input\" /></Col>\n        <Col><Form.Label>单集片长</Form.Label><Form.Control defaultValue={oldValue.episode_length} id=\"episode_length\" type=\"input\" /></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Label>简介</Form.Label>\n      <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>剧情评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"story\" type=\"input\" /></Col>\n        <Col><Form.Label>作画评分</Form.Label><Form.Control defaultValue={oldValue.story} id=\"illustration\" type=\"input\" /></Col>\n        <Col><Form.Label>音乐评分</Form.Label><Form.Control defaultValue={oldValue.music} id=\"music\" type=\"input\" /></Col>\n        <Col><Form.Label>情怀评分</Form.Label><Form.Control defaultValue={oldValue.passion} id=\"passion\" type=\"input\" /></Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>开始观看日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\" /></Col>\n        <Col><Form.Label>结束观看日期 <span className=\"clickable\" onClick={handleFillTodayDate}>(今日日期)</span></Form.Label><Form.Control defaultValue={oldValue.end_date} id=\"end_date\" type=\"input\" /></Col>\n        <Col><Form.Label>观看次数</Form.Label><Form.Control defaultValue={oldValue.times_watched} id=\"times_watched\" type=\"input\" /></Col>\n      </Form.Row>\n    </Form.Group>\n    <Button className=\"pink-button\" type=\"submit\">\n      提交\n    </Button>\n\n  </Form>\n}\n","// return the user data from the session storage\nexport const getUser = () => {\n  const userStr = sessionStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  else return null;\n}\n \n// return the token from the session storage\nexport const getToken = () => {\n  return sessionStorage.getItem('token') || null;\n}\n \n// remove the token and user from the session storage\nexport const removeUserSession = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n}\n \n// set the token and user from the session storage\nexport const setUserSession = (user, token) => {\n  sessionStorage.setItem('token', token);\n  sessionStorage.setItem('user', JSON.stringify(user));\n}\n\nexport function formatEpisodes(tv_episodes, movies) {\n  if (tv_episodes === undefined || movies === undefined) {\n    return \"\";\n  } else if (tv_episodes === 0) {\n    return `剧场版×${movies}`;\n  } else if (movies === 0) {\n    return `${tv_episodes}集`;\n  } else {\n    return `${tv_episodes}集+剧场版×${movies}`;\n  }\n}\n\nexport function formatDate(start_date, end_date) {\n  if (!start_date.isValid()) {\n    return \"\"\n  } else if (!end_date.isValid()) {\n    return `${start_date.format('MM/DD/YY')}至今`;\n  } else {\n    return `${start_date.format('MM/DD/YY')} 至 ${end_date.format('MM/DD/YY')}`;\n  }\n}\n\nexport function formatTime(time) {\n  if (isNaN(time)) {\n    return \"-\";\n  }\n  if (time >= 60) {\n    return Math.round(time / 60 * 10) / 10 + \" 小时\";\n  } else {\n    return Math.round(time * 10) / 10 + \" 分钟\";\n  }\n}\n\nexport function calculateDailyTime(row) {\n  const days = row.end_date.diff(row.start_date, 'days') + 1;\n  const episode_length = row.episode_length === undefined || row.episode_length === 0 ? 24 : row.episode_length;\n  const totalTime = row.tv_episodes * episode_length + row.movies * 90;\n  return totalTime / days;\n}\n\nexport function translate(word) {\n  switch(word) {\n    case '名称':\n      return 'name';\n    case '集数':\n    case '预计集数':\n      return 'tv_episodes';\n    case '状态':\n      return 'status';\n    case '分类':\n      return 'genre';\n    case '剧情':\n      return 'story';\n    case '作画':\n      return 'illustration';\n    case '音乐':\n      return 'music';\n    case '情怀':\n      return 'passion';\n    case '评分':\n      return 'rating';\n    case '首次观看日期':\n      return 'end_date';\n    case '观看次数':\n      return 'times_watched';\n    case '年份':\n      return 'year';\n    case '豆瓣评分':\n      return 'douban';\n    case '日均时长':\n      return 'daily_time';\n    case '排名':\n      return 'ranking';\n    case '季度':\n      return 'season';\n    case '开始放送日期':\n      return 'start_date';\n    case '更新日':\n      return 'next_episode_day';\n    default:\n      return 'unknown';\n  }\n}\n\nexport function sortList(rawList, sortedCol) {\n  return rawList.slice().sort((a, b) => {\n    const aQuantity = sortedCol === \"daily_time\" ? calculateDailyTime(a) : a[sortedCol];\n    const bQuantity = sortedCol === \"daily_time\" ? calculateDailyTime(b) : b[sortedCol];\n    if (sortedCol === \"start_date\" && typeof sortedCol !== \"string\") {\n      if (!aQuantity.isValid()) {\n        return 1;\n      } else if (!bQuantity.isValid()) {\n        return -1;\n      } else {\n        return compare(aQuantity, bQuantity);\n      }\n    } else {\n      return compare(aQuantity, bQuantity);\n    }\n  });\n}\n\nfunction compare(a, b) {\n  if (a > b) {\n    return -1;\n  } else if (a < b) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nexport function parseDoubanPage(pageSrc) {\n  const name = pageSrc.split(\"\\n\")[5].split(\" \")[0];\n  const year = pageSrc.split(\"首播: \")[1].split(\"-\")[0];\n  const douban = pageSrc.split(\"豆瓣评分\")[1].split(\"\\n\")[1];\n  let tv_episodes = 12;\n  try {\n    tv_episodes = parseInt(pageSrc.split(\"集数: \")[1].split(\"-\")[0]);\n  } catch (error) {\n    console.error(error);\n  }\n  let episode_length = 24;\n  try {\n    episode_length = parseInt(pageSrc.split(\"单集片长: \")[1].split(\"-\")[0]);\n  } catch (error) {\n    console.error(error);\n  }\n  const description = pageSrc.split(\"的剧情简介 · · · · · ·\")[1].split(\"\\n\\n\")[1].trim();\n  return {\n    name: name,\n    year: year,\n    douban: douban,\n    tv_episodes: isNaN(tv_episodes) ? 0 : tv_episodes,\n    episode_length: isNaN(episode_length) ? 12: episode_length,\n    description: description,\n  }\n}\n\nexport function getSeason() {\n  const d = new Date();\n  const year = d.getFullYear();\n  const month = Math.floor(d.getMonth()/3) * 3 + 1;\n  const curSeason = year + \"年\" + month + \"月\";\n  let preSeason = year + \"年\" + (month - 3) + \"月\";\n  let nextSeason = year + \"年\" + (month + 3) + \"月\";\n  if (month === 1) {\n    preSeason = (year - 1) + \"年10月\";\n  }\n  if (month === 10) {\n    nextSeason = (year + 1) + \"年1月\";\n  }\n  return [preSeason, curSeason, nextSeason];\n}\n\nexport function getLatestRankings(newAnimes, currentSeason) {\n  let rankings = {};\n  newAnimes.forEach(newAnime => {\n    const currentSeasonRankings = newAnime.seasons_ranking[currentSeason];\n    const dates = Object.keys(currentSeasonRankings);\n    const latestRank = currentSeasonRankings[dates.sort()[dates.length - 1]];\n    rankings[newAnime.name] = latestRank;\n  });\n  return rankings;\n}\n\nexport function compareSeason(season1, season2) {\n  const year1 = parseInt(season1.split(\"年\")[0]);\n  const month1 = parseInt(season1.split(\"年\")[1].replace(\"日\", \"\"));\n  const year2 = parseInt(season2.split(\"年\")[0]);\n  const month2 = parseInt(season2.split(\"年\")[1].replace(\"日\", \"\"));\n  if (year1 === year2) {\n    return month1 - month2;\n  } else {\n    return year1 - year2;\n  }\n}\n\n// place an item in list at startIndex to endIndex\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};","import React, { useState, useEffect } from 'react';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport SortHeader from './SortHeader';\nimport FilterHeader from './FilterHeader';\nimport Description from './Description';\nimport AnimeModal from './AnimeModal';\nimport { sortList, formatEpisodes, formatDate, translate, calculateDailyTime, formatTime, parseDoubanPage } from \"../utils/utils\";\nimport '../App.css';\nimport './AnimeList.css';\n\nfunction AnimeList(props) {\n\n  const { authenticated } = useAuthenticationContext();\n  \n  const { ratings } = React.useContext(AnimeDataContext);\n\n  const watchedHeaders = ['序号', '名称', '集数', '分类', '剧情', '作画', '音乐', '情怀', '评分', '首次观看日期', '日均时长', ''];\n  const wantToWatchHeaders = ['序号', '名称', '集数', '分类', '年份', '豆瓣评分', '简介', ''];\n  const [activeDescription, setActiveDescription] = useState(null);\n  const [showDescription, setShowDescription] = useState(false);\n  const [showAnimeModal, setShowAnimeModal] = useState(false);\n  const [showAnimeModalAuto, setShowAnimeModalAuto] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [submitNewAnimeAuto, setSubmitNewAnimeAuto] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayListStatus, setDisplayListStatus] = useState(\"已看\");\n  const [displayList, setDisplayList] = useState(ratings);\n  const [tableHeaders, setTableHeaders] = useState(watchedHeaders);\n  const [filterList, setFilterList] = useState({});\n  const [sortedCol, setSortedCol] = useState(\"end_date\");\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n\n  useEffect(() => {\n    setFilterList([]);\n    setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"end_date\"));\n  }, [props.isLoading, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      if (displayListStatus === '在看' && sortedCol === \"end_date\") {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"start_date\"));\n      } else {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), sortedCol));\n      }\n      setSortedCol(null);\n    } else {\n      if (displayListStatus === '在看' ) {\n        setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"start_date\"));\n      }\n    }\n  }, [sortedCol, ratings, displayListStatus]);\n\n  useEffect(() => {\n    if (filterList.length !== 0) {\n      for (const [key, value] of Object.entries(filterList)) {\n        setDisplayList(ratings.filter((item) => {\n          return item[key].includes(value) && item.status === displayListStatus;\n        }));\n      }\n      setFilterList([]);\n    }\n  }, [ratings, filterList, displayListStatus]);\n\n  const changeStatus = (e) => {\n    const newStatus = e.target.innerHTML;\n    if (newStatus === '想看') {\n      setTableHeaders(wantToWatchHeaders);\n    } else {\n      setTableHeaders(watchedHeaders);\n    }\n    setDisplayListStatus(newStatus);\n  }\n\n  const formatDescription = (description) => {\n    if (description !== null && description !== undefined) {\n      return description.substring(0, 20) + '......';\n    }\n  }\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      番剧评分加载失败！\n    </Alert>;\n  } else {\n    return (<div className=\"main-element\">\n      <Modal centered size='lg' show={showDescription} onHide={() => setShowDescription(false)}>\n        <Modal.Header>\n          <Modal.Title>简介</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Description description={activeDescription}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button className=\"pink-button\" onClick={() => setShowDescription(false)}>\n            关闭\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModal} onHide={() => setShowAnimeModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新番剧\" : \"编辑番剧\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              if (submitNewAnime) {\n                props.onAnimeSubmit(event, null, true);\n              } else if (submitNewAnimeAuto) {\n                props.onAnimeSubmit(event, null, true);\n              } else {\n                props.onAnimeSubmit(event, id, false);\n              }\n              setShowAnimeModal(false);\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size='lg' show={showAnimeModalAuto} onHide={() => setShowAnimeModalAuto(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>添加新番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={(event) => {\n            event.preventDefault();\n            const info = parseDoubanPage(event.target.elements.html.value);\n            setEditAnimeOldValue({\n              name: info.name,\n              year: info.year,\n              douban: info.douban,\n              tv_episodes: info.tv_episodes,\n              movies: 0,\n              episode_length: info.episode_length,\n              status: \"想看\",\n              genre: \"\",\n              description: info.description,\n              story: 0,\n              illustration: 0,\n              music: 0,\n              passion: 0,\n              start_date: null,\n              end_date: null,\n              times_watched: 0,\n            });\n            setSubmitNewAnimeAuto(true);\n            setShowAnimeModalAuto(false);\n            setActiveId(null);\n            setShowAnimeModal(true);\n          }}>\n            <Form.Group>\n              <Form.Label>豆瓣页面源</Form.Label>\n              <Form.Control id=\"html\" as=\"textarea\" rows=\"10\" />\n            </Form.Group>\n            <Button className=\"pink-button\" type=\"submit\">\n              提交\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteAnime(animeToDelete.id, \"Ratings\");\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          <Button className=\"pink-button\" onClick={changeStatus}>已看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>在看</Button>\n          <Button className=\"pink-button\" onClick={changeStatus}>想看</Button>\n        </div>\n        <div>\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModal(true);\n            setSubmitNewAnime(true);\n          }}>手动添加</Button> : <></>}\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAnimeModalAuto(true);\n            setSubmitNewAnime(true);\n          }}>自动添加</Button> : <></>}\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '名称' || header === '分类') {\n                  return <FilterHeader key={header} header={header}\n                    filter={(e) => {\n                      let newFilterList = {};\n                      for (let item in filterList) {\n                        newFilterList[item] = filterList[item];\n                      }\n                      newFilterList[translate(header)] = e.target.value;\n                      setFilterList(newFilterList);\n                    }}\n                    clearFilter={() => {\n                      setFilterList([]);\n                      setDisplayList(sortList(ratings.filter((rating) => rating.status === displayListStatus), \"end_date\"));\n                    }}\n                  />;\n                } else if (header === '序号') {\n                  return <th key={header} >序号</th>\n                } else if (header !== ''){\n                  return <SortHeader key={header} header={header} sort={() => setSortedCol(translate(header))}/>;\n                } else {\n                  return <th key={header} ></th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map((row, idx) =>\n                <tr key={row.name}>\n                  <td>{idx + 1}</td>\n                  <td className='anime-name clickable' onClick={(e) => {\n                    setActiveDescription(\n                      {\n                        name: row.name,\n                        douban: row.douban,\n                        year: row.year,\n                        genre: row.genre,\n                        episodes: row.tv_episodes,\n                        episode_length: row.episode_length,\n                        description: row.description,\n                      }\n                    );\n                    setShowDescription(true);\n                  }}>{row.name}</td>\n                  <td>{formatEpisodes(row.tv_episodes, row.movies)}</td>\n                  <td>{row.genre}</td>\n                  <td>{displayListStatus === '想看' ? row.year : row.story}</td>\n                  <td>{displayListStatus === '想看' ? row.douban : row.illustration}</td>\n                  <td>{displayListStatus === '想看' ? formatDescription(row.description) : row.music}</td>\n                  {displayListStatus === '想看' ? \"\" : <td>{row.passion}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{row.rating}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatDate(row.start_date, row.end_date)}</td>}\n                  {displayListStatus === '想看' ? \"\" : <td>{formatTime(calculateDailyTime(row))}</td>}\n                  <td> {authenticated ?\n                      <>\n                        <BiEditAlt className=\"clickable\" onClick={() => {\n                          setActiveId(row.id);\n                          setEditAnimeOldValue({\n                            name: row.name,\n                            year: row.year,\n                            douban: row.douban,\n                            tv_episodes: row.tv_episodes,\n                            movies: row.movies,\n                            episode_length: row.episode_length,\n                            status: row.status,\n                            genre: row.genre,\n                            description: row.description,\n                            story: row.story,\n                            illustration: row.illustration,\n                            music: row.music,\n                            passion: row.passion,\n                            start_date: row.start_date.format('YYYY-MM-DD'),\n                            end_date: row.end_date.format('YYYY-MM-DD'),\n                            times_watched: row.times_watched,\n                          });\n                          setSubmitNewAnime(false);\n                          setShowAnimeModal(true);\n                        }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                          setAnimeToDelete({\n                            name: row.name,\n                            id: row.id,\n                          });\n                          setShowDeleteConfirmation(true);\n                        }}/>\n                      </> : <></>\n                    }\n                    </td>\n                </tr>)\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nexport default AnimeList;","import React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./Rankings.css\";\nimport \"../App.css\";\n\nfunction DraggableRankingEntry(props) {\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    // change background colour if dragging\n    background: isDragging ? \"grey\" : \"transparent\",\n\n    // styles we need to apply on draggables\n    ...draggableStyle,\n  });\n\n  return (\n    <div className=\"drag-item-container\">\n      <Draggable\n        key={props.index}\n        draggableId={props.index.toString()}\n        index={props.index}\n      >\n        {(provided, snapshot) => (\n          <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            style={getItemStyle(\n              snapshot.isDragging,\n              provided.draggableProps.style\n            )}\n            className=\"drag-item\"\n          >\n            <div className={`ranking-entry${props.index < 3 ? \"-red\" : \"\"}`}>\n              <div className={`ranking-entry-num`}><b>{props.index + 1}</b></div>\n              <div className=\"ranking-entry-name\">{props.anime}</div>\n            </div>\n          </div>\n        )}\n      </Draggable>\n    </div>\n  );\n}\n\nexport default function Rankings(props) {\n  return (\n    <div id=\"rankings\">\n      <DragDropContext onDragEnd={props.onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              className=\"drag-list\"\n            >\n              {props.rankings.map((anime, index) => (\n                <DraggableRankingEntry anime={anime} index={index} />\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport './DailyNewAnimes.css';\n\nexport default function DailyNewAnimes(props) {\n\n  const days = [moment().subtract(1,'days'), moment(), moment().add(1, 'days')];\n\n  moment.locale('zh-cn');\n\n  return <div id=\"daily-new-animes\">\n            {days.map(day => \n              <ListGroup>\n                <ListGroup.Item variant={day.isSame(moment(), 'day') ? 'primary' : 'dark'}>{day.format('dddd[，]YYYY[年]MMMDo ')}</ListGroup.Item>\n                {props.displayList.filter(newAnime => {\n                  const startDate = moment(newAnime.start_date);\n                  return day.isAfter(startDate) && day.diff(startDate, 'days') % 7 === 0;\n                }).map(todayAnime => <ListGroup.Item key={todayAnime.name}>{todayAnime.name}</ListGroup.Item>)}\n              </ListGroup>\n            )}\n          </div>\n}","import React, { useState, useEffect } from 'react';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Alert from 'react-bootstrap/Alert';\nimport moment from 'moment';\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport SortHeader from './SortHeader';\nimport AnimeModal from './AnimeModal';\nimport Rankings from './Rankings';\nimport DailyNewAnimes from './DailyNewAnimes';\nimport { getSeason, formatEpisodes, translate, sortList, getLatestRankings, reorder } from \"../utils/utils\";\nimport '../App.css';\nimport './NewAnimeList.css';\n\nfunction NewAnimeModal(props) {\n  const oldValue = props.oldValue === undefined || props.oldValue === null ? {} : props.oldValue;\n  return <Form id=\"new-anime-modal\" onSubmit={(event) => {props.onSubmitOrEdit(event, props.id)}}>\n    <Form.Group controlId=\"name\">\n      <Form.Label>名称</Form.Label>\n      <Form.Control defaultValue={oldValue.name} type=\"input\" />\n    </Form.Group>\n    <Form.Row className=\"input-row\">\n        <Col><Form.Label>季度</Form.Label><Form.Control defaultValue={oldValue.season} id=\"season\" type=\"input\"/></Col>\n        <Col><Form.Label>开始放送日期</Form.Label><Form.Control defaultValue={oldValue.start_date} id=\"start_date\" type=\"input\"/></Col>\n        <Col><Form.Label>更新日</Form.Label><Form.Control defaultValue={oldValue.next_episode_day} id=\"next_episode_day\" type=\"input\"/></Col>\n      </Form.Row>\n    <Form.Group>\n      <Form.Row className=\"input-row\">\n        <Col><Form.Label>状态</Form.Label><Form.Control defaultValue={oldValue.status} id=\"status\" type=\"input\"/></Col>\n        <Col><Form.Label>分类</Form.Label><Form.Control defaultValue={oldValue.genre} id=\"genre\" type=\"input\"/></Col>\n        <Col><Form.Label>预计集数</Form.Label><Form.Control defaultValue={oldValue.tv_episodes} id=\"tv_episodes\" type=\"input\"/></Col>\n      </Form.Row>\n      <Form.Group>\n      <Form.Label>简介</Form.Label>\n        <Form.Control defaultValue={oldValue.description} id=\"description\" as=\"textarea\" rows=\"3\" />\n      </Form.Group>\n    </Form.Group>\n    <div>\n      <Button className=\"pink-button\" type=\"submit\">\n        提交\n      </Button>\n      {props.submitNewAnime ? <></> : <Button onClick={() => {\n        const formElements = document.getElementById(\"new-anime-modal\").elements;\n        props.handleRateNewAnime({\n          \"name\": formElements.name.value,\n          \"tv_episodes\": Number(formElements.tv_episodes.value),\n          \"genre\": formElements.genre.value,\n          \"description\": formElements.description.value,\n          \"start_date\": formElements.start_date.value,\n          \"status\": formElements.status.value\n        });\n      }}>已追完</Button>}\n    </div>\n\n  </Form>\n}\n\nfunction NewAnimeList(props) {\n\n  const { authenticated } = useAuthenticationContext();\n  const { newAnimes } = React.useContext(AnimeDataContext);\n\n  const tableHeaders = ['排名', '名称', '分类', '季度', '开始放送日期', '更新日', '预计集数', '状态', '']\n\n  const [seasons, setSeasons] = useState([])\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showRateModal, setShowRateModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [showRankings, setShowRankings] = useState(false);\n  const [showToday, setShowToday] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [localRankings, setLocalRankings] = useState({});\n  const [submitNewAnime, setSubmitNewAnime] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState({});\n  const [activeId, setActiveId] = useState();\n  const [displayList, setDisplayList] = useState(newAnimes);\n  const [displayListSeason, setDisplayListSeason] = useState(null);\n  const [editAnimeOldValue, setEditAnimeOldValue] = useState(null);\n  const [sortedCol, setSortedCol] = useState(null);\n  const [rateAnimePartialInfo, setRateAnimePartialInfo] = useState(null);\n\n  useEffect(() => {setSortedCol(\"ranking\")}, []);\n\n  const handleRateNewAnime = (partialInfo) => {\n    partialInfo.status = \"已看\";\n    setRateAnimePartialInfo(partialInfo);\n    setShowAddModal(false);\n    setShowRateModal(true);\n  }\n\n  const changeSeason = (e) => {\n    setDisplayListSeason(e.target.innerHTML);\n  }\n\n  const sortAnimesByRankings = (animes, rankings) => {\n    animes.sort((a, b) => {\n      if (rankings[a.name] > rankings[b.name]) return 1;\n      if (rankings[a.name] < rankings[b.name]) return -1;\n      return 0;\n    })\n  }\n\n  const rankingsDictToArray = (rankings) => {\n    const rankingsArray = new Array(Object.entries(rankings).length);\n    for (const [anime, ranking] of Object.entries(rankings)) {\n      rankingsArray[ranking - 1] = anime;\n    }\n    return rankingsArray;\n  }\n\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n    const localRankingsArray = rankingsDictToArray(localRankings);\n    const newRankingsArray = reorder(\n      localRankingsArray,\n      result.source.index,\n      result.destination.index\n    );\n    const newRankings = {};\n    newRankingsArray.forEach((anime, ranking) => newRankings[anime] = ranking + 1);\n    setLocalRankings(newRankings);\n  };\n\n  useEffect(() => {\n    if (sortedCol !== null) {\n      const filteredNewAnimes = newAnimes.filter((newAnime) => newAnime.season.includes(displayListSeason));\n      if (sortedCol === 'ranking') {\n        sortAnimesByRankings(filteredNewAnimes, rankings);\n        setDisplayList(filteredNewAnimes);\n      } else {\n        setDisplayList(sortList(filteredNewAnimes, sortedCol));\n      }\n      setSortedCol(null);\n    }\n  }, [sortedCol, newAnimes, displayListSeason, rankings]);\n\n  useEffect(() => {\n    const seasons = getSeason();\n    setSeasons(seasons);\n    setDisplayListSeason(seasons[1]);\n  }, [])\n\n  useEffect(() => {\n    const filteredNewAnimes = newAnimes.filter((newAnime) => newAnime.season.includes(displayListSeason));\n    const rankings = getLatestRankings(filteredNewAnimes, displayListSeason);\n    sortAnimesByRankings(filteredNewAnimes, rankings);\n    setDisplayList(filteredNewAnimes);\n    setRankings(rankings);\n    setLocalRankings(rankings);\n  }, [props.isLoading, newAnimes, displayListSeason])\n\n  if (props.isLoading) {\n    return <div className=\"loading\">\n      <div>正在加载......</div>\n    </div> ;\n  } else if (props.loadError) {\n    return <Alert variant='danger'>\n      追番列表加载失败！\n    </Alert>;\n  } else {\n    return (<div className=\"main-element\">\n      <Modal centered size='lg' show={showAddModal} onHide={() => setShowAddModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{submitNewAnime ? \"添加新追番\" : \"编辑追番\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <NewAnimeModal\n            submitNewAnime={submitNewAnime}\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              if (submitNewAnime) {\n                const newRanking = Math.max(...Object.values(getLatestRankings(displayList, displayListSeason))) + 1;\n                props.onNewAnimeSubmit(event, null, true, newRanking);\n              } else {\n                props.onNewAnimeSubmit(event, id, false);\n              }\n              setShowAddModal(false);\n            }}\n            oldValue={editAnimeOldValue}\n            id={activeId}\n            handleRateNewAnime={handleRateNewAnime}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size='lg' show={showRateModal} onHide={() => setShowRateModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>评价番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AnimeModal\n            onSubmitOrEdit={(event, id) => {\n              event.preventDefault();\n              props.onAnimeSubmit(event, id, true);\n              setShowRateModal(false);\n            }}\n            oldValue={rateAnimePartialInfo}\n            id={activeId}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除番剧</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除番剧“${animeToDelete.name}”吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteNewAnime(animeToDelete.id, \"NewAnimes\");\n            setAnimeToDelete({});\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showRankings} onHide={() => setShowRankings(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>番剧排名</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Rankings rankings={rankingsDictToArray(localRankings)} onDragEnd={onDragEnd}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            const updatedIds = [];\n            const newRankings = {};\n            const dateString = moment().format(\"YYYY-MM-DD\");\n            displayList.forEach(row => {\n              updatedIds.push(row.id);\n              const newRanking = Object.assign({}, row.seasons_ranking);\n              newRanking[displayListSeason][dateString] = localRankings[row.name];\n              newRankings[row.id] = newRanking;\n            })\n            props.updateNewAnimesRankings(updatedIds, newRankings, displayListSeason);\n            setShowRankings(false)\n          }}>提交</Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal centered size='lg' show={showToday} onHide={() => setShowToday(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>近期更新</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <DailyNewAnimes displayList={displayList}/>\n        </Modal.Body>\n      </Modal>\n      <div className=\"button-group\">\n        <div>\n          {seasons.map(season => <Button key={season} className=\"pink-button\" onClick={changeSeason}>\n            {season}\n          </Button>)}\n        </div>\n        <div>\n          {authenticated ? <Button className=\"pink-button\" onClick={() => {\n            setSubmitNewAnime(true);\n            setEditAnimeOldValue(null);\n            setActiveId(null);\n            setShowAddModal(true);\n          }}>添加追番</Button> : <></>}\n          {authenticated ? <Button className=\"pink-button\" onClick={() => setShowRankings(true)}>排名</Button> : <></>}\n          <Button className=\"pink-button\" onClick={() => setShowToday(true)}>近期更新</Button>\n          <Button className=\"pink-button\" onClick={props.refresh}>刷新</Button>\n        </div>\n      </div>\n      <div>\n        <Table striped borderless hover size=\"sm\" variant=\"light\" id=\"table\">\n          <thead>\n            <tr className='table-headers'>\n              {tableHeaders.map(header => {\n                if (header === '更新日' || header === '排名' || header === '开始放送日期'){\n                  return <SortHeader key={header} header={header} sort={() => setSortedCol(translate(header))}/>;\n                } else {\n                  return <th key={header} >{header}</th>\n                }\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {\n              displayList.map(row => \n                <tr key={row.name}>\n                  <td>{rankings[row.name]}</td>\n                  <td className='anime-name'>{row.name}</td>\n                  <td>{row.genre}</td>\n                  <td>{row.season}</td>\n                  <td>{row.start_date}</td>\n                  <td>{row.next_episode_day}</td>\n                  <td>{formatEpisodes(row.tv_episodes, 0)}</td>\n                  <td>{row.status}</td>\n                  <td> {authenticated ?\n                    <>\n                      <BiEditAlt className=\"clickable\" onClick={() => {\n                        setActiveId(row.id);\n                        setEditAnimeOldValue({\n                          name: row.name,\n                          tv_episodes: row.tv_episodes,\n                          genre: row.genre,\n                          description: row.description,\n                          start_date: row.start_date,\n                          next_episode_day: row.next_episode_day,\n                          season: row.season,\n                          status: row.status\n                        });\n                        setSubmitNewAnime(false);\n                        setShowAddModal(true);\n                      }}/><BiTrash className=\"icon clickable\" onClick={() => {\n                        setAnimeToDelete({\n                          name: row.name,\n                          id: row.id,\n                        });\n                        setShowDeleteConfirmation(true);\n                      }}/>\n                    </> : <></>\n                  }</td>\n                </tr>  \n              )\n            }\n          </tbody>\n        </Table>\n      </div>\n    </div>);\n  }\n}\n\nexport default NewAnimeList;","import React, { useState, useContext, createContext } from 'react';\nimport moment from 'moment';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport { FiPlusCircle } from \"react-icons/fi\";\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport { formatTime } from \"../utils/utils\";\nimport './MonthlySummary.css';\nimport '../App.css';\n\nconst QuoteModificationContext = createContext(null);\n\nfunction useQuoteModificationContext() {\n  return useContext(QuoteModificationContext);\n}\n\nfunction Quote(props) {\n  const { authenticated } = useAuthenticationContext();\n  const { setQuoteToEdit, setShowQuoteModal, setIsNewQuote, setActiveQuoteId, setShowDeleteConfirmation } = useQuoteModificationContext();\n  return <blockquote>\n    <div className=\"quote-content\">{props.quote.content}</div>\n    <div className=\"quote-translation\">{props.quote.translation}</div>\n    <cite>\n      {props.quote.person + \"《\" + props.quote.bangumi + \"》\"}\n      {authenticated ? <BiEditAlt className=\"icon clickable\"\n        onClick={() => {\n          setIsNewQuote(false);\n          setQuoteToEdit(props.quote);\n          setShowQuoteModal(true);\n        }}/> : <></>}\n      {authenticated ? <BiTrash className=\"icon clickable\"\n        onClick={() => {\n          setActiveQuoteId(props.quote.id);\n          setShowDeleteConfirmation(true);\n        }}/> : <></>}\n    </cite>\n  </blockquote>\n}\n\nfunction Summary(props) {\n  const { authenticated } = useAuthenticationContext();\n  const { setIsNewQuote, setQuoteToEdit, addNewQuote } = useQuoteModificationContext();\n  return <div className=\"summary\">\n    <div className=\"summary-title\">\n      <div className=\"summary-info\">\n        <div className=\"year-month\">\n          <div className=\"month\">{moment(props.month).format(\"MM\")}</div>\n          <div className=\"year\">{moment(props.month).format(\"YYYY\")}</div>\n          <div className=\"yue\">月</div>\n        </div>\n        <div className=\"summary-info-pieces\">\n          <div className=\"summary-info-piece\">{\"番剧总数：\" + props.summary.bangumi_num}</div>\n          <div className=\"summary-info-piece\">{\"总集数：\" + props.summary.tv_episode_num}</div>\n          <div className=\"summary-info-piece\">{\"总时长：\" + formatTime(props.summary.total_time)}</div>\n          <div className=\"summary-info-piece\">{\"每日时长：\" + formatTime(props.summary.total_time / moment(props.month).daysInMonth())}</div>\n        </div>\n      </div>\n      <div className=\"summary-quotes\">\n        {\n          props.summary.quotes.length !== 0 ?\n          <>\n            {props.summary.quotes.map((quote, index) => <Quote key={index} quote={quote} setActiveQuoteId={props.setActiveQuoteId}/>)}\n            {authenticated ? <FiPlusCircle \n              className=\"clickable add-more-quote-button\"\n              onClick={() => {\n                addNewQuote(props.month);\n                setIsNewQuote(true);\n                setQuoteToEdit({});\n              }}\n            /> : <></>}\n          </> :\n          (authenticated ? <Button \n            className=\"pink-button add-quote-button\"\n            onClick={() => {\n              addNewQuote(props.month);\n              setQuoteToEdit({});\n            }}\n          >\n          添加语录\n          </Button> : <div className=\"add-quote-button\">暂无语录</div>)\n        }\n      </div>\n    </div>\n    <div className=\"summary-names\">\n      {props.summary.bangumis.map((bangumi_name, index) => \n        <div key={index} className=\"bangumi-name\">{\"• \" + bangumi_name}</div>)}\n    </div>\n  </div>\n}\n\nfunction MonthlySummary(props) {\n  const { monthlySummaries } = useContext(AnimeDataContext);\n\n  const [isNewQuote, setIsNewQuote] = useState(true);\n  const [showQuoteModal, setShowQuoteModal] = useState(false);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [activeQuoteId, setActiveQuoteId] = useState();\n  const [quoteToEdit, setQuoteToEdit] = useState({});\n  const [activeMonth, setActiveMonth] = useState(\"\");\n\n  const addNewQuote = (month) => {\n    setShowQuoteModal(true);\n    setActiveMonth(month);\n  };\n\n  const sortMonthlySummaries = (monthlySummaries) => {\n    const res = [];\n    for (const [month, summary] of Object.entries(monthlySummaries)) {\n      res.push([month, summary]);\n    }\n    res.sort((a, b) => a[0].localeCompare(b[0]) * -1);\n    return res;\n  }\n\n  return <div className=\"summaries\">\n      <Modal centered size='lg' show={showQuoteModal} onHide={() => setShowQuoteModal(false)}>\n        <Modal.Header closeButton>\n        <Modal.Title>{isNewQuote ? \"添加新语录\" : \"编辑语录\"}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <Form onSubmit={(event) => {\n            if (isNewQuote) {\n              event.preventDefault();\n              props.onQuoteSubmit(event, activeMonth, quoteToEdit.id, true);\n            } else {\n              event.preventDefault();\n              props.onQuoteSubmit(event, quoteToEdit.month, quoteToEdit.id, false)\n            }\n            setShowQuoteModal(false);\n          }}>\n          <Form.Group controlId=\"content\">\n            <Form.Label>语录原文</Form.Label>\n            <Form.Control defaultValue={quoteToEdit.content} type=\"input\" as=\"textarea\" rows=\"3\"/>\n          </Form.Group>\n          <Form.Group controlId=\"translation\">\n            <Form.Label>中文翻译</Form.Label>\n            <Form.Control defaultValue={quoteToEdit.translation} type=\"input\" as=\"textarea\" rows=\"3\"/>\n          </Form.Group>\n          <Form.Row className=\"input-row\">\n            <Col><Form.Label>人物</Form.Label><Form.Control defaultValue={quoteToEdit.person} id=\"person\" type=\"input\"/></Col>\n            <Col><Form.Label>作品</Form.Label><Form.Control defaultValue={quoteToEdit.bangumi} id=\"bangumi\" type=\"input\"/></Col>\n          </Form.Row>\n          <Button className=\"pink-button\" type=\"submit\">\n            提交\n          </Button>\n        </Form>\n        </Modal.Body>\n      </Modal>\n      <Modal centered size=\"sm\" show={showDeleteConfirmation} onHide={() => setShowDeleteConfirmation(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>删除语录</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{`确定要删除此语录吗`}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {\n            setActiveQuoteId(null);\n            setShowDeleteConfirmation(false);\n          }}>取消</Button>\n          <Button variant=\"danger\" onClick={() => {\n            props.deleteQuote(activeQuoteId);\n            setActiveQuoteId(null);\n            setShowDeleteConfirmation(false);\n          }}>确定</Button>\n        </Modal.Footer>\n      </Modal>\n    {\n      sortMonthlySummaries(monthlySummaries).map((entry, index) => \n      <QuoteModificationContext.Provider value={{ setIsNewQuote, setShowQuoteModal, addNewQuote, setQuoteToEdit, setActiveQuoteId, setShowDeleteConfirmation }} key={index} >\n        <Summary month={entry[0]} summary={entry[1]} />\n      </QuoteModificationContext.Provider>)\n    }\n  </div>;\n}\n\nexport default MonthlySummary;","import React, { useState, useContext, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport AnimeDataContext from '../context/AnimeDataContext';\nimport { compareSeason } from '../utils/utils';\nimport '../App.css';\nimport './SeasonalSummary.css';\n\nexport default function SeasonalSummary(props) {\n  const { newAnimes } = useContext(AnimeDataContext);\n\n  const [summaryData, setSummaryData] = useState([]);\n\n\n  const formatRankingData = (data) => {\n    const res = [];\n    for (const [date, ranking] of Object.entries(data)) {\n      res.push([new Date(date).valueOf(), ranking]);\n    }\n    return res;\n  }\n  \n  useEffect(() => {\n    const tempData = {};\n    newAnimes.forEach(newAnime => {\n      const rankings = newAnime[\"seasons_ranking\"];\n\n      for (const [season, seasonRankings] of Object.entries(rankings)) {\n        if (tempData[season] === undefined) {\n          tempData[season] = {\n            chart: {\n              height: 600,\n              borderRadius: 10\n            },\n            title: {\n              text: season\n            },\n            xAxis: {\n              type: 'datetime',\n              labels: {\n                format: '{value:%Y-%b-%e}'\n              },\n              title: {\n                text: '日期'\n              }\n            },\n            yAxis: {\n              title: {\n                text: '排名'\n              },\n              tickInterval: 1,\n              min: 1,\n              reversed: true\n            },\n            series: []\n          };\n        }\n        tempData[season].series.push({\n          name: newAnime.name,\n          data: formatRankingData(seasonRankings)\n        })\n      }\n    });\n    const newSummaryData = Array.from(Object.values(tempData));\n    newSummaryData.sort((e1, e2) => { return -compareSeason(e1.title.text, e2.title.text)});\n    setSummaryData(newSummaryData);\n  }, [newAnimes]);\n\n  return <div className=\"summaries seasonal-summaries\">\n    {summaryData.map((data, index) =>\n      <div className=\"summary-chart\" key={index}>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={data}\n        />\n      </div>\n    )}\n  </div>\n}","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { useAuthenticationContext } from \"../context/AuthenticationContext\";\nimport \"./Login.css\";\nimport \"../App.css\";\n\nexport default function Login() {\n  const { username, password, setAuthenticating, setUsername, setPassword, handleLogin } = useAuthenticationContext();\n\n  const validateForm = () => {\n    return username.length > 0 && password.length > 0;\n  }\n\n  return (\n    <div className=\"Login\">\n      <Form onSubmit={handleLogin}>\n        <Form.Group size=\"lg\" controlId=\"username\">\n          <Form.Label>用户名</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"password\">\n          <Form.Label>密码</Form.Label>\n          <Form.Control\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"button-group\">\n          <Button className=\"pink-button\" size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n            登陆\n          </Button>\n          <Button className=\"pink-button\" size=\"lg\" type=\"submit\" onClick={() => setAuthenticating(false)}>\n            取消\n          </Button>\n        </div>\n      </Form>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport * as Env from \"./environments\";\nimport Navivation from './components/Navigation';\nimport AnimeDataContext from './context/AnimeDataContext';\nimport AnimeList from './components/AnimeList';\nimport NewAnimeList from './components/NewAnimeList';\nimport MonthlySummary from './components/MonthlySummary';\nimport SeasonalSummary from './components/SeasonalSummary';\nimport Login from \"./components/Login\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { AuthenticationContext } from \"./context/AuthenticationContext\";\nimport { sortList, getUser, getToken, setUserSession, removeUserSession } from \"./utils/utils\";\nimport Parse from 'parse';\nimport moment from 'moment';\nimport './App.css';\n\nParse.initialize(Env.APPLICATION_ID, Env.JAVASCRIPT_KEY);\nParse.serverURL = Env.SERVER_URL;\n\nfunction App() {\n  // authentication related states\n  const [authenticated, setAuthenticated] = useState(false);\n  const [authenticating, setAuthenticating] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(getUser());\n  const [token, setToken] = useState(getToken());\n  // page status related states\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [activePage, setActivePage] = useState(\"AnimeList\")\n\n  // data related states\n  const [ratings, setRatings] = useState([]);\n  const [newAnimes, setNewAnimes] = useState([]);\n  const [summaries, setSummaries] = useState({});\n  const [quotes, setQuotes] = useState([]);\n\n  const fetchRatings = async () => {\n    setIsLoading(true);\n    const ratingsObj = Parse.Object.extend('Ratings');\n    const query = new Parse.Query(ratingsObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for ratings\");\n      if (typeof document !== 'undefined'){\n        const ratings = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            year: result.get(\"year\"),\n            douban: result.get(\"douban\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            movies: result.get(\"movies\"),\n            episode_length: result.get(\"episode_length\"),\n            status: result.get(\"status\"),\n            genre: result.get(\"genre\"),\n            description: result.get(\"description\"),\n            story: result.get(\"story\"),\n            illustration: result.get(\"illustration\"),\n            music: result.get(\"music\"),\n            passion: result.get(\"passion\"),\n            rating: Number((result.get(\"story\") + result.get(\"illustration\") + result.get(\"music\") + result.get(\"passion\")).toFixed(1)),\n            start_date: moment(result.get(\"start_date\"), 'YYYY-MM-DD'),\n            end_date: moment(result.get(\"end_date\"), 'YYYY-MM-DD'),\n            times_watched: result.get(\"times_watched\"),\n          }}\n        );\n        setRatings(sortList(ratings, \"start_date\"));\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      console.error('Error while fetching ratings', error);\n    });\n  };\n\n  const fetchQuotes = async () => {\n    const quotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(quotesObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for quotes\");\n      if (typeof document !== 'undefined'){\n        const quotes = results.map((result) => {\n          return {\n            id: result.id,\n            month: result.get(\"month\"),\n            content: result.get(\"content\"),\n            translation: result.get(\"translation\"),\n            person: result.get(\"person\"),\n            bangumi: result.get(\"bangumi\"),\n          }}\n        );\n        setQuotes(quotes);\n      }\n    }, (error) => {\n      setLoadError(true);\n      console.error('Error while fetching quotes', error);\n    });\n  }\n\n  const fetchNewAnimes = async () => {\n    setIsLoading(true);\n    const quotesObj = Parse.Object.extend('NewAnimes');\n    const query = new Parse.Query(quotesObj);\n    query.limit(1000);\n    query.find().then((results) => {\n      console.log(\"calling server for new animes\");\n      if (typeof document !== 'undefined'){\n        const newAnimes = results.map((result) => {\n          return {\n            id: result.id,\n            name: result.get(\"name\"),\n            genre: result.get(\"genre\"),\n            seasons_ranking: result.get(\"seasons_ranking\"),\n            start_date: result.get(\"start_date\"),\n            next_episode_day: result.get(\"next_episode_day\"),\n            tv_episodes: result.get(\"tv_episodes\"),\n            description: result.get(\"description\"),\n            season: result.get(\"season\"),\n            status: result.get(\"status\"),\n          }}\n        );\n        setNewAnimes(newAnimes);\n        setIsLoading(false);\n      }\n    }, (error) => {\n      setIsLoading(false);\n      setLoadError(true);\n      console.error('Error while fetching new animes', error);\n    });\n  }\n\n  const submitNewEntry = async (newEntry, databaseName) => {\n    const DataObject = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(DataObject);\n    query.equalTo(\"name\", newEntry.name);\n    const results = await query.find();\n    if (results.length > 0) {\n      alert(\"番剧《\" + newEntry.name + \"》已存在！请勿重复添加番剧！\")\n    } else {\n      const newObj = new DataObject();\n      for (const [key, value] of Object.entries(newEntry)) {\n        newObj.set(key, value)\n      }\n      newObj.save().then(\n        (result) => {\n          alert(\"已提交番剧信息！\");\n          if (databaseName === \"Ratings\") {\n            fetchRatings();\n          } else if (databaseName === \"NewAnimes\") {\n            fetchNewAnimes();\n          }\n        },\n        (error) => {\n          alert(\"更新失败，请稍后重试。\");\n        }\n      );\n    }\n  };\n\n  const submitNewQuote = async (newQuote) => {\n    const QuotesObj = Parse.Object.extend('Quotes');\n    const newQuotesObj = new QuotesObj();\n    for (const [key, value] of Object.entries(newQuote)) {\n      newQuotesObj.set(key, value)\n    }\n    newQuotesObj.save().then(\n      (result) => {\n        alert(\"已添加语录！\");\n        fetchQuotes();\n      },\n      (error) => {\n        alert(\"添加失败，请稍后重试。\");\n      }\n    );\n  };\n\n  const updateEntry = async (id, newEntry, databaseName) => {\n    const obj = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(obj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newEntry)) {\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        alert(\"已更新番剧信息！\");\n        if (databaseName === \"Ratings\") {\n          fetchRatings();\n        } else if (databaseName === \"NewAnimes\") {\n          fetchNewAnimes();\n        }\n      }, (error) => {\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n  const updateQuote = async (id, newQuote) => {\n    const QuotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(QuotesObj);\n    query.get(id).then((object) => {\n      for (const [key, value] of Object.entries(newQuote)) {\n        object.set(key, value)\n      }\n      object.save().then((response) => {\n        alert(\"已更新语录！\");\n        fetchQuotes();\n      }, (error) => {\n        alert(\"更新失败，请稍后重试。\");\n      });\n    });\n  };\n\n\n  const updateNewAnimesRankings = async (ids, newRankings, season) => {\n    const obj = Parse.Object.extend(\"NewAnimes\");\n    const query = new Parse.Query(obj);\n    query.containedIn(\"objectId\", ids);\n    query.find().then((results) => {\n      results.forEach((result) => {\n        result.set(\"seasons_ranking\", newRankings[result.id]);\n      })\n      Parse.Object.saveAll(results).then((response) => {\n        alert(\"已更新排名！\");\n        fetchNewAnimes();\n      }, (err) => {\n        alert(\"更新排名失败。\");\n      })\n    }, (error) => {\n      alert(\"更新排名失败。\");\n    });\n  }\n\n  const deleteEntry = async (id, databaseName) => {\n    const obj = Parse.Object.extend(databaseName);\n    const query = new Parse.Query(obj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        alert(\"已删除番剧！\");\n        if (databaseName === \"Ratings\") {\n          fetchRatings();\n        } else if (databaseName === \"NewAnimes\") {\n          fetchNewAnimes();\n        }\n      }, (error) => {\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  const deleteQuote = async (id) => {\n    const quotesObj = Parse.Object.extend('Quotes');\n    const query = new Parse.Query(quotesObj);\n    query.get(id).then((object) => {\n      object.destroy().then((response) => {\n        alert(\"已删除语录！\");\n        fetchQuotes();\n      }, (error) => {\n        alert(\"删除失败，请稍后重试。\");\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchRatings();\n    fetchNewAnimes();\n    fetchQuotes();\n  }, [])\n\n  useEffect(() => {\n    const tempSummaries = {};\n    ratings.filter((rating) => rating.status === \"已看\").forEach((bangumi) => {\n      let endMonth = moment(bangumi.end_date).format('YYYY-MM');\n      if (!(endMonth in tempSummaries)) {\n        tempSummaries[endMonth] = {\n          bangumi_num: 0,\n          tv_episode_num: 0,\n          movie_num: 0,\n          total_time: 0,\n          daily_time: 0,\n          bangumis: [],\n          quotes: [],\n        };\n      }\n      tempSummaries[endMonth].bangumi_num += 1;\n      tempSummaries[endMonth].bangumis.push(bangumi.name);\n      tempSummaries[endMonth].tv_episode_num += bangumi.tv_episodes;\n      tempSummaries[endMonth].movie_num += bangumi.movies;\n      tempSummaries[endMonth].total_time += bangumi.tv_episodes * bangumi.episode_length + bangumi.movies * 90;\n    });\n    quotes.forEach((quote) => {\n      let month = moment(quote.month).format('YYYY-MM');\n      if (month in tempSummaries) {\n        tempSummaries[month].quotes.push(quote);\n      }\n    });\n    setSummaries(tempSummaries);\n  }, [ratings, quotes])\n\n  useEffect(() => {\n    if (user != null && token != null) {\n      setAuthenticated(true);\n    }\n  }, [user, token])\n\n  const handleAnimeSubmit = (event, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newRating = {\n      \"name\": formElements.name.value,\n      \"year\": formElements.year.value,\n      \"douban\": Number(formElements.douban.value),\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"movies\": Number(formElements.movies.value),\n      \"episode_length\": Number(formElements.episode_length.value),\n      \"status\": formElements.status.value,\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"story\": Number(formElements.story.value),\n      \"illustration\": Number(formElements.illustration.value),\n      \"music\": Number(formElements.music.value),\n      \"passion\": Number(formElements.passion.value),\n      \"start_date\": formElements.start_date.value,\n      \"end_date\": formElements.end_date.value,\n      \"times_watched\": Number(formElements.times_watched.value),\n    };\n    if (isNew) {\n      submitNewEntry(newRating, 'Ratings');\n    } else {\n      updateEntry(id, newRating, 'Ratings');\n    }\n  };\n\n  const handleNewAnimeSubmit = (event, id, isNew, newRanking) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newAnime = {\n      \"name\": formElements.name.value,\n      \"tv_episodes\": Number(formElements.tv_episodes.value),\n      \"genre\": formElements.genre.value,\n      \"description\": formElements.description.value,\n      \"start_date\": formElements.start_date.value,\n      \"next_episode_day\": formElements.next_episode_day.value,\n      \"season\": formElements.season.value,\n      \"status\": formElements.status.value,\n    };\n    if (isNew) {\n      let latestSeason = formElements.season.value.split(\"，\");\n      latestSeason = latestSeason[latestSeason.length - 1];\n      let newSeasonsRanking = {}\n      newSeasonsRanking[latestSeason] = {}\n      newSeasonsRanking[latestSeason][moment().format(\"YYYY-MM-DD\")] = newRanking;\n      newAnime[\"seasons_ranking\"] = newSeasonsRanking;\n      submitNewEntry(newAnime, 'NewAnimes');\n    } else {\n      updateEntry(id, newAnime, 'NewAnimes');\n    }\n  };\n\n  const handleQuoteSubmit = (event, month, id, isNew) => {\n    event.preventDefault();\n    const formElements = event.target.elements;\n    const newQuote = {\n      \"month\": month,\n      \"content\": formElements.content.value,\n      \"translation\": formElements.translation.value,\n      \"person\": formElements.person.value,\n      \"bangumi\": formElements.bangumi.value,\n    };\n    if (isNew) {\n      submitNewQuote(newQuote);\n    } else {\n      updateQuote(id, newQuote);\n    }\n  }\n\n  const handleLogin = (event) => {\n    event.preventDefault();\n    // Create a new instance of the user class\n    Parse.User.logIn(username, password).then((user) => {\n        setUserSession(user, user.getSessionToken());\n        alert(\"欢迎，\" + user.getUsername());\n        setAuthenticating(false);\n        setAuthenticated(true);\n    }).catch(function(error){\n        alert(error.message);\n    });\n  }\n\n  const handleSignOut = () => {\n    setUser(null);\n    setToken(null);\n    removeUserSession();\n    setAuthenticated(false);\n  }\n\n  const mainElement = (activePage) => {\n    switch (activePage) {\n      case 'AnimeList':\n        return <AnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchRatings}\n          onAnimeSubmit={handleAnimeSubmit}\n          deleteAnime={deleteEntry}\n        />;\n      case 'NewAnimeList':\n        return <NewAnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchNewAnimes}\n          onAnimeSubmit={handleAnimeSubmit}\n          onNewAnimeSubmit={handleNewAnimeSubmit}\n          updateEntry={updateEntry}\n          deleteNewAnime={deleteEntry}\n          updateNewAnimesRankings={updateNewAnimesRankings}\n        />\n      case 'MonthlySummary':\n        return <MonthlySummary\n          onQuoteSubmit={handleQuoteSubmit}\n          deleteQuote={deleteQuote}\n        />;\n      case 'SeasonalSummary':\n        return <SeasonalSummary />\n      default:\n        return <AnimeList\n          isLoading={isLoading}\n          loadError={loadError}\n          refresh={fetchRatings}\n          onAnimeSubmit={handleAnimeSubmit}\n          deleteAnime={deleteEntry}\n        />;\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"App\">\n        <AuthenticationContext.Provider value={{ username, password, authenticated, setAuthenticating, handleLogin, handleSignOut, setUsername, setPassword }}>\n          <Navivation switchPage={setActivePage}/>\n          {authenticating ? <Login /> :\n            <AnimeDataContext.Provider value={{ ratings: ratings, monthlySummaries: summaries, newAnimes: newAnimes }}>\n              {mainElement(activePage)}\n            </AnimeDataContext.Provider>\n          }\n        </AuthenticationContext.Provider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}